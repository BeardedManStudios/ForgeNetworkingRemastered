<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<doc>
  <members>
    <assembly>
      <name>UnityEditor</name>
    </assembly>
    <member name="T:UnityEditor.ActionOnDotNetUnhandledException">
      <summary>
        <para>The behavior in case of unhandled .NET exception.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ActionOnDotNetUnhandledException.Crash">
      <summary>
        <para>Crash in case of unhandled .NET exception (Crash Report will be generated).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ActionOnDotNetUnhandledException.SilentExit">
      <summary>
        <para>Silent exit in case of unhandled .NET exception (no Crash Report generated).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Advertisements.AdvertisementSettings">
      <summary>
        <para>Editor API for the Unity Services editor feature. Normally UnityAds is enabled from the Services window, but if writing your own editor extension, this API can be used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Advertisements.AdvertisementSettings.enabled">
      <summary>
        <para>Global boolean for enabling or disabling the advertisement feature.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Advertisements.AdvertisementSettings.initializeOnStartup">
      <summary>
        <para>Controls if the advertisement system should be initialized immediately on startup.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Advertisements.AdvertisementSettings.testMode">
      <summary>
        <para>Controls if testing advertisements are used instead of production advertisements.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Advertisements.AdvertisementSettings.GetGameId(UnityEngine.RuntimePlatform)">
      <summary>
        <para>Gets the game identifier specified for a runtime platform.</para>
      </summary>
      <param name="platform"></param>
      <returns>
        <para>The platform specific game identifier.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Advertisements.AdvertisementSettings.IsPlatformEnabled(UnityEngine.RuntimePlatform)">
      <summary>
        <para>Returns if a specific platform is enabled.</para>
      </summary>
      <param name="platform"></param>
      <returns>
        <para>Boolean for the platform.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Advertisements.AdvertisementSettings.SetGameId(UnityEngine.RuntimePlatform,System.String)">
      <summary>
        <para>Sets the game identifier for the specified platform.</para>
      </summary>
      <param name="platform"></param>
      <param name="gameId"></param>
    </member>
    <member name="M:UnityEditor.Advertisements.AdvertisementSettings.SetPlatformEnabled(UnityEngine.RuntimePlatform,System.Boolean)">
      <summary>
        <para>Enable the specific platform.</para>
      </summary>
      <param name="platform"></param>
      <param name="value"></param>
    </member>
    <member name="T:UnityEngine.AI.NavMeshBuilder">
      <summary>
        <para>Navigation mesh builder interface.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AI.NavMeshBuilder.isRunning">
      <summary>
        <para>Returns true if an asynchronous build is still running.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AI.NavMeshBuilder.BuildNavMesh">
      <summary>
        <para>Build the Navmesh.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AI.NavMeshBuilder.BuildNavMeshAsync">
      <summary>
        <para>Build the Navmesh Asyncronously.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AI.NavMeshBuilder.BuildNavMeshForMultipleScenes(System.String[])">
      <summary>
        <para>Builds the combined navmesh for the contents of multiple scenes.</para>
      </summary>
      <param name="paths">Array of paths to scenes that are used for building the navmesh.</param>
    </member>
    <member name="M:UnityEngine.AI.NavMeshBuilder.Cancel(UnityEngine.AI.NavMeshData)">
      <summary>
        <para>Cancels an asynchronous update of the specified NavMesh data. See Also: UpdateNavMeshDataAsync.</para>
      </summary>
      <param name="data">The data associated with asynchronous updating.</param>
    </member>
    <member name="M:UnityEditor.AI.NavMeshBuilder.ClearAllNavMeshes">
      <summary>
        <para>Clear all Navmeshes.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AI.NavMeshVisualizationSettings">
      <summary>
        <para>Represents the visualization state of the navigation debug graphics.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AI.NavMeshVisualizationSettings.showNavigation">
      <summary>
        <para>A count of how many users requesting navigation debug graphics to be enabled.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AlphabeticalSort">
      <summary>
        <para>Hierarchy sort method to allow for items and their children to be sorted alphabetically.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AlphabeticalSort.content">
      <summary>
        <para>Content to visualize the alphabetical sorting method.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Analytics.AnalyticsSettings">
      <summary>
        <para>Editor API for the Unity Services editor feature. Normally Analytics is enabled from the Services window, but if writing your own editor extension, this API can be used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Analytics.AnalyticsSettings.enabled">
      <summary>
        <para>This Boolean field will cause the Analytics feature in Unity to be enabled if true, or disabled if false.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Analytics.AnalyticsSettings.testMode">
      <summary>
        <para>Set to true for testing Analytics integration only within the Editor.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Analytics.PerformanceReportingSettings">
      <summary>
        <para>Normally performance reporting is enabled from the Services window, but if writing your own editor extension, this API can be used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Analytics.PerformanceReportingSettings.enabled">
      <summary>
        <para>This Boolean field causes the performance reporting feature in Unity to be enabled if true, or disabled if false.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidBuildSystem">
      <summary>
        <para>Type of Android build system.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidBuildSystem.ADT">
      <summary>
        <para>Export ADT (legacy) project.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidBuildSystem.Gradle">
      <summary>
        <para>Build APK using Gradle or export Gradle project.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidBuildSystem.Internal">
      <summary>
        <para>Build APK using internal build system.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidBuildType">
      <summary>
        <para>Build configurations for the generated project.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidBuildType.Debug">
      <summary>
        <para>Build configuration set to Debug for the generated project.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidBuildType.Development">
      <summary>
        <para>Build configuration set to Development for the generated project.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidBuildType.Release">
      <summary>
        <para>Build configuration set to Release for the generated project.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidGamepadSupportLevel">
      <summary>
        <para>Gamepad support level for Android TV.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidGamepadSupportLevel.RequiresGamepad">
      <summary>
        <para>Requires a gamepad for gameplay.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidGamepadSupportLevel.SupportsDPad">
      <summary>
        <para>Game is fully operational with a D-pad, no gamepad needed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidGamepadSupportLevel.SupportsGamepad">
      <summary>
        <para>Works with a gamepad, but does not require it.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidPreferredInstallLocation">
      <summary>
        <para>Preferred application install location.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidPreferredInstallLocation.Auto">
      <summary>
        <para>Let the OS decide, app doesn't have any preferences.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidPreferredInstallLocation.ForceInternal">
      <summary>
        <para>Force installation into internal memory. Needed for things like Live Wallpapers.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidPreferredInstallLocation.PreferExternal">
      <summary>
        <para>Prefer external, if possible. Install to internal otherwise.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidSdkVersions">
      <summary>
        <para>Supported Android SDK versions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel16">
      <summary>
        <para>Android 4.1, "Jelly Bean", API level 16.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel17">
      <summary>
        <para>Android 4.2, "Jelly Bean", API level 17.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel18">
      <summary>
        <para>Android 4.3, "Jelly Bean", API level 18.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel19">
      <summary>
        <para>Android 4.4, "KitKat", API level 19.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel21">
      <summary>
        <para>Android 5.0, "Lollipop", API level 21.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel22">
      <summary>
        <para>Android 5.1, "Lollipop", API level 22.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel23">
      <summary>
        <para>Android 6.0, "Marshmallow", API level 23.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel24">
      <summary>
        <para>Android 7.0, "Nougat", API level 24.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel25">
      <summary>
        <para>Android 7.1, "Nougat", API level 25.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevelAuto">
      <summary>
        <para>Sets the target API level automatically, according to the latest installed SDK on your computer.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidShowActivityIndicatorOnLoading">
      <summary>
        <para>Application should show ActivityIndicator when loading.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.DontShow">
      <summary>
        <para>Don't Show.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.InversedLarge">
      <summary>
        <para>Inversed Large.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.InversedSmall">
      <summary>
        <para>Inversed Small.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.Large">
      <summary>
        <para>Large.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.Small">
      <summary>
        <para>Small.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidSplashScreenScale">
      <summary>
        <para>Android splash screen scale modes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSplashScreenScale.Center">
      <summary>
        <para>Center.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSplashScreenScale.ScaleToFill">
      <summary>
        <para>Scale to fill.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSplashScreenScale.ScaleToFit">
      <summary>
        <para>Scale to fit.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidTargetDevice">
      <summary>
        <para>Target Android device architecture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidTargetDevice.x86">
      <summary>
        <para>Intel only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidTargetDevice.ARMv7">
      <summary>
        <para>ARMv7 only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidTargetDevice.FAT">
      <summary>
        <para>All supported architectures.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AnimatedValues.AnimBool">
      <summary>
        <para>Lerp from 0 - 1.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AnimatedValues.AnimBool.faded">
      <summary>
        <para>Retuns the float value of the tween.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
      <param name="callback"></param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.#ctor(System.Boolean)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
      <param name="callback"></param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.#ctor(UnityEngine.Events.UnityAction)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
      <param name="callback"></param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.#ctor(System.Boolean,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
      <param name="callback"></param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.Fade(System.Single,System.Single)">
      <summary>
        <para>Returns a value between from and to depending on the current value of the bools animation.</para>
      </summary>
      <param name="from">Value to lerp from.</param>
      <param name="to">Value to lerp to.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.GetValue">
      <summary>
        <para>Type specific implementation of BaseAnimValue_1.GetValue.</para>
      </summary>
      <returns>
        <para>Current value.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.AnimatedValues.AnimFloat">
      <summary>
        <para>An animated float value.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimFloat.#ctor(System.Single)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
      <param name="callback"></param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimFloat.#ctor(System.Single,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
      <param name="callback"></param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimFloat.GetValue">
      <summary>
        <para>Type specific implementation of BaseAnimValue_1.GetValue.</para>
      </summary>
      <returns>
        <para>Current Value.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.AnimatedValues.AnimQuaternion">
      <summary>
        <para>An animated Quaternion value.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimQuaternion.#ctor(UnityEngine.Quaternion)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
      <param name="callback"></param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimQuaternion.#ctor(UnityEngine.Quaternion,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
      <param name="callback"></param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimQuaternion.GetValue">
      <summary>
        <para>Type specific implementation of BaseAnimValue_1.GetValue.</para>
      </summary>
      <returns>
        <para>Current Value.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.AnimatedValues.AnimVector3">
      <summary>
        <para>An animated Vector3 value.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimVector3.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
      <param name="callback"></param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimVector3.#ctor(UnityEngine.Vector3)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
      <param name="callback"></param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimVector3.#ctor(UnityEngine.Vector3,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
      <param name="callback"></param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimVector3.GetValue">
      <summary>
        <para>Type specific implementation of BaseAnimValue_1.GetValue.</para>
      </summary>
      <returns>
        <para>Current Value.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.AnimatedValues.BaseAnimValue`1">
      <summary>
        <para>Abstract base class for Animated Values.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AnimatedValues.BaseAnimValue_1.isAnimating">
      <summary>
        <para>Is the value currently animating.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimatedValues.BaseAnimValue_1.speed">
      <summary>
        <para>Speed of the tween.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AnimatedValues.BaseAnimValue_1.target">
      <summary>
        <para>Target to tween towards.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AnimatedValues.BaseAnimValue_1.value">
      <summary>
        <para>Current value of the animation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimatedValues.BaseAnimValue_1.valueChanged">
      <summary>
        <para>Callback while the value is changing.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.BaseAnimValue_1.BeginAnimating(T,T)">
      <summary>
        <para>Begin an animation moving from the start value to the target value.</para>
      </summary>
      <param name="newTarget">Target value.</param>
      <param name="newStart">Start value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.BaseAnimValue_1.GetValue">
      <summary>
        <para>Abstract function to be overridden in derived types. Should return the current value of the animated value.</para>
      </summary>
      <returns>
        <para>Current Value.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AnimatedValues.BaseAnimValue_1.StopAnim(T)">
      <summary>
        <para>Stop the animation and assign the given value.</para>
      </summary>
      <param name="newValue">Value to assign.</param>
    </member>
    <member name="T:UnityEditor.AnimationClipCurveData">
      <summary>
        <para>An AnimationClipCurveData object contains all the information needed to identify a specific curve in an AnimationClip. The curve animates a specific property of a component  material attached to a game object  animated bone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimationClipCurveData.curve">
      <summary>
        <para>The actual animation curve.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimationClipCurveData.path">
      <summary>
        <para>The path of the game object / bone being animated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimationClipCurveData.propertyName">
      <summary>
        <para>The name of the property being animated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimationClipCurveData.type">
      <summary>
        <para>The type of the component / material being animated.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AnimationMode">
      <summary>
        <para>AnimationMode is used by the AnimationWindow to store properties modified
      by the AnimationClip playback.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AnimationMode.animatedPropertyColor">
      <summary>
        <para>The color used to show that a property is currently being animated.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.AddPropertyModification(UnityEditor.EditorCurveBinding,UnityEditor.PropertyModification,System.Boolean)">
      <summary>
        <para>Marks a property as currently being animated.</para>
      </summary>
      <param name="binding">Description of the animation clip curve being modified.</param>
      <param name="modification">Object property being modified.</param>
      <param name="keepPrefabOverride">Indicates whether to retain modifications when the targeted object is an instance of prefab.</param>
    </member>
    <member name="M:UnityEditor.AnimationMode.BeginSampling">
      <summary>
        <para>Initialise the start of the animation clip sampling.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.EndSampling">
      <summary>
        <para>Finish the sampling of the animation clip.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.InAnimationMode">
      <summary>
        <para>Are we currently in AnimationMode?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.IsPropertyAnimated(UnityEngine.Object,System.String)">
      <summary>
        <para>Is the specified property currently in animation mode and being animated?</para>
      </summary>
      <param name="target">The object to determine if it contained the animation.</param>
      <param name="propertyPath">The name of the animation to search for.</param>
      <returns>
        <para>Whether the property search is found or not.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AnimationMode.SampleAnimationClip(UnityEngine.GameObject,UnityEngine.AnimationClip,System.Single)">
      <summary>
        <para>Samples an AnimationClip on the object and also records any modified
        properties in AnimationMode.</para>
      </summary>
      <param name="gameObject"></param>
      <param name="clip"></param>
      <param name="time"></param>
    </member>
    <member name="M:UnityEditor.AnimationMode.StartAnimationMode">
      <summary>
        <para>Starts the animation mode.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.StopAnimationMode">
      <summary>
        <para>Stops Animation mode, reverts all properties that were animated in animation mode.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorCondition">
      <summary>
        <para>Condition that is used to determine if a transition must be taken.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorCondition.mode">
      <summary>
        <para>The mode of the condition.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorCondition.parameter">
      <summary>
        <para>The name of the parameter used in the condition.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorCondition.threshold">
      <summary>
        <para>The AnimatorParameter's threshold value for the condition to be true.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorConditionMode">
      <summary>
        <para>The mode of the condition.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorConditionMode.Equals">
      <summary>
        <para>The condition is true when parameter value is equal to the threshold.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorConditionMode.Greater">
      <summary>
        <para>The condition is true when parameter value is greater than the threshold.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorConditionMode.If">
      <summary>
        <para>The condition is true when the parameter value is true.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorConditionMode.IfNot">
      <summary>
        <para>The condition is true when the parameter value is false.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorConditionMode.Less">
      <summary>
        <para>The condition is true when the parameter value is less than the threshold.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorConditionMode.NotEqual">
      <summary>
        <para>The condition is true when the parameter value is not equal to the threshold.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorController">
      <summary>
        <para>The Animator Controller controls animation through layers with state machines, controlled by parameters.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorController.layers">
      <summary>
        <para>The layers in the controller.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorController.parameters">
      <summary>
        <para>Parameters are used to communicate between scripting and the controller. They are used to drive transitions and blendtrees for example.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddEffectiveStateMachineBehaviour(System.Type,UnityEditor.Animations.AnimatorState,System.Int32)">
      <summary>
        <para>Adds a state machine behaviour class of type stateMachineBehaviourType to the AnimatorState for layer layerIndex. This function should be used when you are dealing with synchronized layer and would like to add a state machine behaviour on a synchronized layer. C# Users can use a generic version.</para>
      </summary>
      <param name="stateMachineBehaviourType"></param>
      <param name="state"></param>
      <param name="layerIndex"></param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddEffectiveStateMachineBehaviour(UnityEditor.Animations.AnimatorState,System.Int32)">
      <summary>
        <para>Generic version. See the page for more details.</para>
      </summary>
      <param name="state"></param>
      <param name="layerIndex"></param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddLayer(System.String)">
      <summary>
        <para>Utility function to add a layer to the controller.</para>
      </summary>
      <param name="name">The name of the Layer.</param>
      <param name="layer">The layer to add.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddLayer(UnityEditor.Animations.AnimatorControllerLayer)">
      <summary>
        <para>Utility function to add a layer to the controller.</para>
      </summary>
      <param name="name">The name of the Layer.</param>
      <param name="layer">The layer to add.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddMotion(UnityEngine.Motion)">
      <summary>
        <para>Utility function that creates a new state  with the motion in it.</para>
      </summary>
      <param name="motion">The Motion that will be in the AnimatorState.</param>
      <param name="layerIndex">The layer where the Motion will be added.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddMotion(UnityEngine.Motion,System.Int32)">
      <summary>
        <para>Utility function that creates a new state  with the motion in it.</para>
      </summary>
      <param name="motion">The Motion that will be in the AnimatorState.</param>
      <param name="layerIndex">The layer where the Motion will be added.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddParameter(System.String,UnityEngine.AnimatorControllerParameterType)">
      <summary>
        <para>Utility function to add a parameter to the controller.</para>
      </summary>
      <param name="name">The name of the parameter.</param>
      <param name="type">The type of the parameter.</param>
      <param name="paramater">The parameter to add.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddParameter(UnityEngine.AnimatorControllerParameter)">
      <summary>
        <para>Utility function to add a parameter to the controller.</para>
      </summary>
      <param name="name">The name of the parameter.</param>
      <param name="type">The type of the parameter.</param>
      <param name="paramater">The parameter to add.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.CreateAnimatorControllerAtPath(System.String)">
      <summary>
        <para>Creates an AnimatorController at the given path.</para>
      </summary>
      <param name="path">The path where the AnimatorController asset will be created.</param>
      <returns>
        <para>The created AnimationController or null if an error occured.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.CreateAnimatorControllerAtPathWithClip(System.String,UnityEngine.AnimationClip)">
      <summary>
        <para>Creates an AnimatorController at the given path, and automatically create an AnimatorLayer  with an AnimatorStateMachine that will add a State with the AnimationClip in it.</para>
      </summary>
      <param name="path">The path where the AnimatorController will be created.</param>
      <param name="clip">The default clip that will be played by the AnimatorController.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.CreateBlendTreeInController(System.String,UnityEditor.Animations.BlendTree&amp;)">
      <summary>
        <para>Creates a BlendTree in a new AnimatorState.</para>
      </summary>
      <param name="name">The name of the BlendTree.</param>
      <param name="tree">The created BlendTree.</param>
      <param name="layerIndex">The index where the BlendTree will be created.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.CreateBlendTreeInController(System.String,UnityEditor.Animations.BlendTree&amp;,System.Int32)">
      <summary>
        <para>Creates a BlendTree in a new AnimatorState.</para>
      </summary>
      <param name="name">The name of the BlendTree.</param>
      <param name="tree">The created BlendTree.</param>
      <param name="layerIndex">The index where the BlendTree will be created.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.CreateStateMachineBehaviour(UnityEditor.MonoScript)">
      <summary>
        <para>This function will create a StateMachineBehaviour instance based on the class define in this script.</para>
      </summary>
      <param name="script">MonoScript class to instantiate.</param>
      <returns>
        <para>Returns instance id of created object, returns 0 if something is not valid.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.FindStateMachineBehaviourContext(UnityEngine.StateMachineBehaviour)">
      <summary>
        <para>Use this function to retrieve the owner of this behaviour.</para>
      </summary>
      <param name="behaviour">The State Machine Behaviour to get context for.</param>
      <returns>
        <para>Returns the State Machine Behaviour edition context.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.GetBehaviours">
      <summary>
        <para>Returns all StateMachineBehaviour that match type T or are derived from T.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.GetStateEffectiveBehaviours(UnityEditor.Animations.AnimatorState,System.Int32)">
      <summary>
        <para>Gets the effective state machine behaviour list for the AnimatorState. Behaviours are either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to get Behaviour list that is effectively used.</para>
      </summary>
      <param name="state">The AnimatorState which we want the Behaviour list.</param>
      <param name="layerIndex">The layer that is queried.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.GetStateEffectiveMotion(UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Gets the effective Motion for the AnimatorState. The Motion is either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to get the Motion that is effectively used.</para>
      </summary>
      <param name="state">The AnimatorState which we want the Motion.</param>
      <param name="layerIndex">The layer that is queried.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.GetStateEffectiveMotion(UnityEditor.Animations.AnimatorState,System.Int32)">
      <summary>
        <para>Gets the effective Motion for the AnimatorState. The Motion is either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to get the Motion that is effectively used.</para>
      </summary>
      <param name="state">The AnimatorState which we want the Motion.</param>
      <param name="layerIndex">The layer that is queried.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.MakeUniqueLayerName(System.String)">
      <summary>
        <para>Creates a unique name for the layers.</para>
      </summary>
      <param name="name">The desired name of the AnimatorLayer.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.MakeUniqueParameterName(System.String)">
      <summary>
        <para>Creates a unique name for the parameter.</para>
      </summary>
      <param name="name">The desired name of the AnimatorParameter.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.RemoveLayer(System.Int32)">
      <summary>
        <para>Utility function to remove a layer from the controller.</para>
      </summary>
      <param name="index">The index of the AnimatorLayer.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.RemoveParameter(System.Int32)">
      <summary>
        <para>Utility function to remove a parameter from the controller.</para>
      </summary>
      <param name="index">The index of the AnimatorParameter.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.SetStateEffectiveBehaviours">
      <summary>
        <para>Sets the effective state machine Behaviour list for the AnimatorState. The Behaviour list is either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to set the Behaviour list that is effectively used.</para>
      </summary>
      <param name="state">The AnimatorState which we want to set the Behaviour list.</param>
      <param name="layerIndex">The layer to set the Behaviour list.</param>
      <param name="behaviours">The Behaviour list that will be set.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.SetStateEffectiveMotion(UnityEditor.Animations.AnimatorState,UnityEngine.Motion)">
      <summary>
        <para>Sets the effective Motion for the AnimatorState. The Motion is either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to set the Motion that is effectively used.</para>
      </summary>
      <param name="state">The AnimatorState which we want to set the Motion.</param>
      <param name="motion">The Motion that will be set.</param>
      <param name="layerIndex">The layer to set the Motion.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.SetStateEffectiveMotion(UnityEditor.Animations.AnimatorState,UnityEngine.Motion,System.Int32)">
      <summary>
        <para>Sets the effective Motion for the AnimatorState. The Motion is either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to set the Motion that is effectively used.</para>
      </summary>
      <param name="state">The AnimatorState which we want to set the Motion.</param>
      <param name="motion">The Motion that will be set.</param>
      <param name="layerIndex">The layer to set the Motion.</param>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorControllerLayer">
      <summary>
        <para>The Animation Layer contains a state machine that controls animations of a model or part of it.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.avatarMask">
      <summary>
        <para>The AvatarMask that is used to mask the animation on the given layer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.blendingMode">
      <summary>
        <para>The blending mode used by the layer. It is not taken into account for the first layer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.defaultWeight">
      <summary>
        <para>The default blending weight that the layers has. It is not taken into account for the first layer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.iKPass">
      <summary>
        <para>When active, the layer will have an IK pass when evaluated. It will trigger an OnAnimatorIK callback.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.name">
      <summary>
        <para>The name of the layer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.stateMachine">
      <summary>
        <para>The state machine for the layer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.syncedLayerAffectsTiming">
      <summary>
        <para>When active, the layer will take control of the duration of the Synced Layer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.syncedLayerIndex">
      <summary>
        <para>Specifies the index of the Synced Layer.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorControllerLayer.GetOverrideBehaviours(UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Gets the override behaviour list for the state on the given layer.</para>
      </summary>
      <param name="state">The state which we want to get the behaviour list.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorControllerLayer.GetOverrideMotion(UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Gets the override motion for the state on the given layer.</para>
      </summary>
      <param name="state">The state which we want to get the motion.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorControllerLayer.SetOverrideBehaviours">
      <summary>
        <para>Sets the override behaviour list for the state on the given layer.</para>
      </summary>
      <param name="state">The state which we want to set the behaviour list.</param>
      <param name="behaviours">The behaviour list that will be set.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorControllerLayer.SetOverrideMotion(UnityEditor.Animations.AnimatorState,UnityEngine.Motion)">
      <summary>
        <para>Sets the override motion for the state on the given layer.</para>
      </summary>
      <param name="state">The state which we want to set the motion.</param>
      <param name="motion">The motion that will be set.</param>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorLayerBlendingMode">
      <summary>
        <para>Specifies how the layer is blended with the previous layers.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorLayerBlendingMode.Additive">
      <summary>
        <para>Animations are added to the previous layers.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorLayerBlendingMode.Override">
      <summary>
        <para>Animations overrides to the previous layers.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorState">
      <summary>
        <para>States are the basic building blocks of a state machine. Each state contains a Motion ( AnimationClip or BlendTree) which will play while the character is in that state. When an event in the game triggers a state transition, the character will be left in a new state whose animation sequence will then take over.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.behaviours">
      <summary>
        <para>The Behaviour list assigned to this state.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.cycleOffset">
      <summary>
        <para>Offset at which the animation loop starts. Useful for synchronizing looped animations.
Units is normalized time.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.cycleOffsetParameter">
      <summary>
        <para>The animator controller parameter that drives the cycle offset value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.cycleOffsetParameterActive">
      <summary>
        <para>Define if the cycle offset value is driven by an Animator controller parameter or by the value set in the editor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.iKOnFeet">
      <summary>
        <para>Should Foot IK be respected for this state.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.mirror">
      <summary>
        <para>Should the state be mirrored.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.mirrorParameter">
      <summary>
        <para>The animator controller parameter that drives the mirror value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.mirrorParameterActive">
      <summary>
        <para>Define if the mirror value is driven by an Animator controller parameter or by the value set in the editor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.motion">
      <summary>
        <para>The motion assigned to this state.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.nameHash">
      <summary>
        <para>The hashed name of the state.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.speed">
      <summary>
        <para>The default speed of the motion.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.speedParameter">
      <summary>
        <para>The animator controller parameter that drives the speed value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.speedParameterActive">
      <summary>
        <para>Define if the speed value is driven by an Animator controller parameter or by the value set in the editor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.tag">
      <summary>
        <para>A tag can be used to identify a state.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.transitions">
      <summary>
        <para>The transitions that are going out of the state.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.writeDefaultValues">
      <summary>
        <para>Whether or not the AnimatorStates writes back the default values for properties that are not animated by its Motion.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddExitTransition">
      <summary>
        <para>Utility function to add an outgoing transition to the exit of the state's parent state machine.</para>
      </summary>
      <param name="defaultExitTime">If true, the exit time will be the equivalent of 0.25 second.</param>
      <returns>
        <para>The Animations.AnimatorStateTransition that was added.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddExitTransition(System.Boolean)">
      <summary>
        <para>Utility function to add an outgoing transition to the exit of the state's parent state machine.</para>
      </summary>
      <param name="defaultExitTime">If true, the exit time will be the equivalent of 0.25 second.</param>
      <returns>
        <para>The Animations.AnimatorStateTransition that was added.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddStateMachineBehaviour(System.Type)">
      <summary>
        <para>Adds a state machine behaviour class of type stateMachineBehaviourType to the AnimatorState. C# Users can use a generic version.</para>
      </summary>
      <param name="stateMachineBehaviourType"></param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddStateMachineBehaviour">
      <summary>
        <para>Generic version. See the page for more details.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddTransition(UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Utility function to add an outgoing transition to the destination state.</para>
      </summary>
      <param name="defaultExitTime">If true, the exit time will be the equivalent of 0.25 second.</param>
      <param name="destinationState">The destination state.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddTransition(UnityEditor.Animations.AnimatorState,System.Boolean)">
      <summary>
        <para>Utility function to add an outgoing transition to the destination state.</para>
      </summary>
      <param name="defaultExitTime">If true, the exit time will be the equivalent of 0.25 second.</param>
      <param name="destinationState">The destination state.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddTransition(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to add an outgoing transition to the destination state machine.</para>
      </summary>
      <param name="defaultExitTime">If true, the exit time will be the equivalent of 0.25 second.</param>
      <param name="destinationStateMachine">The destination state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddTransition(UnityEditor.Animations.AnimatorStateMachine,System.Boolean)">
      <summary>
        <para>Utility function to add an outgoing transition to the destination state machine.</para>
      </summary>
      <param name="defaultExitTime">If true, the exit time will be the equivalent of 0.25 second.</param>
      <param name="destinationStateMachine">The destination state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddTransition(UnityEditor.Animations.AnimatorStateTransition)">
      <summary>
        <para>Utility function to add an outgoing transition.</para>
      </summary>
      <param name="transition">The transition to add.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.RemoveTransition(UnityEditor.Animations.AnimatorStateTransition)">
      <summary>
        <para>Utility function to remove a transition from the state.</para>
      </summary>
      <param name="transition">Transition to remove.</param>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorStateMachine">
      <summary>
        <para>A graph controlling the interaction of states. Each state references a motion.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.anyStatePosition">
      <summary>
        <para>The position of the AnyState node.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.anyStateTransitions">
      <summary>
        <para>The list of AnyState transitions.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.behaviours">
      <summary>
        <para>The Behaviour list assigned to this state machine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.defaultState">
      <summary>
        <para>The state that the state machine will be in when it starts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.entryPosition">
      <summary>
        <para>The position of the entry node.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.entryTransitions">
      <summary>
        <para>The list of entry transitions in the state machine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.exitPosition">
      <summary>
        <para>The position of the exit node.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.parentStateMachinePosition">
      <summary>
        <para>The position of the parent state machine node. Only valid when in a hierachic state machine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.stateMachines">
      <summary>
        <para>The list of sub state machines.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.states">
      <summary>
        <para>The list of states.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddAnyStateTransition(UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Utility function to add an AnyState transition to the specified state or statemachine.</para>
      </summary>
      <param name="destinationState">The destination state.</param>
      <param name="destinationStateMachine">The destination statemachine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddAnyStateTransition(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to add an AnyState transition to the specified state or statemachine.</para>
      </summary>
      <param name="destinationState">The destination state.</param>
      <param name="destinationStateMachine">The destination statemachine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddEntryTransition(UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Utility function to add an incoming transition to the exit of it's parent state machine.</para>
      </summary>
      <param name="destinationState">The destination Animations.AnimatorState state.</param>
      <param name="destinationStateMachine">The destination Animations.AnimatorStateMachine state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddEntryTransition(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to add an incoming transition to the exit of it's parent state machine.</para>
      </summary>
      <param name="destinationState">The destination Animations.AnimatorState state.</param>
      <param name="destinationStateMachine">The destination Animations.AnimatorStateMachine state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddState(System.String)">
      <summary>
        <para>Utility function to add a state to the state machine.</para>
      </summary>
      <param name="name">The name of the new state.</param>
      <param name="position">The position of the state node.</param>
      <returns>
        <para>The AnimatorState that was created for this state.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddState(System.String,UnityEngine.Vector3)">
      <summary>
        <para>Utility function to add a state to the state machine.</para>
      </summary>
      <param name="name">The name of the new state.</param>
      <param name="position">The position of the state node.</param>
      <returns>
        <para>The AnimatorState that was created for this state.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddState(UnityEditor.Animations.AnimatorState,UnityEngine.Vector3)">
      <summary>
        <para>Utility function to add a state to the state machine.</para>
      </summary>
      <param name="state">The state to add.</param>
      <param name="position">The position of the state node.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachine(System.String)">
      <summary>
        <para>Utility function to add a state machine to the state machine.</para>
      </summary>
      <param name="name">The name of the new state machine.</param>
      <param name="position">The position of the state machine node.</param>
      <returns>
        <para>The newly created Animations.AnimatorStateMachine state machine.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachine(System.String,UnityEngine.Vector3)">
      <summary>
        <para>Utility function to add a state machine to the state machine.</para>
      </summary>
      <param name="name">The name of the new state machine.</param>
      <param name="position">The position of the state machine node.</param>
      <returns>
        <para>The newly created Animations.AnimatorStateMachine state machine.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachine(UnityEditor.Animations.AnimatorStateMachine,UnityEngine.Vector3)">
      <summary>
        <para>Utility function to add a state machine to the state machine.</para>
      </summary>
      <param name="stateMachine">The state machine to add.</param>
      <param name="position">The position of the state machine node.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachineBehaviour(System.Type)">
      <summary>
        <para>Adds a state machine behaviour class of type stateMachineBehaviourType to the AnimatorStateMachine. C# Users can use a generic version.</para>
      </summary>
      <param name="stateMachineBehaviourType"></param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachineBehaviour">
      <summary>
        <para>Generic version. See the page for more details.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachineExitTransition(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to add an outgoing transition from the source state machine to the exit of it's parent state machine.</para>
      </summary>
      <param name="sourceStateMachine">The source state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachineTransition(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to add an outgoing transition from the source state machine to the destination.</para>
      </summary>
      <param name="sourceStateMachine">The source state machine.</param>
      <param name="destinationStateMachine">The destination state machine.</param>
      <param name="destinationState">The destination state.</param>
      <returns>
        <para>The Animations.AnimatorTransition transition that was created.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachineTransition(UnityEditor.Animations.AnimatorStateMachine,UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to add an outgoing transition from the source state machine to the destination.</para>
      </summary>
      <param name="sourceStateMachine">The source state machine.</param>
      <param name="destinationStateMachine">The destination state machine.</param>
      <param name="destinationState">The destination state.</param>
      <returns>
        <para>The Animations.AnimatorTransition transition that was created.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachineTransition(UnityEditor.Animations.AnimatorStateMachine,UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Utility function to add an outgoing transition from the source state machine to the destination.</para>
      </summary>
      <param name="sourceStateMachine">The source state machine.</param>
      <param name="destinationStateMachine">The destination state machine.</param>
      <param name="destinationState">The destination state.</param>
      <returns>
        <para>The Animations.AnimatorTransition transition that was created.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.GetStateMachineTransitions(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Gets the list of all outgoing state machine transitions from given state machine.</para>
      </summary>
      <param name="sourceStateMachine">The source state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.MakeUniqueStateMachineName(System.String)">
      <summary>
        <para>Makes a unique state machine name in the context of the parent state machine.</para>
      </summary>
      <param name="name">Desired name for the state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.MakeUniqueStateName(System.String)">
      <summary>
        <para>Makes a unique state name in the context of the parent state machine.</para>
      </summary>
      <param name="name">Desired name for the state.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.RemoveAnyStateTransition(UnityEditor.Animations.AnimatorStateTransition)">
      <summary>
        <para>Utility function to remove an AnyState transition from the state machine.</para>
      </summary>
      <param name="transition">The AnyStat transition to remove.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.RemoveEntryTransition(UnityEditor.Animations.AnimatorTransition)">
      <summary>
        <para>Utility function to remove an entry transition from the state machine.</para>
      </summary>
      <param name="transition">The transition to remove.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.RemoveState(UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Utility function to remove a state from the state machine.</para>
      </summary>
      <param name="state">The state to remove.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.RemoveStateMachine(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to remove a state machine from its parent state machine.</para>
      </summary>
      <param name="stateMachine">The state machine to remove.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.RemoveStateMachineTransition(UnityEditor.Animations.AnimatorStateMachine,UnityEditor.Animations.AnimatorTransition)">
      <summary>
        <para>Utility function to remove an outgoing transition from source state machine.</para>
      </summary>
      <param name="transition">The transition to remove.</param>
      <param name="sourceStateMachine">The source state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.SetStateMachineTransitions(UnityEditor.Animations.AnimatorStateMachine,UnityEditor.Animations.AnimatorTransition[])">
      <summary>
        <para>Sets the list of all outgoing state machine transitions from given state machine.</para>
      </summary>
      <param name="stateMachine">The source state machine.</param>
      <param name="transitions">The outgoing transitions.</param>
      <param name="sourceStateMachine"></param>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorStateTransition">
      <summary>
        <para>Transitions define when and how the state machine switch from one state to another. AnimatorStateTransition always originate from an Animator State (or AnyState) and have timing parameters.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.canTransitionToSelf">
      <summary>
        <para>Set to true to allow or disallow transition to self during AnyState transition.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.duration">
      <summary>
        <para>The duration of the transition.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.exitTime">
      <summary>
        <para>If AnimatorStateTransition.hasExitTime is true, exitTime represents the exact time at which the transition can take effect.

This is represented in normalized time, so for example an exit time of 0.75 means that on the first frame where 75% of the animation has played, the Exit Time condition will be true. On the next frame, the condition will be false.

For looped animations, transitions with exit times smaller than 1 will be evaluated every loop, so you can use this to time your transition with the proper timing in the animation, every loop.

Transitions with exit times greater than one will be evaluated only once, so they can be used to exit at a specific time, after a fixed number of loops. For example, a transition with an exit time of 3.5 will be evaluated once, after three and a half loops.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.hasExitTime">
      <summary>
        <para>When active the transition will have an exit time condition.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.hasFixedDuration">
      <summary>
        <para>Determines whether the duration of the transition is reported in a fixed duration in seconds or as a normalized time.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.interruptionSource">
      <summary>
        <para>Which AnimatorState transitions can interrupt the Transition.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.offset">
      <summary>
        <para>The time at which the destination state will start.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.orderedInterruption">
      <summary>
        <para>The Transition can be interrupted by a transition that has a higher priority.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateTransition.#ctor">
      <summary>
        <para>Creates a new animator state transition.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorTransition">
      <summary>
        <para>Transitions define when and how the state machine switch from on state to another. AnimatorTransition always originate from a StateMachine or a StateMachine entry. They do not define timing parameters.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorTransition.#ctor">
      <summary>
        <para>Creates a new animator transition.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorTransitionBase">
      <summary>
        <para>Base class for animator transitions. Transitions define when and how the state machine switches from one state to another.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorTransitionBase.conditions">
      <summary>
        <para>Animations.AnimatorCondition conditions that need to be met for a transition to happen.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorTransitionBase.destinationState">
      <summary>
        <para>The destination state of the transition.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorTransitionBase.destinationStateMachine">
      <summary>
        <para>The destination state machine of the transition.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorTransitionBase.isExit">
      <summary>
        <para>Is the transition destination the exit of the current state machine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorTransitionBase.mute">
      <summary>
        <para>Mutes the transition. The transition will never occur.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorTransitionBase.solo">
      <summary>
        <para>Mutes all other transitions in the source state.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorTransitionBase.AddCondition(UnityEditor.Animations.AnimatorConditionMode,System.Single,System.String)">
      <summary>
        <para>Utility function to add a condition to a transition.</para>
      </summary>
      <param name="mode">The Animations.AnimatorCondition mode of the condition.</param>
      <param name="threshold">The threshold value of the condition.</param>
      <param name="parameter">The name of the parameter.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorTransitionBase.RemoveCondition(UnityEditor.Animations.AnimatorCondition)">
      <summary>
        <para>Utility function to remove a condition from the transition.</para>
      </summary>
      <param name="condition">The condition to remove.</param>
    </member>
    <member name="T:UnityEditor.Animations.BlendTree">
      <summary>
        <para>Blend trees are used to blend continuously animation between their childs. They can either be 1D or 2D.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.BlendTree.blendParameter">
      <summary>
        <para>Parameter that is used to compute the blending weight of the childs in 1D blend trees or on the X axis of a 2D blend tree.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.BlendTree.blendParameterY">
      <summary>
        <para>Parameter that is used to compute the blending weight of the childs on the Y axis of a 2D blend tree.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.BlendTree.blendType">
      <summary>
        <para>The Blending type can be either 1D or different types of 2D.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.BlendTree.children">
      <summary>
        <para>A copy of the list of the blend tree child motions.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.BlendTree.maxThreshold">
      <summary>
        <para>Sets the maximum threshold that will be used by the ChildMotion. Only used when useAutomaticThresholds is true.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.BlendTree.minThreshold">
      <summary>
        <para>Sets the minimum threshold that will be used by the ChildMotion. Only used when useAutomaticThresholds is true.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.BlendTree.useAutomaticThresholds">
      <summary>
        <para>When active, the children's thresholds are automatically spread between 0 and 1.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.BlendTree.AddChild(UnityEngine.Motion)">
      <summary>
        <para>Utility function to add a child motion to a blend trees.</para>
      </summary>
      <param name="motion">The motion to add as child.</param>
      <param name="position">The position of the child. When using 2D blend trees.</param>
      <param name="threshold">The threshold of the child. When using 1D blend trees.</param>
    </member>
    <member name="M:UnityEditor.Animations.BlendTree.AddChild(UnityEngine.Motion,UnityEngine.Vector2)">
      <summary>
        <para>Utility function to add a child motion to a blend trees.</para>
      </summary>
      <param name="motion">The motion to add as child.</param>
      <param name="position">The position of the child. When using 2D blend trees.</param>
      <param name="threshold">The threshold of the child. When using 1D blend trees.</param>
    </member>
    <member name="M:UnityEditor.Animations.BlendTree.AddChild(UnityEngine.Motion,System.Single)">
      <summary>
        <para>Utility function to add a child motion to a blend trees.</para>
      </summary>
      <param name="motion">The motion to add as child.</param>
      <param name="position">The position of the child. When using 2D blend trees.</param>
      <param name="threshold">The threshold of the child. When using 1D blend trees.</param>
    </member>
    <member name="M:UnityEditor.Animations.BlendTree.CreateBlendTreeChild(System.Single)">
      <summary>
        <para>Utility function to add a child blend tree to a blend tree.</para>
      </summary>
      <param name="position">The position of the child. When using 2D blend trees.</param>
      <param name="threshold">The threshold of the child. When using 1D blend trees.</param>
    </member>
    <member name="M:UnityEditor.Animations.BlendTree.CreateBlendTreeChild(UnityEngine.Vector2)">
      <summary>
        <para>Utility function to add a child blend tree to a blend tree.</para>
      </summary>
      <param name="position">The position of the child. When using 2D blend trees.</param>
      <param name="threshold">The threshold of the child. When using 1D blend trees.</param>
    </member>
    <member name="M:UnityEditor.Animations.BlendTree.RemoveChild(System.Int32)">
      <summary>
        <para>Utility function to remove the child of a blend tree.</para>
      </summary>
      <param name="index">The index of the blend tree to remove.</param>
    </member>
    <member name="T:UnityEditor.Animations.BlendTreeType">
      <summary>
        <para>The type of blending algorithm that the blend tree uses.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.BlendTreeType.Direct">
      <summary>
        <para>Direct control of blending weight for each node.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.BlendTreeType.FreeformCartesian2D">
      <summary>
        <para>Best used when your motions do not represent different directions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.BlendTreeType.FreeformDirectional2D">
      <summary>
        <para>This blend type is used when your motions represent different directions, however you can have multiple motions in the same direction, for example "walk forward" and "run forward".</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.BlendTreeType.Simple1D">
      <summary>
        <para>Basic blending using a single parameter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.BlendTreeType.SimpleDirectional2D">
      <summary>
        <para>Best used when your motions represent different directions, such as "walk forward", "walk backward", "walk left", and "walk right", or "aim up", "aim down", "aim left", and "aim right".</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.ChildAnimatorState">
      <summary>
        <para>Structure that represents a state in the context of its parent state machine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildAnimatorState.position">
      <summary>
        <para>The position the the state node in the context of its parent state machine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildAnimatorState.state">
      <summary>
        <para>The state.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.ChildAnimatorStateMachine">
      <summary>
        <para>Structure that represents a state machine in the context of its parent state machine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildAnimatorStateMachine.position">
      <summary>
        <para>The position the the state machine node in the context of its parent state machine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildAnimatorStateMachine.stateMachine">
      <summary>
        <para>The state machine.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.ChildMotion">
      <summary>
        <para>Structure that represents a motion in the context of its parent blend tree.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.cycleOffset">
      <summary>
        <para>Normalized time offset of the child.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.directBlendParameter">
      <summary>
        <para>The parameter used by the child when used in a BlendTree of type BlendTreeType.Direct.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.mirror">
      <summary>
        <para>Mirror of the child.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.motion">
      <summary>
        <para>The motion itself.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.position">
      <summary>
        <para>The position of the child. Used in 2D blend trees.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.threshold">
      <summary>
        <para>The threshold of the child. Used in 1D blend trees.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.timeScale">
      <summary>
        <para>The relative speed of the child.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.StateMachineBehaviourContext">
      <summary>
        <para>This class contains all the owner's information for this State Machine Behaviour.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.StateMachineBehaviourContext.animatorController">
      <summary>
        <para>The Animations.AnimatorController that owns this state machine behaviour.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.StateMachineBehaviourContext.animatorObject">
      <summary>
        <para>The object that owns this state machine behaviour. Could be an Animations.AnimatorState or Animations.AnimatorStateMachine.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.StateMachineBehaviourContext.layerIndex">
      <summary>
        <para>The animator's layer index that owns this state machine behaviour.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.TransitionInterruptionSource">
      <summary>
        <para>Which AnimatorState transitions can interrupt the Transition.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.TransitionInterruptionSource.Destination">
      <summary>
        <para>The Transition can be interrupted by transitions in the destination AnimatorState.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.TransitionInterruptionSource.DestinationThenSource">
      <summary>
        <para>The Transition can be interrupted by transitions in the source or the destination AnimatorState.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.TransitionInterruptionSource.None">
      <summary>
        <para>The Transition cannot be interrupted. Formely know as Atomic.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.TransitionInterruptionSource.Source">
      <summary>
        <para>The Transition can be interrupted by transitions in the source AnimatorState.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.TransitionInterruptionSource.SourceThenDestination">
      <summary>
        <para>The Transition can be interrupted by transitions in the source or the destination AnimatorState.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AnimationUtility">
      <summary>
        <para>Editor utility functions for modifying animation clips.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimationUtility.onCurveWasModified">
      <summary>
        <para>Triggered when an animation curve inside an animation clip has been modified.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.CalculateTransformPath(UnityEngine.Transform,UnityEngine.Transform)">
      <summary>
        <para>Calculates path from root transform to target transform.</para>
      </summary>
      <param name="targetTransform"></param>
      <param name="root"></param>
    </member>
    <member name="T:UnityEditor.AnimationUtility.CurveModifiedType">
      <summary>
        <para>Describes the type of modification that caused OnCurveWasModified to fire.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAllCurves(UnityEngine.AnimationClip)">
      <summary>
        <para>Retrieves all curves from a specific animation clip.</para>
      </summary>
      <param name="clip"></param>
      <param name="includeCurveData"></param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAllCurves(UnityEngine.AnimationClip,System.Boolean)">
      <summary>
        <para>Retrieves all curves from a specific animation clip.</para>
      </summary>
      <param name="clip"></param>
      <param name="includeCurveData"></param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAnimatableBindings(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>Returns all the animatable bindings that a specific game object has.</para>
      </summary>
      <param name="targetObject"></param>
      <param name="root"></param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAnimatedObject(UnityEngine.GameObject,UnityEditor.EditorCurveBinding)">
      <summary>
        <para>Returns the animated object that the binding is pointing to.</para>
      </summary>
      <param name="root"></param>
      <param name="binding"></param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAnimationClips(UnityEngine.Animation)">
      <summary>
        <para>Returns the array of AnimationClips that are referenced in the Animation component.</para>
      </summary>
      <param name="component"></param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAnimationEvents(UnityEngine.AnimationClip)">
      <summary>
        <para>Retrieves all animation events associated with the animation clip.</para>
      </summary>
      <param name="clip"></param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetCurveBindings(UnityEngine.AnimationClip)">
      <summary>
        <para>Returns all the float curve bindings currently stored in the clip.</para>
      </summary>
      <param name="clip"></param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetEditorCurve(UnityEngine.AnimationClip,System.String,System.Type,System.String)">
      <summary>
        <para>Return the float curve that the binding is pointing to.</para>
      </summary>
      <param name="clip"></param>
      <param name="relativePath"></param>
      <param name="type"></param>
      <param name="propertyName"></param>
      <param name="binding"></param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetEditorCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding)">
      <summary>
        <para>Return the float curve that the binding is pointing to.</para>
      </summary>
      <param name="clip"></param>
      <param name="relativePath"></param>
      <param name="type"></param>
      <param name="propertyName"></param>
      <param name="binding"></param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetFloatValue(UnityEngine.GameObject,System.String,System.Type,System.String,System.Single&amp;)">
      <summary>
        <para>Retrieves the current float value by sampling a curve value on a specific game object.</para>
      </summary>
      <param name="root"></param>
      <param name="relativePath"></param>
      <param name="type"></param>
      <param name="propertyName"></param>
      <param name="data"></param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetKeyBroken(UnityEngine.AnimationCurve,System.Int32)">
      <summary>
        <para>Retrieve the specified keyframe broken tangent flag.</para>
      </summary>
      <param name="curve">Curve to query.</param>
      <param name="index">Keyframe index.</param>
      <returns>
        <para>Broken flag at specified index.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetKeyLeftTangentMode(UnityEngine.AnimationCurve,System.Int32)">
      <summary>
        <para>Retrieve the left tangent mode of the keyframe at specified index.</para>
      </summary>
      <param name="curve">Curve to query.</param>
      <param name="index">Keyframe index.</param>
      <returns>
        <para>Tangent mode at specified index.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetKeyRightTangentMode(UnityEngine.AnimationCurve,System.Int32)">
      <summary>
        <para>Retrieve the right tangent mode of the keyframe at specified index.</para>
      </summary>
      <param name="curve">Curve to query.</param>
      <param name="index">Keyframe index.</param>
      <returns>
        <para>Tangent mode at specified index.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetObjectReferenceCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding)">
      <summary>
        <para>Return the object reference curve that the binding is pointing to.</para>
      </summary>
      <param name="clip"></param>
      <param name="binding"></param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetObjectReferenceCurveBindings(UnityEngine.AnimationClip)">
      <summary>
        <para>Returns all the object reference curve bindings currently stored in the clip.</para>
      </summary>
      <param name="clip"></param>
    </member>
    <member name="T:UnityEditor.AnimationUtility.OnCurveWasModified">
      <summary>
        <para>Triggered when an animation curve inside an animation clip has been modified.</para>
      </summary>
      <param name="clip"></param>
      <param name="binding"></param>
      <param name="deleted"></param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetAdditiveReferencePose(UnityEngine.AnimationClip,UnityEngine.AnimationClip,System.Single)">
      <summary>
        <para>Set the additive reference pose from referenceClip at time for animation clip clip.</para>
      </summary>
      <param name="clip">The animation clip to be used.</param>
      <param name="referenceClip">The animation clip containing the reference pose.</param>
      <param name="time">Time that defines the reference pose in referenceClip.</param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetAnimationClips(UnityEngine.Animation,UnityEngine.AnimationClip[])">
      <summary>
        <para>Sets the array of AnimationClips to be referenced in the Animation component.</para>
      </summary>
      <param name="animation"></param>
      <param name="clips"></param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetAnimationEvents(UnityEngine.AnimationClip,UnityEngine.AnimationEvent[])">
      <summary>
        <para>Replaces all animation events in the animation clip.</para>
      </summary>
      <param name="clip"></param>
      <param name="events"></param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetEditorCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding,UnityEngine.AnimationCurve)">
      <summary>
        <para>Adds, modifies or removes an editor float curve in a given clip.</para>
      </summary>
      <param name="clip">The animation clip to which the curve will be added.</param>
      <param name="binding">The bindings which defines the path and the property of the curve.</param>
      <param name="curve">The curve to add. Setting this to null will remove the curve.</param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetKeyBroken(UnityEngine.AnimationCurve,System.Int32,System.Boolean)">
      <summary>
        <para>Change the specified keyframe broken tangent flag.</para>
      </summary>
      <param name="curve">The curve to modify.</param>
      <param name="index">Keyframe index.</param>
      <param name="broken">Broken flag.</param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetKeyLeftTangentMode(UnityEngine.AnimationCurve,System.Int32,UnityEditor.AnimationUtility/TangentMode)">
      <summary>
        <para>Change the specified keyframe tangent mode.</para>
      </summary>
      <param name="curve">The curve to modify.</param>
      <param name="index">Keyframe index.</param>
      <param name="tangentMode">Tangent mode.</param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetKeyRightTangentMode(UnityEngine.AnimationCurve,System.Int32,UnityEditor.AnimationUtility/TangentMode)">
      <summary>
        <para>Change the specified keyframe tangent mode.</para>
      </summary>
      <param name="curve">The curve to modify.</param>
      <param name="index">Keyframe index.</param>
      <param name="tangentMode">Tangent mode.</param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetObjectReferenceCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding,UnityEditor.ObjectReferenceKeyframe[])">
      <summary>
        <para>Adds, modifies or removes an object reference curve in a given clip.</para>
      </summary>
      <param name="keyframes">Setting this to null will remove the curve.</param>
      <param name="clip"></param>
      <param name="binding"></param>
    </member>
    <member name="T:UnityEditor.AnimationUtility.TangentMode">
      <summary>
        <para>Tangent constraints on Keyframe.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimationUtility.TangentMode.Auto">
      <summary>
        <para>The tangents are automatically set to make the curve go smoothly through the key.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimationUtility.TangentMode.ClampedAuto">
      <summary>
        <para>The tangents are automatically set to make the curve go smoothly through the key.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimationUtility.TangentMode.Constant">
      <summary>
        <para>The curve retains a constant value between two keys.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimationUtility.TangentMode.Free">
      <summary>
        <para>The tangent can be freely set by dragging the tangent handle.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimationUtility.TangentMode.Linear">
      <summary>
        <para>The tangent points towards the neighboring key.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ApiCompatibilityLevel">
      <summary>
        <para>.NET API compatibility level.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ApiCompatibilityLevel.NET_2_0">
      <summary>
        <para>.NET 2.0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ApiCompatibilityLevel.NET_2_0_Subset">
      <summary>
        <para>.NET 2.0 Subset.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ApiCompatibilityLevel.NET_4_6">
      <summary>
        <para>.NET 4.6.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ApiCompatibilityLevel.NET_Micro">
      <summary>
        <para>Micro profile, used by Mono scripting backend on iOS, tvOS, Android and Tizen if stripping level is set to "Use micro mscorlib".</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ApiCompatibilityLevel.NET_Web">
      <summary>
        <para>Web profile, used only by Samsung TV.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ArrayUtility">
      <summary>
        <para>Helpers for builtin arrays ...</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ArrayUtility.Add(T[]&amp;,T)">
      <summary>
        <para>Appends item to the end of array.</para>
      </summary>
      <param name="array"></param>
      <param name="item"></param>
    </member>
    <member name="M:UnityEditor.ArrayUtility.AddRange(T[]&amp;,T[])">
      <summary>
        <para>Appends items to the end of array.</para>
      </summary>
      <param name="array"></param>
      <param name="items"></param>
    </member>
    <member name="M:UnityEditor.ArrayUtility.ArrayEquals(T[],T[])">
      <summary>
        <para>Compares two arrays.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
      <returns>
        <para>True if both have the same number of elements and the contents are equal.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ArrayUtility.ArrayReferenceEquals(T[],T[])">
      <summary>
        <para>Compares two array references.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
      <returns>
        <para>True if both have the same number of elements and are the same instances.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ArrayUtility.Clear(T[]&amp;)">
      <summary>
        <para>Clears the array.</para>
      </summary>
      <param name="array"></param>
    </member>
    <member name="M:UnityEditor.ArrayUtility.Contains(T[],T)">
      <summary>
        <para>Determines if the array contains the item.</para>
      </summary>
      <param name="array"></param>
      <param name="item"></param>
      <returns>
        <para>True if item is in array, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ArrayUtility.FindIndex(T[],System.Predicate`1&lt;T&gt;)">
      <summary>
        <para>Find the index of the first element that satisfies the predicate.</para>
      </summary>
      <param name="array"></param>
      <param name="match"></param>
      <returns>
        <para>The zero-based index of the first occurrence of the element, if found; otherwise, �1.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ArrayUtility.IndexOf(T[],T)">
      <summary>
        <para>Index of first element with value value.</para>
      </summary>
      <param name="array"></param>
      <param name="value"></param>
      <returns>
        <para>The zero-based index of the element, if found; otherwise -1.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ArrayUtility.Insert(T[]&amp;,System.Int32,T)">
      <summary>
        <para>Inserts item item at position index.</para>
      </summary>
      <param name="array"></param>
      <param name="index"></param>
      <param name="item"></param>
    </member>
    <member name="M:UnityEditor.ArrayUtility.LastIndexOf(T[],T)">
      <summary>
        <para>Index of the last element with value value.</para>
      </summary>
      <param name="array"></param>
      <param name="value"></param>
      <returns>
        <para>The zero-based index of the element, if found; otherwise -1.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ArrayUtility.Remove(T[]&amp;,T)">
      <summary>
        <para>Removes item from array.</para>
      </summary>
      <param name="array"></param>
      <param name="item"></param>
    </member>
    <member name="M:UnityEditor.ArrayUtility.RemoveAt(T[]&amp;,System.Int32)">
      <summary>
        <para>Remove element at position index.</para>
      </summary>
      <param name="array"></param>
      <param name="index"></param>
    </member>
    <member name="T:UnityEditor.AscentCalculationMode">
      <summary>
        <para>Method used for calculating a font's ascent.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AscentCalculationMode.FaceAscender">
      <summary>
        <para>Ascender method.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AscentCalculationMode.FaceBoundingBox">
      <summary>
        <para>Bounding box method.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AscentCalculationMode.Legacy2x">
      <summary>
        <para>Legacy bounding box method.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AspectRatio">
      <summary>
        <para>Aspect ratio.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.Aspect16by10">
      <summary>
        <para>16:10 aspect ratio.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.Aspect16by9">
      <summary>
        <para>16:9 aspect ratio.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.Aspect4by3">
      <summary>
        <para>4:3 aspect ratio.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.Aspect5by4">
      <summary>
        <para>5:4 aspect ratio.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.AspectOthers">
      <summary>
        <para>Undefined aspect ratios.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetBundleBuild">
      <summary>
        <para>AssetBundle building map entry.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetBundleBuild.assetBundleName">
      <summary>
        <para>AssetBundle name.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetBundleBuild.assetBundleVariant">
      <summary>
        <para>AssetBundle variant.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetBundleBuild.assetNames">
      <summary>
        <para>Asset names which belong to the given AssetBundle.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetDatabase">
      <summary>
        <para>An Interface for accessing assets and performing operations on assets.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.AssetDatabase.importPackageCancelled(UnityEditor.AssetDatabase/ImportPackageCallback)">
      <summary>
        <para>Callback raised whenever a package import is cancelled by the user.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEditor.AssetDatabase.importPackageCompleted(UnityEditor.AssetDatabase/ImportPackageCallback)">
      <summary>
        <para>Callback raised whenever a package import successfully completes.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEditor.AssetDatabase.importPackageFailed(UnityEditor.AssetDatabase/ImportPackageFailedCallback)">
      <summary>
        <para>Callback raised whenever a package import failed.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEditor.AssetDatabase.importPackageStarted(UnityEditor.AssetDatabase/ImportPackageCallback)">
      <summary>
        <para>Callback raised whenever a package import starts.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.AddObjectToAsset(UnityEngine.Object,System.String)">
      <summary>
        <para>Adds objectToAdd to an existing asset at path.</para>
      </summary>
      <param name="objectToAdd">Object to add to the existing asset.</param>
      <param name="path">Filesystem path to the asset.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.AddObjectToAsset(UnityEngine.Object,UnityEngine.Object)">
      <summary>
        <para>Adds objectToAdd to an existing asset identified by assetObject.</para>
      </summary>
      <param name="objectToAdd"></param>
      <param name="assetObject"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.AssetPathToGUID(System.String)">
      <summary>
        <para>Get the GUID for the asset at path.</para>
      </summary>
      <param name="path">Filesystem path for the asset.</param>
      <returns>
        <para>GUID</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ClearLabels(UnityEngine.Object)">
      <summary>
        <para>Removes all labels attached to an asset.</para>
      </summary>
      <param name="obj"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.Contains(UnityEngine.Object)">
      <summary>
        <para>Is object an asset?</para>
      </summary>
      <param name="obj"></param>
      <param name="instanceID"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.Contains(System.Int32)">
      <summary>
        <para>Is object an asset?</para>
      </summary>
      <param name="obj"></param>
      <param name="instanceID"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.CopyAsset(System.String,System.String)">
      <summary>
        <para>Duplicates the asset at path and stores it at newPath.</para>
      </summary>
      <param name="path">Filesystem path of the source asset.</param>
      <param name="newPath">Filesystem path of the new asset to create.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.CreateAsset(UnityEngine.Object,System.String)">
      <summary>
        <para>Creates a new asset at path.</para>
      </summary>
      <param name="asset">Object to use in creating the asset.</param>
      <param name="path">Filesystem path for the new asset.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.CreateFolder(System.String,System.String)">
      <summary>
        <para>Create a new folder.</para>
      </summary>
      <param name="parentFolder">The name of the parent folder.</param>
      <param name="newFolderName">The name of the new folder.</param>
      <returns>
        <para>The GUID of the newly created folder.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.DeleteAsset(System.String)">
      <summary>
        <para>Deletes the asset file at path.</para>
      </summary>
      <param name="path">Filesystem path of the asset to be deleted.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String[],System.String)">
      <summary>
        <para>Exports the assets identified by assetPathNames to a unitypackage file in fileName.</para>
      </summary>
      <param name="assetPathNames"></param>
      <param name="fileName"></param>
      <param name="flags"></param>
      <param name="assetPathName"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String,System.String)">
      <summary>
        <para>Exports the assets identified by assetPathNames to a unitypackage file in fileName.</para>
      </summary>
      <param name="assetPathNames"></param>
      <param name="fileName"></param>
      <param name="flags"></param>
      <param name="assetPathName"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String,System.String,UnityEditor.ExportPackageOptions)">
      <summary>
        <para>Exports the assets identified by assetPathNames to a unitypackage file in fileName.</para>
      </summary>
      <param name="assetPathNames"></param>
      <param name="fileName"></param>
      <param name="flags"></param>
      <param name="assetPathName"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String[],System.String,UnityEditor.ExportPackageOptions)">
      <summary>
        <para>Exports the assets identified by assetPathNames to a unitypackage file in fileName.</para>
      </summary>
      <param name="assetPathNames"></param>
      <param name="fileName"></param>
      <param name="flags"></param>
      <param name="assetPathName"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.FindAssets(System.String)">
      <summary>
        <para>Search the asset database using the search filter string.</para>
      </summary>
      <param name="filter">The filter string can contain search data.  See below for
        details about this string.</param>
      <param name="searchInFolders">The folders where the search will start.</param>
      <returns>
        <para>Array of matching asset. Note that GUIDs will be returned.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.FindAssets(System.String,System.String[])">
      <summary>
        <para>Search the asset database using the search filter string.</para>
      </summary>
      <param name="filter">The filter string can contain search data.  See below for
        details about this string.</param>
      <param name="searchInFolders">The folders where the search will start.</param>
      <returns>
        <para>Array of matching asset. Note that GUIDs will be returned.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GenerateUniqueAssetPath(System.String)">
      <summary>
        <para>Creates a new unique path for an asset.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAllAssetBundleNames">
      <summary>
        <para>Return all the AssetBundle names in the asset database.</para>
      </summary>
      <returns>
        <para>Array of asset bundle names.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetBundleDependencies(System.String,System.Boolean)">
      <summary>
        <para>Given an assetBundleName, returns the list of AssetBundles that it depends on.</para>
      </summary>
      <param name="assetBundleName">The name of the AssetBundle for which dependencies are required.</param>
      <param name="recursive">If false, returns only AssetBundles which are direct dependencies of the input; if true, includes all indirect dependencies of the input.</param>
      <returns>
        <para>The names of all AssetBundles that the input depends on.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetDependencyHash(System.String)">
      <summary>
        <para>Returns the hash of all the dependencies of an asset.</para>
      </summary>
      <param name="path">Path to the asset.</param>
      <returns>
        <para>Aggregate hash.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetOrScenePath(UnityEngine.Object)">
      <summary>
        <para>Returns the path name relative to the project folder where the asset is stored.</para>
      </summary>
      <param name="assetObject"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetPath(System.Int32)">
      <summary>
        <para>Returns the path name relative to the project folder where the asset is stored.</para>
      </summary>
      <param name="instanceID">The instance ID of the asset.</param>
      <param name="assetObject">A reference to the asset.</param>
      <returns>
        <para>The asset path name, or null, or an empty string if the asset does not exist.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetPath(UnityEngine.Object)">
      <summary>
        <para>Returns the path name relative to the project folder where the asset is stored.</para>
      </summary>
      <param name="instanceID">The instance ID of the asset.</param>
      <param name="assetObject">A reference to the asset.</param>
      <returns>
        <para>The asset path name, or null, or an empty string if the asset does not exist.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetPathFromTextMetaFilePath(System.String)">
      <summary>
        <para>Gets the path to the asset file associated with a text .meta file.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetPathsFromAssetBundle(System.String)">
      <summary>
        <para>Get the paths of the assets which have been marked with the given assetBundle name.</para>
      </summary>
      <param name="assetBundleName"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetPathsFromAssetBundleAndAssetName(System.String,System.String)">
      <summary>
        <para>Get the Asset paths for all Assets tagged with assetBundleName and
                named assetName.</para>
      </summary>
      <param name="assetBundleName"></param>
      <param name="assetName"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetCachedIcon(System.String)">
      <summary>
        <para>Retrieves an icon for the asset at the given asset path.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetDependencies(System.String)">
      <summary>
        <para>Given a pathName, returns the list of all assets that it depends on.</para>
      </summary>
      <param name="pathName">The path to the asset for which dependencies are required.</param>
      <param name="recursive">If false, return only assets which are direct dependencies of the input; if true, include all indirect dependencies of the input. Defaults to true.</param>
      <returns>
        <para>The paths of all assets that the input depends on.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetDependencies(System.String,System.Boolean)">
      <summary>
        <para>Given a pathName, returns the list of all assets that it depends on.</para>
      </summary>
      <param name="pathName">The path to the asset for which dependencies are required.</param>
      <param name="recursive">If false, return only assets which are direct dependencies of the input; if true, include all indirect dependencies of the input. Defaults to true.</param>
      <returns>
        <para>The paths of all assets that the input depends on.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetDependencies(System.String[])">
      <summary>
        <para>Given an array of pathNames, returns the list of all assets that the input depend on.</para>
      </summary>
      <param name="pathNames">The path to the assets for which dependencies are required.</param>
      <param name="recursive">If false, return only assets which are direct dependencies of the input; if true, include all indirect dependencies of the input. Defaults to true.</param>
      <returns>
        <para>The paths of all assets that the input depends on.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetDependencies(System.String[],System.Boolean)">
      <summary>
        <para>Given an array of pathNames, returns the list of all assets that the input depend on.</para>
      </summary>
      <param name="pathNames">The path to the assets for which dependencies are required.</param>
      <param name="recursive">If false, return only assets which are direct dependencies of the input; if true, include all indirect dependencies of the input. Defaults to true.</param>
      <returns>
        <para>The paths of all assets that the input depends on.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetImplicitAssetBundleName(System.String)">
      <summary>
        <para>Returns the name of the AssetBundle that a given asset belongs to.</para>
      </summary>
      <param name="assetPath">The asset's path.</param>
      <returns>
        <para>Returns the name of the AssetBundle that a given asset belongs to. See the method description for more details.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetImplicitAssetBundleVariantName(System.String)">
      <summary>
        <para>Returns the name of the AssetBundle Variant that a given asset belongs to.</para>
      </summary>
      <param name="assetPath">The asset's path.</param>
      <returns>
        <para>Returns the name of the AssetBundle Variant that a given asset belongs to. See the method description for more details.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetLabels(UnityEngine.Object)">
      <summary>
        <para>Returns all labels attached to a given asset.</para>
      </summary>
      <param name="obj"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetMainAssetTypeAtPath(System.String)">
      <summary>
        <para>Returns the type of the main asset object at assetPath.</para>
      </summary>
      <param name="assetPath">Filesystem path of the asset to load.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetSubFolders(System.String)">
      <summary>
        <para>Given an absolute path to a directory, this method will return an array of all it's subdirectories.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetTextMetaDataPathFromAssetPath(System.String)">
      <summary>
        <para>Gets the path to the text .meta file associated with an asset.</para>
      </summary>
      <param name="path">The path to the asset.</param>
      <returns>
        <para>The path to the .meta text file or empty string if the file does not exist.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetTextMetaFilePathFromAssetPath(System.String)">
      <summary>
        <para>Gets the path to the text .meta file associated with an asset.</para>
      </summary>
      <param name="path">The path to the asset.</param>
      <returns>
        <para>The path to the .meta text file or empty string if the file does not exist.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetUnusedAssetBundleNames">
      <summary>
        <para>Return all the unused assetBundle names in the asset database.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GUIDToAssetPath(System.String)">
      <summary>
        <para>Translate a GUID to its current asset path.</para>
      </summary>
      <param name="guid"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ImportAsset(System.String)">
      <summary>
        <para>Import asset at path.</para>
      </summary>
      <param name="path"></param>
      <param name="options"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ImportAsset(System.String,UnityEditor.ImportAssetOptions)">
      <summary>
        <para>Import asset at path.</para>
      </summary>
      <param name="path"></param>
      <param name="options"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ImportPackage(System.String,System.Boolean)">
      <summary>
        <para>Imports package at packagePath into the current project.</para>
      </summary>
      <param name="packagePath"></param>
      <param name="interactive"></param>
    </member>
    <member name="T:UnityEditor.AssetDatabase.ImportPackageCallback">
      <summary>
        <para>Delegate to be called from AssetDatabase.ImportPackage callbacks. packageName is the name of the package that raised the callback.</para>
      </summary>
      <param name="packageName"></param>
    </member>
    <member name="T:UnityEditor.AssetDatabase.ImportPackageFailedCallback">
      <summary>
        <para>Delegate to be called from AssetDatabase.ImportPackage callbacks. packageName is the name of the package that raised the callback. errorMessage is the reason for the failure.</para>
      </summary>
      <param name="packageName"></param>
      <param name="errorMessage"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsForeignAsset(UnityEngine.Object)">
      <summary>
        <para>Is asset a foreign asset?</para>
      </summary>
      <param name="obj"></param>
      <param name="instanceID"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsForeignAsset(System.Int32)">
      <summary>
        <para>Is asset a foreign asset?</para>
      </summary>
      <param name="obj"></param>
      <param name="instanceID"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsMainAsset(UnityEngine.Object)">
      <summary>
        <para>Is asset a main asset in the project window?</para>
      </summary>
      <param name="obj"></param>
      <param name="instanceID"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsMainAsset(System.Int32)">
      <summary>
        <para>Is asset a main asset in the project window?</para>
      </summary>
      <param name="obj"></param>
      <param name="instanceID"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsMainAssetAtPathLoaded(System.String)">
      <summary>
        <para>Returns true if the main asset object at assetPath is loaded in memory.</para>
      </summary>
      <param name="assetPath">Filesystem path of the asset to load.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsMetaFileOpenForEdit(UnityEngine.Object,UnityEditor.StatusQueryOptions)">
      <summary>
        <para>Query whether an asset's metadata (.meta) file is open for edit in version control.</para>
      </summary>
      <param name="assetObject">Object representing the asset whose metadata status you wish to query.</param>
      <param name="message">Returns a reason for the asset metadata not being open for edit.</param>
      <param name="StatusQueryOptions">Options for how the version control system should be queried. These options can effect the speed and accuracy of the query.</param>
      <param name="statusOptions"></param>
      <returns>
        <para>True if the asset's metadata is considered open for edit by the selected version control system.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsMetaFileOpenForEdit(UnityEngine.Object,System.String&amp;,UnityEditor.StatusQueryOptions)">
      <summary>
        <para>Query whether an asset's metadata (.meta) file is open for edit in version control.</para>
      </summary>
      <param name="assetObject">Object representing the asset whose metadata status you wish to query.</param>
      <param name="message">Returns a reason for the asset metadata not being open for edit.</param>
      <param name="StatusQueryOptions">Options for how the version control system should be queried. These options can effect the speed and accuracy of the query.</param>
      <param name="statusOptions"></param>
      <returns>
        <para>True if the asset's metadata is considered open for edit by the selected version control system.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsMetaFileOpenForEdit(UnityEngine.Object)">
      <summary>
        <para>Query whether an asset's metadata (.meta) file is open for edit in version control.</para>
      </summary>
      <param name="assetObject">Object representing the asset whose metadata status you wish to query.</param>
      <param name="message">Returns a reason for the asset metadata not being open for edit.</param>
      <param name="StatusQueryOptions">Options for how the version control system should be queried. These options can effect the speed and accuracy of the query.</param>
      <param name="statusOptions"></param>
      <returns>
        <para>True if the asset's metadata is considered open for edit by the selected version control system.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsMetaFileOpenForEdit(UnityEngine.Object,System.String&amp;)">
      <summary>
        <para>Query whether an asset's metadata (.meta) file is open for edit in version control.</para>
      </summary>
      <param name="assetObject">Object representing the asset whose metadata status you wish to query.</param>
      <param name="message">Returns a reason for the asset metadata not being open for edit.</param>
      <param name="StatusQueryOptions">Options for how the version control system should be queried. These options can effect the speed and accuracy of the query.</param>
      <param name="statusOptions"></param>
      <returns>
        <para>True if the asset's metadata is considered open for edit by the selected version control system.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsNativeAsset(UnityEngine.Object)">
      <summary>
        <para>Is asset a native asset?</para>
      </summary>
      <param name="obj"></param>
      <param name="instanceID"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsNativeAsset(System.Int32)">
      <summary>
        <para>Is asset a native asset?</para>
      </summary>
      <param name="obj"></param>
      <param name="instanceID"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(UnityEngine.Object,UnityEditor.StatusQueryOptions)">
      <summary>
        <para>Query whether an asset file is open for edit in version control.</para>
      </summary>
      <param name="assetObject">Object representing the asset whose status you wish to query.</param>
      <param name="assetOrMetaFilePath">Path to the asset file or its .meta file on disk, relative to project folder.</param>
      <param name="message">Returns a reason for the asset not being open for edit.</param>
      <param name="StatusQueryOptions">Options for how the version control system should be queried. These options can effect the speed and accuracy of the query.</param>
      <param name="statusOptions"></param>
      <returns>
        <para>True if the asset is considered open for edit by the selected version control system.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(System.String,UnityEditor.StatusQueryOptions)">
      <summary>
        <para>Query whether an asset file is open for edit in version control.</para>
      </summary>
      <param name="assetObject">Object representing the asset whose status you wish to query.</param>
      <param name="assetOrMetaFilePath">Path to the asset file or its .meta file on disk, relative to project folder.</param>
      <param name="message">Returns a reason for the asset not being open for edit.</param>
      <param name="StatusQueryOptions">Options for how the version control system should be queried. These options can effect the speed and accuracy of the query.</param>
      <param name="statusOptions"></param>
      <returns>
        <para>True if the asset is considered open for edit by the selected version control system.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(UnityEngine.Object,System.String&amp;,UnityEditor.StatusQueryOptions)">
      <summary>
        <para>Query whether an asset file is open for edit in version control.</para>
      </summary>
      <param name="assetObject">Object representing the asset whose status you wish to query.</param>
      <param name="assetOrMetaFilePath">Path to the asset file or its .meta file on disk, relative to project folder.</param>
      <param name="message">Returns a reason for the asset not being open for edit.</param>
      <param name="StatusQueryOptions">Options for how the version control system should be queried. These options can effect the speed and accuracy of the query.</param>
      <param name="statusOptions"></param>
      <returns>
        <para>True if the asset is considered open for edit by the selected version control system.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(System.String,System.String&amp;,UnityEditor.StatusQueryOptions)">
      <summary>
        <para>Query whether an asset file is open for edit in version control.</para>
      </summary>
      <param name="assetObject">Object representing the asset whose status you wish to query.</param>
      <param name="assetOrMetaFilePath">Path to the asset file or its .meta file on disk, relative to project folder.</param>
      <param name="message">Returns a reason for the asset not being open for edit.</param>
      <param name="StatusQueryOptions">Options for how the version control system should be queried. These options can effect the speed and accuracy of the query.</param>
      <param name="statusOptions"></param>
      <returns>
        <para>True if the asset is considered open for edit by the selected version control system.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(UnityEngine.Object)">
      <summary>
        <para>Query whether an asset file is open for edit in version control.</para>
      </summary>
      <param name="assetObject">Object representing the asset whose status you wish to query.</param>
      <param name="assetOrMetaFilePath">Path to the asset file or its .meta file on disk, relative to project folder.</param>
      <param name="message">Returns a reason for the asset not being open for edit.</param>
      <param name="StatusQueryOptions">Options for how the version control system should be queried. These options can effect the speed and accuracy of the query.</param>
      <param name="statusOptions"></param>
      <returns>
        <para>True if the asset is considered open for edit by the selected version control system.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(System.String)">
      <summary>
        <para>Query whether an asset file is open for edit in version control.</para>
      </summary>
      <param name="assetObject">Object representing the asset whose status you wish to query.</param>
      <param name="assetOrMetaFilePath">Path to the asset file or its .meta file on disk, relative to project folder.</param>
      <param name="message">Returns a reason for the asset not being open for edit.</param>
      <param name="StatusQueryOptions">Options for how the version control system should be queried. These options can effect the speed and accuracy of the query.</param>
      <param name="statusOptions"></param>
      <returns>
        <para>True if the asset is considered open for edit by the selected version control system.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(UnityEngine.Object,System.String&amp;)">
      <summary>
        <para>Query whether an asset file is open for edit in version control.</para>
      </summary>
      <param name="assetObject">Object representing the asset whose status you wish to query.</param>
      <param name="assetOrMetaFilePath">Path to the asset file or its .meta file on disk, relative to project folder.</param>
      <param name="message">Returns a reason for the asset not being open for edit.</param>
      <param name="StatusQueryOptions">Options for how the version control system should be queried. These options can effect the speed and accuracy of the query.</param>
      <param name="statusOptions"></param>
      <returns>
        <para>True if the asset is considered open for edit by the selected version control system.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(System.String,System.String&amp;)">
      <summary>
        <para>Query whether an asset file is open for edit in version control.</para>
      </summary>
      <param name="assetObject">Object representing the asset whose status you wish to query.</param>
      <param name="assetOrMetaFilePath">Path to the asset file or its .meta file on disk, relative to project folder.</param>
      <param name="message">Returns a reason for the asset not being open for edit.</param>
      <param name="StatusQueryOptions">Options for how the version control system should be queried. These options can effect the speed and accuracy of the query.</param>
      <param name="statusOptions"></param>
      <returns>
        <para>True if the asset is considered open for edit by the selected version control system.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsSubAsset(UnityEngine.Object)">
      <summary>
        <para>Does the asset form part of another asset?</para>
      </summary>
      <param name="obj">The asset Object to query.</param>
      <param name="instanceID">Instance ID of the asset Object to query.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsSubAsset(System.Int32)">
      <summary>
        <para>Does the asset form part of another asset?</para>
      </summary>
      <param name="obj">The asset Object to query.</param>
      <param name="instanceID">Instance ID of the asset Object to query.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsValidFolder(System.String)">
      <summary>
        <para>Given an absolute path to a folder, returns true if it exists, false otherwise.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.LoadAllAssetRepresentationsAtPath(System.String)">
      <summary>
        <para>Returns all asset representations at assetPath.</para>
      </summary>
      <param name="assetPath"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.LoadAllAssetsAtPath(System.String)">
      <summary>
        <para>Returns an array of all asset objects at assetPath.</para>
      </summary>
      <param name="assetPath">Filesystem path to the asset.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.LoadAssetAtPath(System.String,System.Type)">
      <summary>
        <para>Returns the first asset object of type type at given path assetPath.</para>
      </summary>
      <param name="assetPath">Path of the asset to load.</param>
      <param name="type">Data type of the asset.</param>
      <returns>
        <para>The asset matching the parameters.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.LoadMainAssetAtPath(System.String)">
      <summary>
        <para>Returns the main asset object at assetPath.</para>
      </summary>
      <param name="assetPath">Filesystem path of the asset to load.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.MoveAsset(System.String,System.String)">
      <summary>
        <para>Move an asset file from one folder to another.</para>
      </summary>
      <param name="oldPath">The path where the asset currently resides.</param>
      <param name="newPath">The path which the asset should be moved to.</param>
      <returns>
        <para>An empty string if the asset has been successfully moved, otherwise an error message.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.MoveAssetToTrash(System.String)">
      <summary>
        <para>Moves the asset at path to the trash.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.OpenAsset(System.Int32)">
      <summary>
        <para>Opens the asset with associated application.</para>
      </summary>
      <param name="instanceID"></param>
      <param name="lineNumber"></param>
      <param name="target"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.OpenAsset(System.Int32,System.Int32)">
      <summary>
        <para>Opens the asset with associated application.</para>
      </summary>
      <param name="instanceID"></param>
      <param name="lineNumber"></param>
      <param name="target"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.OpenAsset(UnityEngine.Object)">
      <summary>
        <para>Opens the asset with associated application.</para>
      </summary>
      <param name="instanceID"></param>
      <param name="lineNumber"></param>
      <param name="target"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.OpenAsset(UnityEngine.Object,System.Int32)">
      <summary>
        <para>Opens the asset with associated application.</para>
      </summary>
      <param name="instanceID"></param>
      <param name="lineNumber"></param>
      <param name="target"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.OpenAsset(UnityEngine.Object[])">
      <summary>
        <para>Opens the asset(s) with associated application(s).</para>
      </summary>
      <param name="objects"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.Refresh()">
      <summary>
        <para>Import any changed assets.</para>
      </summary>
      <param name="options"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.Refresh(UnityEditor.ImportAssetOptions)">
      <summary>
        <para>Import any changed assets.</para>
      </summary>
      <param name="options"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.RemoveAssetBundleName(System.String,System.Boolean)">
      <summary>
        <para>Remove the assetBundle name from the asset database. The forceRemove flag is used to indicate if you want to remove it even it's in use.</para>
      </summary>
      <param name="assetBundleName">The assetBundle name you want to remove.</param>
      <param name="forceRemove">Flag to indicate if you want to remove the assetBundle name even it's in use.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.RemoveUnusedAssetBundleNames">
      <summary>
        <para>Remove all the unused assetBundle names in the asset database.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.RenameAsset(System.String,System.String)">
      <summary>
        <para>Rename an asset file.</para>
      </summary>
      <param name="pathName">The path where the asset currently resides.</param>
      <param name="newName">The new name which should be given to the asset.</param>
      <returns>
        <para>An empty string, if the asset has been successfully renamed, otherwise an error message.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.SaveAssets">
      <summary>
        <para>Writes all unsaved asset changes to disk.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.SetLabels(UnityEngine.Object,System.String[])">
      <summary>
        <para>Replaces that list of labels on an asset.</para>
      </summary>
      <param name="obj"></param>
      <param name="labels"></param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.SetMainObject(UnityEngine.Object,System.String)">
      <summary>
        <para>Specifies which object in the asset file should become the main object after the next import.</para>
      </summary>
      <param name="mainObject">The object to become the main object.</param>
      <param name="assetPath">Path to the asset file.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.StartAssetEditing">
      <summary>
        <para>Begin Asset importing. This lets you group several asset imports together into one larger import.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.StopAssetEditing">
      <summary>
        <para>Stop Asset importing. This lets you group several asset imports together into one larger import.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ValidateMoveAsset(System.String,System.String)">
      <summary>
        <para>Checks if an asset file can be moved from one folder to another. (Without actually moving the file).</para>
      </summary>
      <param name="oldPath">The path where the asset currently resides.</param>
      <param name="newPath">The path which the asset should be moved to.</param>
      <returns>
        <para>An empty string if the asset can be moved, otherwise an error message.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.WriteImportSettingsIfDirty(System.String)">
      <summary>
        <para>Writes the import settings to disk.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="T:UnityEditor.AssetDeleteResult">
      <summary>
        <para>Result of Asset delete operation</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetDeleteResult.DidDelete">
      <summary>
        <para>Tells Unity that the asset was deleted by the callback. Unity will not try to delete the asset, but will delete the cached version and preview file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetDeleteResult.DidNotDelete">
      <summary>
        <para>Tells the internal implementation that the callback did not delete the asset. The asset will be delete by the internal implementation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetDeleteResult.FailedDelete">
      <summary>
        <para>Tells Unity that the file cannot be deleted and Unity should leave it alone.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetImporter">
      <summary>
        <para>Base class from which asset importers for specific asset types derive.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AssetImporter.assetBundleName">
      <summary>
        <para>Get or set the AssetBundle name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AssetImporter.assetBundleVariant">
      <summary>
        <para>Get or set the AssetBundle variant.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AssetImporter.assetPath">
      <summary>
        <para>The path name of the asset for this importer. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AssetImporter.userData">
      <summary>
        <para>Get or set any user data.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetImporter.GetAtPath(System.String)">
      <summary>
        <para>Retrieves the asset importer for the asset at path.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEditor.AssetImporter.SaveAndReimport">
      <summary>
        <para>Save asset importer settings if asset importer is dirty.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetImporter.SetAssetBundleNameAndVariant(System.String,System.String)">
      <summary>
        <para>Set the AssetBundle name and variant.</para>
      </summary>
      <param name="assetBundleName">AssetBundle name.</param>
      <param name="assetBundleVariant">AssetBundle variant.</param>
    </member>
    <member name="T:UnityEditor.AssetModificationProcessor">
      <summary>
        <para>AssetModificationProcessor lets you hook into saving of serialized assets and
      scenes which are edited inside Unity.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetMoveResult">
      <summary>
        <para>Result of Asset move</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetMoveResult.DidMove">
      <summary>
        <para>Tells the internal implementation that the script moved the asset physically on disk.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetMoveResult.DidNotMove">
      <summary>
        <para>Tells the internal implementation that the asset was not moved physically on disk by the script.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetMoveResult.FailedMove">
      <summary>
        <para>Tells the internal implementation that the script could not move the assets.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetPostprocessor">
      <summary>
        <para>AssetPostprocessor lets you hook into the import pipeline and run scripts prior or after importing assets.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AssetPostprocessor.assetImporter">
      <summary>
        <para>Reference to the asset importer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AssetPostprocessor.assetPath">
      <summary>
        <para>The path name of the asset being imported.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.GetPostprocessOrder">
      <summary>
        <para>Override the order in which importers are processed.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.GetVersion">
      <summary>
        <para>Returns the version of the asset postprocessor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.LogError(System.String)">
      <summary>
        <para>Logs an import error message to the console.</para>
      </summary>
      <param name="warning"></param>
      <param name="context"></param>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.LogError(System.String,UnityEngine.Object)">
      <summary>
        <para>Logs an import error message to the console.</para>
      </summary>
      <param name="warning"></param>
      <param name="context"></param>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.LogWarning(System.String)">
      <summary>
        <para>Logs an import warning to the console.</para>
      </summary>
      <param name="warning"></param>
      <param name="context"></param>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.LogWarning(System.String,UnityEngine.Object)">
      <summary>
        <para>Logs an import warning to the console.</para>
      </summary>
      <param name="warning"></param>
      <param name="context"></param>
    </member>
    <member name="T:UnityEditor.AssetPreview">
      <summary>
        <para>Utility for fetching asset previews by instance ID of assets, See AssetPreview.GetAssetPreview. Since previews are loaded asynchronously methods are provided for requesting if all previews have been fully loaded, see AssetPreview.IsLoadingAssetPreviews. Loaded previews are stored in a cache, the size of the cache can be controlled by calling [AssetPreview.SetPreviewTextureCacheSize].</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPreview.GetAssetPreview(UnityEngine.Object)">
      <summary>
        <para>Returns a preview texture for an asset.</para>
      </summary>
      <param name="asset"></param>
    </member>
    <member name="M:UnityEditor.AssetPreview.GetAssetPreview">
      <summary>
        <para>Returns a preview texture for an instanceID of an asset.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPreview.GetMiniThumbnail(UnityEngine.Object)">
      <summary>
        <para>Returns the thumbnail for an object (like the ones you see in the project view).</para>
      </summary>
      <param name="obj"></param>
    </member>
    <member name="M:UnityEditor.AssetPreview.GetMiniTypeThumbnail(System.Type)">
      <summary>
        <para>Returns the thumbnail for the type.</para>
      </summary>
      <param name="type"></param>
    </member>
    <member name="M:UnityEditor.AssetPreview.GetMiniTypeThumbnail">
      <summary>
        <para>Returns the thumbnail for the object's type.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPreview.IsLoadingAssetPreview(System.Int32)">
      <summary>
        <para>Loading previews is asynchronous so it is useful to know if a specific asset preview is in the process of being loaded so client code e.g can repaint while waiting for the loading to finish.</para>
      </summary>
      <param name="instanceID">InstanceID of the assset that a preview has been requested for by: AssetPreview.GetAssetPreview().</param>
    </member>
    <member name="M:UnityEditor.AssetPreview.IsLoadingAssetPreviews">
      <summary>
        <para>Loading previews is asynchronous so it is useful to know if any requested previews are in the process of being loaded so client code e.g can repaint while waiting.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPreview.SetPreviewTextureCacheSize(System.Int32)">
      <summary>
        <para>Set the asset preview cache to a size that can hold all visible previews on the screen at once.</para>
      </summary>
      <param name="size">The number of previews that can be loaded into the cache before the least used previews are being unloaded.</param>
    </member>
    <member name="T:UnityEditor.AudioCurveRendering">
      <summary>
        <para>Antialiased curve rendering functionality used by audio tools in the editor.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AudioCurveRendering.AudioCurveAndColorEvaluator">
      <summary>
        <para>Curve evaluation function that allows simultaneous evaluation of the curve y-value and a color of the curve at that point.</para>
      </summary>
      <param name="x">Normalized x-position in the range [0; 1] at which the curve should be evaluated.</param>
      <param name="col">Color of the curve at the evaluated point.</param>
    </member>
    <member name="T:UnityEditor.AudioCurveRendering.AudioCurveEvaluator">
      <summary>
        <para>Curve evaluation function used to evaluate the curve y-value and at the specified point.</para>
      </summary>
      <param name="x">Normalized x-position in the range [0; 1] at which the curve should be evaluated.</param>
    </member>
    <member name="T:UnityEditor.AudioCurveRendering.AudioMinMaxCurveAndColorEvaluator">
      <summary>
        <para>Curve evaluation function that allows simultaneous evaluation of the min- and max-curves. The returned minValue and maxValue values are expected to be in the range [-1; 1] and a value of 0 corresponds to the vertical center of the rectangle that is drawn into. Values outside of this range will be clamped. Additionally the color of the curve at this point is evaluated.</para>
      </summary>
      <param name="x">Normalized x-position in the range [0; 1] at which the min- and max-curves should be evaluated.</param>
      <param name="col">Color of the curve at the specified evaluation point.</param>
      <param name="minValue">Returned value of the minimum curve. Clamped to [-1; 1].</param>
      <param name="maxValue">Returned value of the maximum curve. Clamped to [-1; 1].</param>
    </member>
    <member name="M:UnityEditor.AudioCurveRendering.DrawCurve(UnityEngine.Rect,UnityEditor.AudioCurveRendering/AudioCurveEvaluator,UnityEngine.Color)">
      <summary>
        <para>Renders a thin curve determined by the curve evaluation function. The solid color of the curve is set by the curveColor argument.</para>
      </summary>
      <param name="r">Rectangle determining the size of the graph.</param>
      <param name="eval">Curve evaluation function.</param>
      <param name="curveColor">Solid fill color of the curve. The alpha-channel determines the amount of opacity.</param>
    </member>
    <member name="M:UnityEditor.AudioCurveRendering.DrawFilledCurve(UnityEngine.Rect,UnityEditor.AudioCurveRendering/AudioCurveEvaluator,UnityEngine.Color)">
      <summary>
        <para>Fills the area between the curve evaluated by the AudioCurveAndColorEvaluator provided and the bottom of the rectngle with smooth gradients along the edges.</para>
      </summary>
      <param name="r">Rectangle determining the size of the graph.</param>
      <param name="eval">Normalized x-position in the range [0; 1] at which the curve should be evaluated. The returned value is expected to be in the range [-1; 1] and a value of 0 corresponds to the vertical center of the rectangle that is drawn into. Values outside of this range will be clamped.</param>
      <param name="curveColor">Solid fill color of the curve. The alpha-channel determines the amount of opacity.</param>
    </member>
    <member name="M:UnityEditor.AudioCurveRendering.DrawFilledCurve(UnityEngine.Rect,UnityEditor.AudioCurveRendering/AudioCurveAndColorEvaluator)">
      <summary>
        <para>Fills the area between the curve evaluated by the AudioCurveAndColorEvaluator provided and the bottom of the rectngle with smooth gradients along the edges.</para>
      </summary>
      <param name="r">Rectangle determining the size of the graph.</param>
      <param name="eval">Normalized x-position in the range [0; 1] at which the curve should be evaluated. The returned value is expected to be in the range [-1; 1] and a value of 0 corresponds to the vertical center of the rectangle that is drawn into. Values outside of this range will be clamped.</param>
      <param name="curveColor">Solid fill color of the curve. The alpha-channel determines the amount of opacity.</param>
    </member>
    <member name="M:UnityEditor.AudioCurveRendering.DrawMinMaxFilledCurve(UnityEngine.Rect,UnityEditor.AudioCurveRendering/AudioMinMaxCurveAndColorEvaluator)">
      <summary>
        <para>Fills the area between the two curves evaluated by the AudioMinMaxCurveAndColorEvaluator provided with smooth gradients along the edges.</para>
      </summary>
      <param name="r">Rectangle determining the size of the graph.</param>
      <param name="eval">Normalized x-position in the range [0; 1] at which the min- and max-curves should be evaluated. The returned minValue and maxValue values are expected to be in the range [-1; 1] and a value of 0 corresponds to the vertical center of the rectangle that is drawn into. Values outside of this range will be clamped.</param>
    </member>
    <member name="M:UnityEditor.AudioCurveRendering.DrawSymmetricFilledCurve(UnityEngine.Rect,UnityEditor.AudioCurveRendering/AudioCurveAndColorEvaluator)">
      <summary>
        <para>Fills the area between the curve evaluated by the AudioCurveAndColorEvaluator provided and its vertical mirror image with smooth gradients along the edges. Useful for drawing amplitude plots of audio signals.</para>
      </summary>
      <param name="r">Rectangle determining the size of the graph.</param>
      <param name="eval">Normalized x-position in the range [0; 1] at which the curve should be evaluated. The returned value is expected to be in the range [0; 1] and a value of 0 corresponds to the vertical center of the rectangle that is drawn into. Values outside of this range will be clamped.</param>
    </member>
    <member name="T:UnityEditor.AudioImporter">
      <summary>
        <para>Audio importer lets you modify AudioClip import settings from editor scripts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AudioImporter.compressionBitrate">
      <summary>
        <para>Compression bitrate.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AudioImporter.defaultSampleSettings">
      <summary>
        <para>The default sample settings for the AudioClip importer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AudioImporter.forceToMono">
      <summary>
        <para>Force this clip to mono?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AudioImporter.loadInBackground">
      <summary>
        <para>Corresponding to the "Load In Background" flag in the AudioClip inspector, when this flag is set, the loading of the clip will happen delayed without blocking the main thread.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AudioImporter.preloadAudioData">
      <summary>
        <para>Preloads audio data of the clip when the clip asset is loaded. When this flag is off, scripts have to call AudioClip.LoadAudioData() to load the data before the clip can be played. Properties like length, channels and format are available before the audio data has been loaded.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AudioImporter.ClearSampleSettingOverride(System.String)">
      <summary>
        <para>Clears the sample settings override for the given platform.</para>
      </summary>
      <param name="platform">The platform to clear the overrides for.</param>
      <returns>
        <para>Returns true if any overrides were actually cleared.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AudioImporter.ContainsSampleSettingsOverride(System.String)">
      <summary>
        <para>Returns whether a given build target has its sample settings currently overridden.</para>
      </summary>
      <param name="platform">The platform to query if this AudioImporter has an override for.</param>
      <returns>
        <para>Returns true if the platform is currently overriden in this AudioImporter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AudioImporter.GetOverrideSampleSettings(System.String)">
      <summary>
        <para>Return the current override settings for the given platform.</para>
      </summary>
      <param name="platform">The platform to get the override settings for.</param>
      <returns>
        <para>The override sample settings for the given platform.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AudioImporter.SetOverrideSampleSettings(System.String,UnityEditor.AudioImporterSampleSettings)">
      <summary>
        <para>Sets the override sample settings for the given platform.</para>
      </summary>
      <param name="platform">The platform which will have the sample settings overridden.</param>
      <param name="settings">The override settings for the given platform.</param>
      <returns>
        <para>Returns true if the settings were successfully overriden. Some setting overrides are not possible for the given platform, in which case false is returned and the settings are not registered.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.AudioImporterSampleSettings">
      <summary>
        <para>This structure contains a collection of settings used to define how an AudioClip should be imported.

This  structure is used with the AudioImporter to define how the AudioClip should be imported and treated during loading within the scene.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioImporterSampleSettings.compressionFormat">
      <summary>
        <para>CompressionFormat defines the compression type that the audio file is encoded to. Different compression types have different performance and audio artifact characteristics.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioImporterSampleSettings.loadType">
      <summary>
        <para>LoadType defines how the imported AudioClip data should be loaded.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioImporterSampleSettings.quality">
      <summary>
        <para>Audio compression quality (0-1)

Amount of compression. The value roughly corresponds to the ratio between the resulting and the source file sizes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioImporterSampleSettings.sampleRateOverride">
      <summary>
        <para>Target sample rate to convert to when samplerateSetting is set to OverrideSampleRate.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioImporterSampleSettings.sampleRateSetting">
      <summary>
        <para>Defines how the sample rate is modified (if at all) of the importer audio file.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AudioSampleRateSetting">
      <summary>
        <para>The sample rate setting used within the AudioImporter. This defines the sample rate conversion of audio on import.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioSampleRateSetting.OptimizeSampleRate">
      <summary>
        <para>Let Unity deduce the optimal sample rate for the AudioClip being imported. The audio file will be analysed and a minimal sample rate chosen while still preserving audio quality.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioSampleRateSetting.OverrideSampleRate">
      <summary>
        <para>Override the sample rate of the imported audio file with a custom value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioSampleRateSetting.PreserveSampleRate">
      <summary>
        <para>Do not change the sample rate of the imported audio file. The sample rate will be preserved for the imported AudioClip.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BaseHierarchySort">
      <summary>
        <para>The base class used to create new sorting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.BaseHierarchySort.content">
      <summary>
        <para>The content to display to quickly identify the hierarchy's mode.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BaseHierarchySort.Compare(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>The sorting method used to determine the order of GameObjects.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="T:UnityEditor.Build.BuildFailedException">
      <summary>
        <para>An exception class that represents a failed build.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Build.BuildFailedException.#ctor(System.String)">
      <summary>
        <para>Constructs a BuildFailedException object.</para>
      </summary>
      <param name="message">The error that caused the build to fail.</param>
      <param name="innerException">The exception that caused the build to fail.</param>
    </member>
    <member name="M:UnityEditor.Build.BuildFailedException.#ctor(System.Exception)">
      <summary>
        <para>Constructs a BuildFailedException object.</para>
      </summary>
      <param name="message">The error that caused the build to fail.</param>
      <param name="innerException">The exception that caused the build to fail.</param>
    </member>
    <member name="?:UnityEditor.Build.IOrderedCallback">
      <summary>
        <para>Interface that provides control over callback order.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Build.IOrderedCallback.callbackOrder">
      <summary>
        <para>Returns the relative callback order for callbacks.  Callbacks with lower values are called before ones with higher values.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.Build.IPostprocessBuild">
      <summary>
        <para>Implement this interface to receive a callback after the build is complete.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Build.IPostprocessBuild.OnPostprocessBuild(UnityEditor.BuildTarget,System.String)">
      <summary>
        <para>Implement this function to receive a callback after the build is complete.</para>
      </summary>
      <param name="target"></param>
      <param name="path"></param>
    </member>
    <member name="?:UnityEditor.Build.IPreprocessBuild">
      <summary>
        <para>Implement this interface to receive a callback before the build is started.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Build.IPreprocessBuild.OnPreprocessBuild(UnityEditor.BuildTarget,System.String)">
      <summary>
        <para>Implement this function to receive a callback before the build is started.</para>
      </summary>
      <param name="target"></param>
      <param name="path"></param>
    </member>
    <member name="?:UnityEditor.Build.IProcessScene">
      <summary>
        <para>Implement this interface to receive a callback for each Scene during the build.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Build.IProcessScene.OnProcessScene(UnityEngine.SceneManagement.Scene)">
      <summary>
        <para>Implement this function to receive a callback for each Scene during the build.</para>
      </summary>
      <param name="scene">The current Scene being processed.</param>
    </member>
    <member name="T:UnityEditor.BuildAssetBundleOptions">
      <summary>
        <para>Asset Bundle building options.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.AppendHashToAssetBundleName">
      <summary>
        <para>Append the hash to the assetBundle name.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.ChunkBasedCompression">
      <summary>
        <para>Use chunk-based LZ4 compression when creating the AssetBundle.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.CollectDependencies">
      <summary>
        <para>Includes all dependencies.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.CompleteAssets">
      <summary>
        <para>Forces inclusion of the entire asset.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.DeterministicAssetBundle">
      <summary>
        <para>Builds an asset bundle using a hash for the id of the object stored in the asset bundle.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.DisableWriteTypeTree">
      <summary>
        <para>Do not include type information within the AssetBundle.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.DryRunBuild">
      <summary>
        <para>Do a dry run build.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.ForceRebuildAssetBundle">
      <summary>
        <para>Force rebuild the assetBundles.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.IgnoreTypeTreeChanges">
      <summary>
        <para>Ignore the type tree changes when doing the incremental build check.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.None">
      <summary>
        <para>Build assetBundle without any special option.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.StrictMode">
      <summary>
        <para>Do not allow the build to succeed if any errors are reporting during it.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.UncompressedAssetBundle">
      <summary>
        <para>Don't compress the data when creating the asset bundle.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BuildOptions">
      <summary>
        <para>Building options. Multiple options can be combined together.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.AcceptExternalModificationsToPlayer">
      <summary>
        <para>Used when building Xcode (iOS) or Eclipse (Android) projects.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.AllowDebugging">
      <summary>
        <para>Allow script debuggers to attach to the player remotely.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.AutoRunPlayer">
      <summary>
        <para>Run the built player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.BuildAdditionalStreamedScenes">
      <summary>
        <para>Build a compressed asset bundle that contains streamed scenes loadable with the WWW class.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.BuildScriptsOnly">
      <summary>
        <para>Build only the scripts of a project.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.CompressWithLz4">
      <summary>
        <para>Use chunk-based Lz4 compression when building the Player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.ConnectToHost">
      <summary>
        <para>Sets the Player to connect to the Editor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.ConnectWithProfiler">
      <summary>
        <para>Start the player with a connection to the profiler in the editor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.Development">
      <summary>
        <para>Build a development version of the player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.EnableHeadlessMode">
      <summary>
        <para>Build headless Linux standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.ForceEnableAssertions">
      <summary>
        <para>Include assertions in the build. By default, the assertions are only included in development builds.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.ForceOptimizeScriptCompilation">
      <summary>
        <para>Force full optimizations for script complilation in Development builds.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.None">
      <summary>
        <para>Perform the specified build without any special settings or extra tasks.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.ShowBuiltPlayer">
      <summary>
        <para>Show the built player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.StrictMode">
      <summary>
        <para>Do not allow the build to succeed if any errors are reporting during it.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.SymlinkLibraries">
      <summary>
        <para>Symlink runtime libraries when generating iOS Xcode project. (Faster iteration time).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.UncompressedAssetBundle">
      <summary>
        <para>Don't compress the data when creating the asset bundle.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.WebPlayerOfflineDeployment">
      <summary>
        <para>Copy UnityObject.js alongside Web Player so it wouldn't have to be downloaded from internet.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BuildPipeline">
      <summary>
        <para>Lets you programmatically build players or AssetBundles which can be loaded from the web.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.BuildPipeline.isBuildingPlayer">
      <summary>
        <para>Is a player currently being built?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String)">
      <summary>
        <para>Builds an asset bundle.</para>
      </summary>
      <param name="mainAsset">Lets you specify a specific object that can be conveniently retrieved using AssetBundle.mainAsset.</param>
      <param name="assets">An array of assets to write into the bundle.</param>
      <param name="pathName">The filename where to write the compressed asset bundle.</param>
      <param name="assetBundleOptions">Automatically include dependencies or always include complete assets instead of just the exact referenced objects.</param>
      <param name="targetPlatform">The platform to build the bundle for.</param>
      <param name="crc">The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload.</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String,System.UInt32&amp;,UnityEditor.BuildAssetBundleOptions)">
      <summary>
        <para>Builds an asset bundle.</para>
      </summary>
      <param name="mainAsset">Lets you specify a specific object that can be conveniently retrieved using AssetBundle.mainAsset.</param>
      <param name="assets">An array of assets to write into the bundle.</param>
      <param name="pathName">The filename where to write the compressed asset bundle.</param>
      <param name="assetBundleOptions">Automatically include dependencies or always include complete assets instead of just the exact referenced objects.</param>
      <param name="targetPlatform">The platform to build the bundle for.</param>
      <param name="crc">The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload.</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String,UnityEditor.BuildAssetBundleOptions)">
      <summary>
        <para>Builds an asset bundle.</para>
      </summary>
      <param name="mainAsset">Lets you specify a specific object that can be conveniently retrieved using AssetBundle.mainAsset.</param>
      <param name="assets">An array of assets to write into the bundle.</param>
      <param name="pathName">The filename where to write the compressed asset bundle.</param>
      <param name="assetBundleOptions">Automatically include dependencies or always include complete assets instead of just the exact referenced objects.</param>
      <param name="targetPlatform">The platform to build the bundle for.</param>
      <param name="crc">The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload.</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String,System.UInt32&amp;)">
      <summary>
        <para>Builds an asset bundle.</para>
      </summary>
      <param name="mainAsset">Lets you specify a specific object that can be conveniently retrieved using AssetBundle.mainAsset.</param>
      <param name="assets">An array of assets to write into the bundle.</param>
      <param name="pathName">The filename where to write the compressed asset bundle.</param>
      <param name="assetBundleOptions">Automatically include dependencies or always include complete assets instead of just the exact referenced objects.</param>
      <param name="targetPlatform">The platform to build the bundle for.</param>
      <param name="crc">The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload.</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      <summary>
        <para>Builds an asset bundle.</para>
      </summary>
      <param name="mainAsset">Lets you specify a specific object that can be conveniently retrieved using AssetBundle.mainAsset.</param>
      <param name="assets">An array of assets to write into the bundle.</param>
      <param name="pathName">The filename where to write the compressed asset bundle.</param>
      <param name="assetBundleOptions">Automatically include dependencies or always include complete assets instead of just the exact referenced objects.</param>
      <param name="targetPlatform">The platform to build the bundle for.</param>
      <param name="crc">The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload.</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String,System.UInt32&amp;,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      <summary>
        <para>Builds an asset bundle.</para>
      </summary>
      <param name="mainAsset">Lets you specify a specific object that can be conveniently retrieved using AssetBundle.mainAsset.</param>
      <param name="assets">An array of assets to write into the bundle.</param>
      <param name="pathName">The filename where to write the compressed asset bundle.</param>
      <param name="assetBundleOptions">Automatically include dependencies or always include complete assets instead of just the exact referenced objects.</param>
      <param name="targetPlatform">The platform to build the bundle for.</param>
      <param name="crc">The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload.</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String,UnityEditor.BuildAssetBundleOptions)">
      <summary>
        <para>Builds an asset bundle, with custom names for the assets.</para>
      </summary>
      <param name="assets">A collection of assets to be built into the asset bundle. Asset bundles can contain any asset found in the project folder.</param>
      <param name="assetNames">An array of strings of the same size as the number of assets.
These will be used as asset names, which you can then pass to AssetBundle.Load to load a specific asset. Use BuildAssetBundle to just use the asset's path names instead.</param>
      <param name="pathName">The location where the compressed asset bundle will be written to.</param>
      <param name="assetBundleOptions">Automatically include dependencies or always include complete assets instead of just the exact referenced objects.</param>
      <param name="targetPlatform">The platform where the asset bundle will be used.</param>
      <param name="crc">An optional output parameter used to get a CRC checksum for the generated AssetBundle. (Used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload.)</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String,System.UInt32&amp;,UnityEditor.BuildAssetBundleOptions)">
      <summary>
        <para>Builds an asset bundle, with custom names for the assets.</para>
      </summary>
      <param name="assets">A collection of assets to be built into the asset bundle. Asset bundles can contain any asset found in the project folder.</param>
      <param name="assetNames">An array of strings of the same size as the number of assets.
These will be used as asset names, which you can then pass to AssetBundle.Load to load a specific asset. Use BuildAssetBundle to just use the asset's path names instead.</param>
      <param name="pathName">The location where the compressed asset bundle will be written to.</param>
      <param name="assetBundleOptions">Automatically include dependencies or always include complete assets instead of just the exact referenced objects.</param>
      <param name="targetPlatform">The platform where the asset bundle will be used.</param>
      <param name="crc">An optional output parameter used to get a CRC checksum for the generated AssetBundle. (Used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload.)</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String)">
      <summary>
        <para>Builds an asset bundle, with custom names for the assets.</para>
      </summary>
      <param name="assets">A collection of assets to be built into the asset bundle. Asset bundles can contain any asset found in the project folder.</param>
      <param name="assetNames">An array of strings of the same size as the number of assets.
These will be used as asset names, which you can then pass to AssetBundle.Load to load a specific asset. Use BuildAssetBundle to just use the asset's path names instead.</param>
      <param name="pathName">The location where the compressed asset bundle will be written to.</param>
      <param name="assetBundleOptions">Automatically include dependencies or always include complete assets instead of just the exact referenced objects.</param>
      <param name="targetPlatform">The platform where the asset bundle will be used.</param>
      <param name="crc">An optional output parameter used to get a CRC checksum for the generated AssetBundle. (Used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload.)</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String,System.UInt32&amp;)">
      <summary>
        <para>Builds an asset bundle, with custom names for the assets.</para>
      </summary>
      <param name="assets">A collection of assets to be built into the asset bundle. Asset bundles can contain any asset found in the project folder.</param>
      <param name="assetNames">An array of strings of the same size as the number of assets.
These will be used as asset names, which you can then pass to AssetBundle.Load to load a specific asset. Use BuildAssetBundle to just use the asset's path names instead.</param>
      <param name="pathName">The location where the compressed asset bundle will be written to.</param>
      <param name="assetBundleOptions">Automatically include dependencies or always include complete assets instead of just the exact referenced objects.</param>
      <param name="targetPlatform">The platform where the asset bundle will be used.</param>
      <param name="crc">An optional output parameter used to get a CRC checksum for the generated AssetBundle. (Used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload.)</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      <summary>
        <para>Builds an asset bundle, with custom names for the assets.</para>
      </summary>
      <param name="assets">A collection of assets to be built into the asset bundle. Asset bundles can contain any asset found in the project folder.</param>
      <param name="assetNames">An array of strings of the same size as the number of assets.
These will be used as asset names, which you can then pass to AssetBundle.Load to load a specific asset. Use BuildAssetBundle to just use the asset's path names instead.</param>
      <param name="pathName">The location where the compressed asset bundle will be written to.</param>
      <param name="assetBundleOptions">Automatically include dependencies or always include complete assets instead of just the exact referenced objects.</param>
      <param name="targetPlatform">The platform where the asset bundle will be used.</param>
      <param name="crc">An optional output parameter used to get a CRC checksum for the generated AssetBundle. (Used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload.)</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String,System.UInt32&amp;,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      <summary>
        <para>Builds an asset bundle, with custom names for the assets.</para>
      </summary>
      <param name="assets">A collection of assets to be built into the asset bundle. Asset bundles can contain any asset found in the project folder.</param>
      <param name="assetNames">An array of strings of the same size as the number of assets.
These will be used as asset names, which you can then pass to AssetBundle.Load to load a specific asset. Use BuildAssetBundle to just use the asset's path names instead.</param>
      <param name="pathName">The location where the compressed asset bundle will be written to.</param>
      <param name="assetBundleOptions">Automatically include dependencies or always include complete assets instead of just the exact referenced objects.</param>
      <param name="targetPlatform">The platform where the asset bundle will be used.</param>
      <param name="crc">An optional output parameter used to get a CRC checksum for the generated AssetBundle. (Used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload.)</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundles(System.String,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      <summary>
        <para>Build all AssetBundles specified in the editor.</para>
      </summary>
      <param name="outputPath">Output path for the AssetBundles.</param>
      <param name="assetBundleOptions">AssetBundle building options.</param>
      <param name="targetPlatform">Chosen target build platform.</param>
      <returns>
        <para>The manifest listing all AssetBundles included in this build.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundles(System.String,UnityEditor.AssetBundleBuild[],UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      <summary>
        <para>Build AssetBundles from a building map.</para>
      </summary>
      <param name="outputPath">Output path for the AssetBundles.</param>
      <param name="builds">AssetBundle building map.</param>
      <param name="assetBundleOptions">AssetBundle building options.</param>
      <param name="targetPlatform">Target build platform.</param>
      <returns>
        <para>The manifest listing all AssetBundles included in this build.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildPlayer(UnityEditor.BuildPlayerOptions)">
      <summary>
        <para>Builds a player.</para>
      </summary>
      <param name="buildPlayerOptions">Provide various options to control the behavior of BuildPipeline.BuildPlayer.</param>
      <returns>
        <para>An error message if an error occurred.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildPlayer(System.String[],System.String,UnityEditor.BuildTarget,UnityEditor.BuildOptions)">
      <summary>
        <para>Builds a player. These overloads are still supported, but will be replaces by BuildPlayer (BuildPlayerOptions). Please use it instead.</para>
      </summary>
      <param name="levels">The scenes to be included in the build. If empty, the currently open scene will be built. Paths are relative to the project folder (AssetsMyLevelsMyScene.unity).</param>
      <param name="locationPathName">The path where the application will be built.</param>
      <param name="target">The BuildTarget to build.</param>
      <param name="options">Additional BuildOptions, like whether to run the built player.</param>
      <returns>
        <para>An error message if an error occurred.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildPlayer(UnityEditor.EditorBuildSettingsScene[],System.String,UnityEditor.BuildTarget,UnityEditor.BuildOptions)">
      <summary>
        <para>Builds a player. These overloads are still supported, but will be replaces by BuildPlayer (BuildPlayerOptions). Please use it instead.</para>
      </summary>
      <param name="levels">The scenes to be included in the build. If empty, the currently open scene will be built. Paths are relative to the project folder (AssetsMyLevelsMyScene.unity).</param>
      <param name="locationPathName">The path where the application will be built.</param>
      <param name="target">The BuildTarget to build.</param>
      <param name="options">Additional BuildOptions, like whether to run the built player.</param>
      <returns>
        <para>An error message if an error occurred.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildStreamedSceneAssetBundle(System.String[],System.String,UnityEditor.BuildTarget)">
      <summary>
        <para>Builds one or more scenes and all their dependencies into a compressed asset bundle.</para>
      </summary>
      <param name="levels">Pathnames of levels to include in the asset bundle.</param>
      <param name="locationPath">Pathname for the output asset bundle.</param>
      <param name="target">Runtime platform on which the asset bundle will be used.</param>
      <param name="crc">Output parameter to receive CRC checksum of generated assetbundle.</param>
      <param name="options">Build options. See BuildOptions for possible values.</param>
      <returns>
        <para>String with an error message, empty on success.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildStreamedSceneAssetBundle(System.String[],System.String,UnityEditor.BuildTarget,System.UInt32&amp;)">
      <summary>
        <para>Builds one or more scenes and all their dependencies into a compressed asset bundle.</para>
      </summary>
      <param name="levels">Pathnames of levels to include in the asset bundle.</param>
      <param name="locationPath">Pathname for the output asset bundle.</param>
      <param name="target">Runtime platform on which the asset bundle will be used.</param>
      <param name="crc">Output parameter to receive CRC checksum of generated assetbundle.</param>
      <param name="options">Build options. See BuildOptions for possible values.</param>
      <returns>
        <para>String with an error message, empty on success.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildStreamedSceneAssetBundle(System.String[],System.String,UnityEditor.BuildTarget,UnityEditor.BuildOptions)">
      <summary>
        <para>Builds one or more scenes and all their dependencies into a compressed asset bundle.</para>
      </summary>
      <param name="levels">Pathnames of levels to include in the asset bundle.</param>
      <param name="locationPath">Pathname for the output asset bundle.</param>
      <param name="target">Runtime platform on which the asset bundle will be used.</param>
      <param name="crc">Output parameter to receive CRC checksum of generated assetbundle.</param>
      <param name="options">Build options. See BuildOptions for possible values.</param>
      <returns>
        <para>String with an error message, empty on success.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildStreamedSceneAssetBundle(System.String[],System.String,UnityEditor.BuildTarget,System.UInt32&amp;,UnityEditor.BuildOptions)">
      <summary>
        <para>Builds one or more scenes and all their dependencies into a compressed asset bundle.</para>
      </summary>
      <param name="levels">Pathnames of levels to include in the asset bundle.</param>
      <param name="locationPath">Pathname for the output asset bundle.</param>
      <param name="target">Runtime platform on which the asset bundle will be used.</param>
      <param name="crc">Output parameter to receive CRC checksum of generated assetbundle.</param>
      <param name="options">Build options. See BuildOptions for possible values.</param>
      <returns>
        <para>String with an error message, empty on success.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.GetCRCForAssetBundle(System.String,System.UInt32&amp;)">
      <summary>
        <para>Extract the crc checksum for the given AssetBundle.</para>
      </summary>
      <param name="targetPath"></param>
      <param name="crc"></param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.GetHashForAssetBundle(System.String,UnityEngine.Hash128&amp;)">
      <summary>
        <para>Extract the hash for the given AssetBundle.</para>
      </summary>
      <param name="targetPath"></param>
      <param name="hash"></param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.PopAssetDependencies">
      <summary>
        <para>Lets you manage cross-references and dependencies between different asset bundles and player builds.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.PushAssetDependencies">
      <summary>
        <para>Lets you manage cross-references and dependencies between different asset bundles and player builds.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BuildPlayerOptions">
      <summary>
        <para>Provide various options to control the behavior of BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.BuildPlayerOptions.assetBundleManifestPath">
      <summary>
        <para>The path to an manifest file describing all of the asset bundles used in the build (optional).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.BuildPlayerOptions.locationPathName">
      <summary>
        <para>The path where the application will be built.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.BuildPlayerOptions.options">
      <summary>
        <para>Additional BuildOptions, like whether to run the built player.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.BuildPlayerOptions.scenes">
      <summary>
        <para>The scenes to be included in the build. If empty, the currently open scene will be built. Paths are relative to the project folder (AssetsMyLevelsMyScene.unity).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.BuildPlayerOptions.target">
      <summary>
        <para>The BuildTarget to build.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.BuildPlayerOptions.targetGroup">
      <summary>
        <para>The BuildTargetGroup to build.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BuildTarget">
      <summary>
        <para>Target build platform.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.iOS">
      <summary>
        <para>Build an iOS player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.iPhone">
      <summary>
        <para>OBSOLETE: Use iOS. Build an iOS player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.tvOS">
      <summary>
        <para>Build to Apple's tvOS platform.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.Android">
      <summary>
        <para>Build an Android .apk standalone app.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.N3DS">
      <summary>
        <para>Build to Nintendo 3DS platform.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.PS4">
      <summary>
        <para>Build a PS4 Standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.PSP2">
      <summary>
        <para>Build a PS Vita Standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.SamsungTV">
      <summary>
        <para>Build to Samsung Smart TV platform.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneLinux">
      <summary>
        <para>Build a Linux standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneLinux64">
      <summary>
        <para>Build a Linux 64-bit standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneLinuxUniversal">
      <summary>
        <para>Build a Linux universal standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneOSXIntel">
      <summary>
        <para>Build a macOS standalone (Intel only).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneOSXIntel64">
      <summary>
        <para>Build a macOS Intel 64-bit standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneOSXUniversal">
      <summary>
        <para>Build a universal macOS standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneWindows">
      <summary>
        <para>Build a Windows standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneWindows64">
      <summary>
        <para>Build a Windows 64-bit standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.Switch">
      <summary>
        <para>Build a Nintendo Switch player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.Tizen">
      <summary>
        <para>Build a Tizen player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.WebGL">
      <summary>
        <para>WebGL.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.WebPlayer">
      <summary>
        <para>Build a web player. (This build target is deprecated. Building for web player will no longer be supported in future versions of Unity.)</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.WebPlayerStreamed">
      <summary>
        <para>Build a streamed web player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.WiiU">
      <summary>
        <para>Build a Wii U standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.WSAPlayer">
      <summary>
        <para>Build an Windows Store Apps player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.XboxOne">
      <summary>
        <para>Build a Xbox One Standalone.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BuildTargetGroup">
      <summary>
        <para>Build target group.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.iOS">
      <summary>
        <para>Apple iOS target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.iPhone">
      <summary>
        <para>OBSOLETE: Use iOS. Apple iOS target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.tvOS">
      <summary>
        <para>Apple's tvOS target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.Android">
      <summary>
        <para>Android target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.Facebook">
      <summary>
        <para>Facebook target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.N3DS">
      <summary>
        <para>Nintendo 3DS target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.PS4">
      <summary>
        <para>Sony Playstation 4 target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.PSP2">
      <summary>
        <para>Sony PS Vita target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.SamsungTV">
      <summary>
        <para>Samsung Smart TV target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.Standalone">
      <summary>
        <para>Mac/PC standalone target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.Switch">
      <summary>
        <para>Nintendo Switch target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.Tizen">
      <summary>
        <para>Samsung Tizen target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.Unknown">
      <summary>
        <para>Unknown target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.WebGL">
      <summary>
        <para>WebGL.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.WebPlayer">
      <summary>
        <para>Mac/PC webplayer target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.WiiU">
      <summary>
        <para>Nintendo Wii U target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.WSA">
      <summary>
        <para>Windows Store Apps target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.XboxOne">
      <summary>
        <para>Microsoft Xbox One target.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.CallbackOrderAttribute">
      <summary>
        <para>Base class for Attributes that require a callback index.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Callbacks.DidReloadScripts">
      <summary>
        <para>Add this attribute to a method to get a notification after scripts have been reloaded.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Callbacks.DidReloadScripts.#ctor">
      <summary>
        <para>DidReloadScripts attribute.</para>
      </summary>
      <param name="callbackOrder">Order in which separate attributes will be processed.</param>
    </member>
    <member name="M:UnityEditor.Callbacks.DidReloadScripts.#ctor(System.Int32)">
      <summary>
        <para>DidReloadScripts attribute.</para>
      </summary>
      <param name="callbackOrder">Order in which separate attributes will be processed.</param>
    </member>
    <member name="T:UnityEditor.Callbacks.OnOpenAssetAttribute">
      <summary>
        <para>Callback attribute for opening an asset in Unity (e.g the callback is fired when double clicking an asset in the Project Browser).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Callbacks.PostProcessBuildAttribute">
      <summary>
        <para>Add this attribute to a method to get a notification just after building the player.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Callbacks.PostProcessSceneAttribute">
      <summary>
        <para>Add this attribute to a method to get a notification just after building the scene.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.CanEditMultipleObjects">
      <summary>
        <para>Attribute used to make a custom editor support multi-object editing.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ClipAnimationInfoCurve">
      <summary>
        <para>Stores a curve and its name that will be used to create additionnal curves during the import process.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ClipAnimationInfoCurve.curve">
      <summary>
        <para>The animation curve.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ClipAnimationInfoCurve.name">
      <summary>
        <para>The name of the animation curve.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ClipAnimationMaskType">
      <summary>
        <para>AnimationClip mask options for ModelImporterClipAnimation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ClipAnimationMaskType.CopyFromOther">
      <summary>
        <para>Use a mask from your project to specify which transforms animation should be imported.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ClipAnimationMaskType.CreateFromThisModel">
      <summary>
        <para>A mask containing all the transform in the file will be created internally.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ClipAnimationMaskType.None">
      <summary>
        <para>No Mask. All the animation will be imported.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ColorPickerHDRConfig">
      <summary>
        <para>Used as input to ColorField to configure the HDR color ranges in the ColorPicker.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ColorPickerHDRConfig.maxBrightness">
      <summary>
        <para>Maximum allowed color component value when using the ColorPicker.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ColorPickerHDRConfig.maxExposureValue">
      <summary>
        <para>Maximum exposure value allowed in the Color Picker.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ColorPickerHDRConfig.minBrightness">
      <summary>
        <para>Minimum allowed color component value when using the ColorPicker.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ColorPickerHDRConfig.minExposureValue">
      <summary>
        <para>Minimum exposure value allowed in the Color Picker.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ColorPickerHDRConfig.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para></para>
      </summary>
      <param name="minBrightness">Minimum brightness value allowed when using the Color Picker.</param>
      <param name="maxBrightness">Maximum brightness value allowed when using the Color Picker.</param>
      <param name="minExposureValue">Minimum exposure value used in the tonemapping section of the Color Picker.</param>
      <param name="maxExposureValue">Maximum exposure value used in the tonemapping section of the Color Picker.</param>
    </member>
    <member name="T:UnityEditor.CrashReporting.CrashReportingSettings">
      <summary>
        <para>Editor API for the Unity Services editor feature. Normally CrashReporting is enabled from the Services window, but if writing your own editor extension, this API can be used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.CrashReporting.CrashReportingSettings.captureEditorExceptions">
      <summary>
        <para>This Boolean field will cause the CrashReporting feature in Unity to capture exceptions that occur in the editor while running in Play mode if true, or ignore those errors if false.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.CrashReporting.CrashReportingSettings.enabled">
      <summary>
        <para>This Boolean field will cause the CrashReporting feature in Unity to be enabled if true, or disabled if false.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.CustomEditor">
      <summary>
        <para>Tells an Editor class which run-time type it's an editor for.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.CustomEditor.isFallback">
      <summary>
        <para>If true, match this editor only if all non-fallback editors do not match. Defaults to false.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.CustomEditor.#ctor(System.Type)">
      <summary>
        <para>Defines which object type the custom editor class can edit.</para>
      </summary>
      <param name="inspectedType">Type that this editor can edit.</param>
      <param name="editorForChildClasses">If true, child classes of inspectedType will also show this editor. Defaults to false.</param>
    </member>
    <member name="M:UnityEditor.CustomEditor.#ctor(System.Type,System.Boolean)">
      <summary>
        <para>Defines which object type the custom editor class can edit.</para>
      </summary>
      <param name="inspectedType">Type that this editor can edit.</param>
      <param name="editorForChildClasses">If true, child classes of inspectedType will also show this editor. Defaults to false.</param>
    </member>
    <member name="T:UnityEditor.CustomPreviewAttribute">
      <summary>
        <para>Adds an extra preview in the Inspector for the specified type.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.CustomPreviewAttribute.#ctor(System.Type)">
      <summary>
        <para>Tells a DefaultPreview which class it's a preview for.</para>
      </summary>
      <param name="type">The type you want to create a custom preview for.</param>
    </member>
    <member name="T:UnityEditor.CustomPropertyDrawer">
      <summary>
        <para>Tells a custom PropertyDrawer or DecoratorDrawer which run-time Serializable class or PropertyAttribute it's a drawer for.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.CustomPropertyDrawer.#ctor(System.Type)">
      <summary>
        <para>Tells a PropertyDrawer or DecoratorDrawer class which run-time class or attribute it's a drawer for.</para>
      </summary>
      <param name="type">If the drawer is for a custom Serializable class, the type should be that class. If the drawer is for script variables with a specific PropertyAttribute, the type should be that attribute.</param>
      <param name="useForChildren">If true, the drawer will be used for any children of the specified class unless they define their own drawer.</param>
    </member>
    <member name="M:UnityEditor.CustomPropertyDrawer.#ctor(System.Type,System.Boolean)">
      <summary>
        <para>Tells a PropertyDrawer or DecoratorDrawer class which run-time class or attribute it's a drawer for.</para>
      </summary>
      <param name="type">If the drawer is for a custom Serializable class, the type should be that class. If the drawer is for script variables with a specific PropertyAttribute, the type should be that attribute.</param>
      <param name="useForChildren">If true, the drawer will be used for any children of the specified class unless they define their own drawer.</param>
    </member>
    <member name="T:UnityEditor.D3D11FullscreenMode">
      <summary>
        <para>Direct3D 11 fullscreen mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.D3D11FullscreenMode.ExclusiveMode">
      <summary>
        <para>Exclusive mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.D3D11FullscreenMode.FullscreenWindow">
      <summary>
        <para>Fullscreen window.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.D3D9FullscreenMode">
      <summary>
        <para>Direct3D 9 fullscreen mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.D3D9FullscreenMode.ExclusiveMode">
      <summary>
        <para>Exclusive mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.D3D9FullscreenMode.FullscreenWindow">
      <summary>
        <para>Fullscreen window.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.DDSImporter">
      <summary>
        <para>Texture importer lets you modify Texture2D import settings for DDS textures from editor scripts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.DDSImporter.isReadable">
      <summary>
        <para>Is texture data readable from scripts.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.DecoratorDrawer">
      <summary>
        <para>Base class to derive custom decorator drawers from.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.DecoratorDrawer.attribute">
      <summary>
        <para>The PropertyAttribute for the decorator. (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DecoratorDrawer.GetHeight">
      <summary>
        <para>Override this method to specify how tall the GUI for this decorator is in pixels.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DecoratorDrawer.OnGUI(UnityEngine.Rect)">
      <summary>
        <para>Override this method to make your own GUI for the decorator.
See DecoratorDrawer for an example of how to use this.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the decorator GUI.</param>
    </member>
    <member name="T:UnityEditor.DefaultAsset">
      <summary>
        <para>DefaultAsset is used for assets that do not have a specific type (yet).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DefaultAsset.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.DragAndDrop">
      <summary>
        <para>Editor drag &amp; drop operations.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.DragAndDrop.activeControlID">
      <summary>
        <para>Get or set ID of currently active drag and drop control.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.DragAndDrop.objectReferences">
      <summary>
        <para>References to Object|objects being dragged.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.DragAndDrop.paths">
      <summary>
        <para>The file names being dragged.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.DragAndDrop.visualMode">
      <summary>
        <para>The visual indication of the drag.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DragAndDrop.AcceptDrag">
      <summary>
        <para>Accept a drag operation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DragAndDrop.GetGenericData(System.String)">
      <summary>
        <para>Get data associated with current drag and drop operation.</para>
      </summary>
      <param name="type"></param>
    </member>
    <member name="M:UnityEditor.DragAndDrop.PrepareStartDrag">
      <summary>
        <para>Clears drag &amp; drop data.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DragAndDrop.SetGenericData(System.String,System.Object)">
      <summary>
        <para>Set data associated with current drag and drop operation.</para>
      </summary>
      <param name="type"></param>
      <param name="data"></param>
    </member>
    <member name="M:UnityEditor.DragAndDrop.StartDrag(System.String)">
      <summary>
        <para>Start a drag operation.</para>
      </summary>
      <param name="title"></param>
    </member>
    <member name="T:UnityEditor.DragAndDropVisualMode">
      <summary>
        <para>Visual indication mode for Drag &amp; Drop operation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Copy">
      <summary>
        <para>Copy dragged objects.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Generic">
      <summary>
        <para>Generic drag operation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Link">
      <summary>
        <para>Link dragged objects to target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Move">
      <summary>
        <para>Move dragged objects.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.None">
      <summary>
        <para>No indication (drag should not be performed).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Rejected">
      <summary>
        <para>Rejected drag operation.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.DrawCameraMode">
      <summary>
        <para>Drawing modes for Handles.DrawCamera.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Albedo">
      <summary>
        <para>Draw objects with the albedo component only. This value has been deprecated. Please use DrawCameraMode.RealtimeAlbedo.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.AlphaChannel">
      <summary>
        <para>The camera is set to display the alpha channel of the rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Baked">
      <summary>
        <para>Draw objects with baked GI only. This value has been deprecated. Please use DrawCameraMode.BakedLightmap.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.BakedAlbedo">
      <summary>
        <para>Draw objects with the baked albedo component only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.BakedCharting">
      <summary>
        <para>Draw objects with different colors for each baked chart (UV island).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.BakedDirectionality">
      <summary>
        <para>Draw objects with the baked directionality component only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.BakedEmissive">
      <summary>
        <para>Draw objects with the baked emission component only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.BakedIndices">
      <summary>
        <para>Draw objects with baked indices only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.BakedLightmap">
      <summary>
        <para>Draw objects with the baked lightmap only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.BakedTexelValidity">
      <summary>
        <para>Draw objects with baked texel validity only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Charting">
      <summary>
        <para>Draw objects with different colors for each real-time chart (UV island).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Clustering">
      <summary>
        <para>Draw with different colors for each cluster.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.DeferredDiffuse">
      <summary>
        <para>Draw diffuse color of Deferred Shading g-buffer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.DeferredNormal">
      <summary>
        <para>Draw world space normal of Deferred Shading g-buffer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.DeferredSmoothness">
      <summary>
        <para>Draw smoothness value of Deferred Shading g-buffer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.DeferredSpecular">
      <summary>
        <para>Draw specular color of Deferred Shading g-buffer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Directionality">
      <summary>
        <para>Draw objects with directionality for real-time GI. This value has been deprecated. Please use DrawCameraMode.RealtimeDirectionality.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Emissive">
      <summary>
        <para>Draw objects with the emission component only. This value has been deprecated. Please use DrawCameraMode.RealtimeEmissive.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Irradiance">
      <summary>
        <para>Draw objects with real-time GI only. This value has been deprecated. Please use DrawCameraMode.RealtimeIndirect.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.LightOverlap">
      <summary>
        <para>The camera is set to show in red static lights that fall back to 'static' because more than four light volumes are overlapping.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.LitClustering">
      <summary>
        <para>Draw lit clusters.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Mipmaps">
      <summary>
        <para>The camera is set to display the texture resolution, with a red tint indicating resolution that is too high, and a blue tint indicating texture sizes that could be higher.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Normal">
      <summary>
        <para>Draw the camera like it would be drawn in-game. This uses the clear flags of the camera.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Overdraw">
      <summary>
        <para>The camera is set to display Scene overdraw, with brighter colors indicating more overdraw.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.RealtimeAlbedo">
      <summary>
        <para>Draw objects with the real-time GI albedo component only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.RealtimeCharting">
      <summary>
        <para>Draw objects with different colors for each real-time chart (UV island).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.RealtimeDirectionality">
      <summary>
        <para>Draw objects with the real-time GI directionality component only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.RealtimeEmissive">
      <summary>
        <para>Draw objects with the real-time GI emission component only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.RealtimeIndirect">
      <summary>
        <para>Draw objects with the real-time GI indirect light only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.RenderPaths">
      <summary>
        <para>The camera is set to draw color coded render paths.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.ShadowCascades">
      <summary>
        <para>The camera is set to draw directional light shadow map cascades.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.ShadowMasks">
      <summary>
        <para>The camera is set to display colored ShadowMasks, coloring light gizmo with the same color.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Systems">
      <summary>
        <para>Draw objects with different color for each GI system.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Textured">
      <summary>
        <para>Draw the camera textured with selection wireframe and no background clearing.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.TexturedWire">
      <summary>
        <para>Draw the camera where all objects have a wireframe overlay. and no background clearing.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.ValidateAlbedo">
      <summary>
        <para>The camera is set to draw a physically based, albedo validated rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.ValidateMetalSpecular">
      <summary>
        <para>The camera is set to draw a physically based, metal or specular validated rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Wireframe">
      <summary>
        <para>Draw the camera in wireframe and no background clearing.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.DrawGizmo">
      <summary>
        <para>The DrawGizmo attribute allows you to supply a gizmo renderer for any Component.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DrawGizmo.#ctor(UnityEditor.GizmoType)">
      <summary>
        <para>Defines when the gizmo should be invoked for drawing.</para>
      </summary>
      <param name="gizmo">Flags to denote when the gizmo should be drawn.</param>
    </member>
    <member name="M:UnityEditor.DrawGizmo.#ctor(UnityEditor.GizmoType,System.Type)">
      <summary>
        <para>Same as above. drawnGizmoType determines of what type the object we are drawing the gizmo of has to be.</para>
      </summary>
      <param name="gizmo">Flags to denote when the gizmo should be drawn.</param>
      <param name="drawnGizmoType">Type of object for which the gizmo should be drawn.</param>
    </member>
    <member name="T:UnityEditor.Editor">
      <summary>
        <para>Base class to derive custom Editors from. Use this to create your own custom inspectors and editors for your objects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Editor.serializedObject">
      <summary>
        <para>A SerializedObject representing the object or objects being inspected.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Editor.target">
      <summary>
        <para>The object being inspected.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Editor.targets">
      <summary>
        <para>An array of all the object being inspected.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.CreateCachedEditor(UnityEngine.Object,System.Type,UnityEditor.Editor&amp;)">
      <summary>
        <para>On return previousEditor is an editor for targetObject or targetObjects. The function either returns if the editor is already tracking the objects, or Destroys the previous editor and creates a new one.</para>
      </summary>
      <param name="obj">The object the editor is tracking.</param>
      <param name="editorType">The requested editor type. null for the default editor for the object.</param>
      <param name="previousEditor">The previous editor for the object. Once CreateCachedEditor returns previousEditor is an editor for the targetObject or targetObjects.</param>
      <param name="objects">The objects the editor is tracking.</param>
      <param name="targetObject"></param>
      <param name="targetObjects"></param>
    </member>
    <member name="M:UnityEditor.Editor.CreateCachedEditor(UnityEngine.Object[],System.Type,UnityEditor.Editor&amp;)">
      <summary>
        <para>On return previousEditor is an editor for targetObject or targetObjects. The function either returns if the editor is already tracking the objects, or Destroys the previous editor and creates a new one.</para>
      </summary>
      <param name="obj">The object the editor is tracking.</param>
      <param name="editorType">The requested editor type. null for the default editor for the object.</param>
      <param name="previousEditor">The previous editor for the object. Once CreateCachedEditor returns previousEditor is an editor for the targetObject or targetObjects.</param>
      <param name="objects">The objects the editor is tracking.</param>
      <param name="targetObject"></param>
      <param name="targetObjects"></param>
    </member>
    <member name="M:UnityEditor.Editor.CreateCachedEditorWithContext(UnityEngine.Object,UnityEngine.Object,System.Type,UnityEditor.Editor&amp;)">
      <summary>
        <para>Creates a cached editor using a context object.</para>
      </summary>
      <param name="targetObject"></param>
      <param name="context"></param>
      <param name="editorType"></param>
      <param name="previousEditor"></param>
      <param name="targetObjects"></param>
    </member>
    <member name="M:UnityEditor.Editor.CreateCachedEditorWithContext(UnityEngine.Object[],UnityEngine.Object,System.Type,UnityEditor.Editor&amp;)">
      <summary>
        <para>Creates a cached editor using a context object.</para>
      </summary>
      <param name="targetObject"></param>
      <param name="context"></param>
      <param name="editorType"></param>
      <param name="previousEditor"></param>
      <param name="targetObjects"></param>
    </member>
    <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object)">
      <summary>
        <para>Make a custom editor for targetObject or targetObjects.</para>
      </summary>
      <param name="objects">All objects must be of same exact type.</param>
      <param name="targetObject"></param>
      <param name="editorType"></param>
      <param name="targetObjects"></param>
    </member>
    <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object,System.Type)">
      <summary>
        <para>Make a custom editor for targetObject or targetObjects.</para>
      </summary>
      <param name="objects">All objects must be of same exact type.</param>
      <param name="targetObject"></param>
      <param name="editorType"></param>
      <param name="targetObjects"></param>
    </member>
    <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object[])">
      <summary>
        <para>Make a custom editor for targetObject or targetObjects.</para>
      </summary>
      <param name="objects">All objects must be of same exact type.</param>
      <param name="targetObject"></param>
      <param name="editorType"></param>
      <param name="targetObjects"></param>
    </member>
    <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object[],System.Type)">
      <summary>
        <para>Make a custom editor for targetObject or targetObjects.</para>
      </summary>
      <param name="objects">All objects must be of same exact type.</param>
      <param name="targetObject"></param>
      <param name="editorType"></param>
      <param name="targetObjects"></param>
    </member>
    <member name="M:UnityEditor.Editor.CreateEditorWithContext(UnityEngine.Object[],UnityEngine.Object,System.Type)">
      <summary>
        <para>Make a custom editor for targetObject or targetObjects with a context object.</para>
      </summary>
      <param name="targetObjects"></param>
      <param name="context"></param>
      <param name="editorType"></param>
    </member>
    <member name="M:UnityEditor.Editor.DrawDefaultInspector">
      <summary>
        <para>Draw the built-in inspector.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.DrawHeader">
      <summary>
        <para>Call this function to draw the header of the editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.DrawPreview(UnityEngine.Rect)">
      <summary>
        <para>The first entry point for Preview Drawing.</para>
      </summary>
      <param name="previewPosition">The available area to draw the preview.</param>
      <param name="previewArea"></param>
    </member>
    <member name="M:UnityEditor.Editor.GetInfoString">
      <summary>
        <para>Implement this method to show asset information on top of the asset preview.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.GetPreviewTitle">
      <summary>
        <para>Override this method if you want to change the label of the Preview area.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.HasPreviewGUI">
      <summary>
        <para>Override this method in subclasses if you implement OnPreviewGUI.</para>
      </summary>
      <returns>
        <para>True if this component can be Previewed in its current state.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Editor.OnInspectorGUI">
      <summary>
        <para>Implement this function to make a custom inspector.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.OnInteractivePreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Implement to create your own interactive custom preview. Interactive custom previews are used in the preview area of the inspector and the object selector.</para>
      </summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
    </member>
    <member name="M:UnityEditor.Editor.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Implement to create your own custom preview for the preview area of the inspector, primary editor headers and the object selector.</para>
      </summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
    </member>
    <member name="M:UnityEditor.Editor.OnPreviewSettings">
      <summary>
        <para>Override this method if you want to show custom controls in the preview header.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.RenderStaticPreview(System.String,UnityEngine.Object[],System.Int32,System.Int32)">
      <summary>
        <para>Override this method if you want to render a static preview that shows.</para>
      </summary>
      <param name="assetPath"></param>
      <param name="subAssets"></param>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:UnityEditor.Editor.Repaint">
      <summary>
        <para>Repaint any inspectors that shows this editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.RequiresConstantRepaint">
      <summary>
        <para>Does this edit require to be repainted constantly in its current state?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.UseDefaultMargins">
      <summary>
        <para>Override this method in subclasses to return false if you don't want default margins.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorApplication">
      <summary>
        <para>Main Application class.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.applicationContentsPath">
      <summary>
        <para>Path to the Unity editor contents folder. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.applicationPath">
      <summary>
        <para>Returns the path to the Unity editor application. (Read Only)</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.contextualPropertyMenu">
      <summary>
        <para>Callback raised whenever the user contex-clicks on a property in an Inspector.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.currentScene">
      <summary>
        <para>The path of the scene that the user has currently open (Will be an empty string if no scene is currently open). (Read Only)</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.delayCall">
      <summary>
        <para>Delegate which is called once after all inspectors update.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.hierarchyWindowChanged">
      <summary>
        <para>A callback to be raised when an object in the hierarchy changes.

Each time an object is (or a group of objects are) created, renamed, parented, unparented or destroyed this callback is raised.
</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.hierarchyWindowItemOnGUI">
      <summary>
        <para>Delegate for OnGUI events for every visible list item in the HierarchyWindow.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isCompiling">
      <summary>
        <para>Is editor currently compiling scripts? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isPaused">
      <summary>
        <para>Is editor currently paused?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isPlaying">
      <summary>
        <para>Is editor currently in play mode?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isPlayingOrWillChangePlaymode">
      <summary>
        <para>Is editor either currently in play mode, or about to switch to it? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isRemoteConnected">
      <summary>
        <para>Is editor currently connected to Unity Remote 4 client app.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isSceneDirty">
      <summary>
        <para>Is true if the currently open scene in the editor contains unsaved modifications.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isTemporaryProject">
      <summary>
        <para>Returns true if the current project was created as a temporary project.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isUpdating">
      <summary>
        <para>True if the Editor is currently refreshing the AssetDatabase.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.modifierKeysChanged">
      <summary>
        <para>Delegate for changed keyboard modifier keys.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.playmodeStateChanged">
      <summary>
        <para>Delegate for play mode state changes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.projectWindowChanged">
      <summary>
        <para>Callback raised whenever the state of the Project window changes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.projectWindowItemOnGUI">
      <summary>
        <para>Delegate for OnGUI events for every visible list item in the ProjectWindow.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.searchChanged">
      <summary>
        <para>Callback raised whenever the contents of a window's search box are changed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.timeSinceStartup">
      <summary>
        <para>The time since the editor was started. (Read Only)</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.update">
      <summary>
        <para>Delegate for generic updates.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.Beep">
      <summary>
        <para>Plays system beep sound.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorApplication.CallbackFunction">
      <summary>
        <para>Delegate to be called from EditorApplication callbacks.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.DirtyHierarchyWindowSorting">
      <summary>
        <para>Set the hierarchy sorting method as dirty.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.ExecuteMenuItem(System.String)">
      <summary>
        <para>Invokes the menu item in the specified path.</para>
      </summary>
      <param name="menuItemPath"></param>
    </member>
    <member name="M:UnityEditor.EditorApplication.Exit(System.Int32)">
      <summary>
        <para>Exit the Unity editor application.</para>
      </summary>
      <param name="returnValue"></param>
    </member>
    <member name="T:UnityEditor.EditorApplication.HierarchyWindowItemCallback">
      <summary>
        <para>Delegate to be called for every visible list item in the HierarchyWindow on every OnGUI event.</para>
      </summary>
      <param name="instanceID"></param>
      <param name="selectionRect"></param>
    </member>
    <member name="M:UnityEditor.EditorApplication.LoadLevelAdditiveAsyncInPlayMode(System.String)">
      <summary>
        <para>Load the given level additively in play mode asynchronously</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEditor.EditorApplication.LoadLevelAdditiveInPlayMode(System.String)">
      <summary>
        <para>Load the given level additively in play mode.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEditor.EditorApplication.LoadLevelAsyncInPlayMode(System.String)">
      <summary>
        <para>Load the given level in play mode asynchronously.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEditor.EditorApplication.LoadLevelInPlayMode(System.String)">
      <summary>
        <para>Load the given level in play mode.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEditor.EditorApplication.LockReloadAssemblies">
      <summary>
        <para>Prevents loading of assemblies when it is inconvenient.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.MarkSceneDirty">
      <summary>
        <para>Explicitly mark the current opened scene as modified.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.NewEmptyScene">
      <summary>
        <para>Create a new absolutely empty scene.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.NewScene">
      <summary>
        <para>Create a new scene.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.OpenProject(System.String,System.String[])">
      <summary>
        <para>Open another project.</para>
      </summary>
      <param name="projectPath">The path of a project to open.</param>
      <param name="args">Arguments to pass to command line.</param>
    </member>
    <member name="M:UnityEditor.EditorApplication.OpenScene(System.String)">
      <summary>
        <para>Opens the scene at path.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEditor.EditorApplication.OpenSceneAdditive(System.String)">
      <summary>
        <para>Opens the scene at path additively.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="T:UnityEditor.EditorApplication.ProjectWindowItemCallback">
      <summary>
        <para>Delegate to be called for every visible list item in the ProjectWindow on every OnGUI event.</para>
      </summary>
      <param name="guid"></param>
      <param name="selectionRect"></param>
    </member>
    <member name="M:UnityEditor.EditorApplication.RepaintHierarchyWindow">
      <summary>
        <para>Can be used to ensure repaint of the HierarchyWindow.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.RepaintProjectWindow">
      <summary>
        <para>Can be used to ensure repaint of the ProjectWindow.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.SaveAssets">
      <summary>
        <para>Saves all serializable assets that have not yet been written to disk (eg. Materials).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.SaveCurrentSceneIfUserWantsTo">
      <summary>
        <para>Ask the user if they want to save the open scene.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.SaveScene">
      <summary>
        <para>Save the open scene.</para>
      </summary>
      <param name="path">The file path to save at. If empty, the current open scene will be overwritten, or if never saved before, a save dialog is shown.</param>
      <param name="saveAsCopy">If set to true, the scene will be saved without changing the currentScene and without clearing the unsaved changes marker.</param>
      <returns>
        <para>True if the save succeeded, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorApplication.SaveScene(System.String)">
      <summary>
        <para>Save the open scene.</para>
      </summary>
      <param name="path">The file path to save at. If empty, the current open scene will be overwritten, or if never saved before, a save dialog is shown.</param>
      <param name="saveAsCopy">If set to true, the scene will be saved without changing the currentScene and without clearing the unsaved changes marker.</param>
      <returns>
        <para>True if the save succeeded, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorApplication.SaveScene(System.String,System.Boolean)">
      <summary>
        <para>Save the open scene.</para>
      </summary>
      <param name="path">The file path to save at. If empty, the current open scene will be overwritten, or if never saved before, a save dialog is shown.</param>
      <param name="saveAsCopy">If set to true, the scene will be saved without changing the currentScene and without clearing the unsaved changes marker.</param>
      <returns>
        <para>True if the save succeeded, otherwise false.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.EditorApplication.SerializedPropertyCallbackFunction">
      <summary>
        <para>Delegate to be called from EditorApplication contextual inspector callbacks.</para>
      </summary>
      <param name="menu">The contextual menu which is about to be shown to the user.</param>
      <param name="property">The property for which the contextual menu is shown.</param>
    </member>
    <member name="M:UnityEditor.EditorApplication.SetTemporaryProjectKeepPath(System.String)">
      <summary>
        <para>Sets the path that Unity should store the current temporary project at, when the project is closed.</para>
      </summary>
      <param name="path">The path that the current temporary project should be relocated to when closing it.</param>
    </member>
    <member name="M:UnityEditor.EditorApplication.Step">
      <summary>
        <para>Perform a single frame step.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.UnlockReloadAssemblies">
      <summary>
        <para>Must be called after LockReloadAssemblies, to reenable loading of assemblies.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorBuildSettings">
      <summary>
        <para>This class allows you to modify the Editor for an example of how to use this class.

See Also: EditorBuildSettingsScene, EditorBuildSettings.scenes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorBuildSettings.scenes">
      <summary>
        <para>The list of Scenes that should be included in the build.
This is the same list of Scenes that is shown in the window. You can modify this list to set up which Scenes should be included in the build.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorBuildSettingsScene">
      <summary>
        <para>This class is used for entries in the Scenes list, as displayed in the window. This class contains the scene path of a scene and an enabled flag that indicates wether the scene is enabled in the BuildSettings window or not.

You can use this class in combination with EditorBuildSettings.scenes to populate the list of Scenes included in the build via script. This is useful when creating custom editor scripts to automate your build pipeline.

See EditorBuildSettings.scenes for an example script.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorBuildSettingsScene.enabled">
      <summary>
        <para>Whether this scene is enabled in the for an example of how to use this class.

See Also: EditorBuildSettingsScene, EditorBuildSettings.scenes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorBuildSettingsScene.path">
      <summary>
        <para>The file path of the scene as listed in the Editor for an example of how to use this class.

See Also: EditorBuildSettingsScene, EditorBuildSettings.scenes.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorCurveBinding">
      <summary>
        <para>Defines how a curve is attached to an object that it controls.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorCurveBinding.path">
      <summary>
        <para>The transform path of the object that is animated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorCurveBinding.propertyName">
      <summary>
        <para>The property of the object that is animated.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorGUI">
      <summary>
        <para>These work pretty much like the normal GUI functions - and also have matching implementations in EditorGUILayout.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUI.actionKey">
      <summary>
        <para>Is the platform-dependent "action" modifier key held down? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUI.indentLevel">
      <summary>
        <para>The indent level of the field labels.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUI.showMixedValue">
      <summary>
        <para>Makes the following controls give the appearance of editing multiple different values.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.BeginChangeCheck">
      <summary>
        <para>Check if any control was changed inside a block of code.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.BeginDisabledGroup(System.Boolean)">
      <summary>
        <para>Create a group of controls that can be disabled.</para>
      </summary>
      <param name="disabled">Boolean specifying if the controls inside the group should be disabled.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.BeginProperty(UnityEngine.Rect,UnityEngine.GUIContent,UnityEditor.SerializedProperty)">
      <summary>
        <para>Create a Property wrapper, useful for making regular GUI controls work with SerializedProperty.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use for the control, including label if applicable.</param>
      <param name="label">Optional label in front of the slider. Use null to use the name from the SerializedProperty. Use GUIContent.none to not display a label.</param>
      <param name="property">The SerializedProperty to use for the control.</param>
      <returns>
        <para>The actual label to use for the control.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.BoundsField(UnityEngine.Rect,UnityEngine.Bounds)">
      <summary>
        <para>Make Center &amp; Extents field for entering a Bounds.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.BoundsField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Bounds)">
      <summary>
        <para>Make Center &amp; Extents field for entering a Bounds.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.EditorGUI.ChangeCheckScope">
      <summary>
        <para>Check if any control was changed inside a block of code.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUI.ChangeCheckScope.changed">
      <summary>
        <para>True if GUI.changed was set to true, otherwise false.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.ChangeCheckScope.#ctor">
      <summary>
        <para>Begins a ChangeCheckScope.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.ColorField(UnityEngine.Rect,UnityEngine.Color)">
      <summary>
        <para>Make a field for selecting a Color.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <param name="showEyedropper">If true, the color picker should show the eyedropper control. If false, don't show it.</param>
      <param name="showAlpha">If true, allow the user to set an alpha value for the color. If false, hide the alpha component.</param>
      <param name="hdr">If true, treat the color as an HDR value. If false, treat it as a standard LDR value.</param>
      <param name="hdrConfig">An object that sets the presentation parameters for an HDR color. If not using an HDR color, set this to null.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ColorField(UnityEngine.Rect,System.String,UnityEngine.Color)">
      <summary>
        <para>Make a field for selecting a Color.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <param name="showEyedropper">If true, the color picker should show the eyedropper control. If false, don't show it.</param>
      <param name="showAlpha">If true, allow the user to set an alpha value for the color. If false, hide the alpha component.</param>
      <param name="hdr">If true, treat the color as an HDR value. If false, treat it as a standard LDR value.</param>
      <param name="hdrConfig">An object that sets the presentation parameters for an HDR color. If not using an HDR color, set this to null.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ColorField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Color)">
      <summary>
        <para>Make a field for selecting a Color.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <param name="showEyedropper">If true, the color picker should show the eyedropper control. If false, don't show it.</param>
      <param name="showAlpha">If true, allow the user to set an alpha value for the color. If false, hide the alpha component.</param>
      <param name="hdr">If true, treat the color as an HDR value. If false, treat it as a standard LDR value.</param>
      <param name="hdrConfig">An object that sets the presentation parameters for an HDR color. If not using an HDR color, set this to null.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ColorField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Color,System.Boolean,System.Boolean,System.Boolean,UnityEditor.ColorPickerHDRConfig)">
      <summary>
        <para>Make a field for selecting a Color.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <param name="showEyedropper">If true, the color picker should show the eyedropper control. If false, don't show it.</param>
      <param name="showAlpha">If true, allow the user to set an alpha value for the color. If false, hide the alpha component.</param>
      <param name="hdr">If true, treat the color as an HDR value. If false, treat it as a standard LDR value.</param>
      <param name="hdrConfig">An object that sets the presentation parameters for an HDR color. If not using an HDR color, set this to null.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.AnimationCurve)">
      <summary>
        <para>Make a field for editing an AnimationCurve.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,System.String,UnityEngine.AnimationCurve)">
      <summary>
        <para>Make a field for editing an AnimationCurve.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.AnimationCurve)">
      <summary>
        <para>Make a field for editing an AnimationCurve.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Make a field for editing an AnimationCurve.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,System.String,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Make a field for editing an AnimationCurve.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Make a field for editing an AnimationCurve.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Make a field for editing an AnimationCurve.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="property">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="label">Optional label to display in front of the field. Pass [[GUIContent.none] to hide the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Make a field for editing an AnimationCurve.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="property">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="label">Optional label to display in front of the field. Pass [[GUIContent.none] to hide the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedDoubleField(UnityEngine.Rect,System.Double,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedDoubleField(UnityEngine.Rect,System.String,System.Double,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedDoubleField(UnityEngine.Rect,UnityEngine.GUIContent,System.Double,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedDoubleField">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="property">The double property to edit.</param>
      <param name="label">Optional label to display in front of the double field. Pass GUIContent.none to hide label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedFloatField(UnityEngine.Rect,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedFloatField(UnityEngine.Rect,System.String,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedFloatField(UnityEngine.Rect,UnityEngine.GUIContent,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedFloatField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="property">The float property to edit.</param>
      <param name="label">Optional label to display in front of the float field. Pass GUIContent.none to hide label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedIntField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedIntField(UnityEngine.Rect,System.String,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedIntField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedIntField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="property">The int property to edit.</param>
      <param name="label">Optional label to display in front of the int field. Pass GUIContent.none to hide label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedTextField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="text">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedTextField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="text">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedTextField(UnityEngine.Rect,UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a delayed text field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="text">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DelayedTextField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Make a delayed text field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="property">The text property to edit.</param>
      <param name="label">Optional label to display in front of the int field. Pass GUIContent.none to hide label.</param>
    </member>
    <member name="T:UnityEditor.EditorGUI.DisabledGroupScope">
      <summary>
        <para>Create a group of controls that can be disabled.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.DisabledGroupScope.#ctor(System.Boolean)">
      <summary>
        <para>Create a new DisabledGroupScope and begin the corresponding group.</para>
      </summary>
      <param name="disabled">Boolean specifying if the controls inside the group should be disabled.</param>
    </member>
    <member name="T:UnityEditor.EditorGUI.DisabledScope">
      <summary>
        <para>Create a group of controls that can be disabled.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.DisabledScope.#ctor(System.Boolean)">
      <summary>
        <para>Create a new DisabledScope and begin the corresponding group.</para>
      </summary>
      <param name="disabled">Boolean specifying if the controls inside the group should be disabled.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DoubleField(UnityEngine.Rect,System.Double,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering doubles.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DoubleField(UnityEngine.Rect,System.String,System.Double,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering doubles.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DoubleField(UnityEngine.Rect,UnityEngine.GUIContent,System.Double,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering doubles.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Draws the texture within a rectangle.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">Texture to display.</param>
      <param name="mat">Material to be used when drawing the texture.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
      <param name="imageAspect">Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material)">
      <summary>
        <para>Draws the texture within a rectangle.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">Texture to display.</param>
      <param name="mat">Material to be used when drawing the texture.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
      <param name="imageAspect">Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material,UnityEngine.ScaleMode)">
      <summary>
        <para>Draws the texture within a rectangle.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">Texture to display.</param>
      <param name="mat">Material to be used when drawing the texture.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
      <param name="imageAspect">Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material,UnityEngine.ScaleMode,System.Single)">
      <summary>
        <para>Draws the texture within a rectangle.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">Texture to display.</param>
      <param name="mat">Material to be used when drawing the texture.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
      <param name="imageAspect">Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawRect(UnityEngine.Rect,UnityEngine.Color)">
      <summary>
        <para>Draws a filled rectangle of color at the specified position and size within the current editor window.</para>
      </summary>
      <param name="rect">The position and size of the rectangle to draw.</param>
      <param name="color">The color of the rectange.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawTextureAlpha(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Draws the alpha channel of a texture within a rectangle.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">Texture to display.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
      <param name="imageAspect">Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawTextureAlpha(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode)">
      <summary>
        <para>Draws the alpha channel of a texture within a rectangle.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">Texture to display.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
      <param name="imageAspect">Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawTextureAlpha(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode,System.Single)">
      <summary>
        <para>Draws the alpha channel of a texture within a rectangle.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">Texture to display.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
      <param name="imageAspect">Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DropdownButton(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.FocusType)">
      <summary>
        <para>Make a button that reacts to mouse down, for displaying your own dropdown content.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="focusType">Whether the button should be selectable by keyboard or not.</param>
      <param name="style">Optional style to use.</param>
      <returns>
        <para>true when the user clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DropdownButton(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.FocusType,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a button that reacts to mouse down, for displaying your own dropdown content.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="focusType">Whether the button should be selectable by keyboard or not.</param>
      <param name="style">Optional style to use.</param>
      <returns>
        <para>true when the user clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,System.String)">
      <summary>
        <para>Draws a label with a drop shadow.</para>
      </summary>
      <param name="position">Where to show the label.</param>
      <param name="content">Text to show
@style style to use.</param>
      <param name="text"></param>
      <param name="style"></param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Draws a label with a drop shadow.</para>
      </summary>
      <param name="position">Where to show the label.</param>
      <param name="content">Text to show
@style style to use.</param>
      <param name="text"></param>
      <param name="style"></param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Draws a label with a drop shadow.</para>
      </summary>
      <param name="position">Where to show the label.</param>
      <param name="content">Text to show
@style style to use.</param>
      <param name="text"></param>
      <param name="style"></param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Draws a label with a drop shadow.</para>
      </summary>
      <param name="position">Where to show the label.</param>
      <param name="content">Text to show
@style style to use.</param>
      <param name="text"></param>
      <param name="style"></param>
    </member>
    <member name="M:UnityEditor.EditorGUI.EndChangeCheck">
      <summary>
        <para>Ends a change check started with BeginChangeCheck ().</para>
      </summary>
      <returns>
        <para>True if GUI.changed was set to true, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EndDisabledGroup">
      <summary>
        <para>Ends a disabled group started with BeginDisabledGroup.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.EndProperty">
      <summary>
        <para>Ends a Property wrapper started with BeginProperty.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.Enum)">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="label">Caption/label for the control.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.String,System.Enum)">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="label">Caption/label for the control.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum)">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="label">Caption/label for the control.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="label">Caption/label for the control.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.String,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="label">Caption/label for the control.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="label">Caption/label for the control.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField">
      <summary>
        <para>Internal version that also gives you back which flags were changed and what they were changed to.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskPopup(UnityEngine.Rect,System.String,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make an enum popup selection field for a bitmask.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum options the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The enum options that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make an enum popup selection field for a bitmask.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum options the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The enum options that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.Enum)">
      <summary>
        <para>Make an enum popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.String,System.Enum)">
      <summary>
        <para>Make an enum popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum)">
      <summary>
        <para>Make an enum popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make an enum popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.String,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make an enum popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make an enum popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering floats.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.String,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering floats.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,UnityEngine.GUIContent,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering floats.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FocusTextInControl(System.String)">
      <summary>
        <para>Move keyboard focus to a named text field and begin editing of the content.</para>
      </summary>
      <param name="name">Name set using GUI.SetNextControlName.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String,System.Boolean)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)">
      <summary>
        <para>Get the height needed for a PropertyField control.</para>
      </summary>
      <param name="property">Height of the property area.</param>
      <param name="label">Descriptive text or image.</param>
      <param name="includeChildren">Should the returned height include the height of child properties?</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Get the height needed for a PropertyField control.</para>
      </summary>
      <param name="property">Height of the property area.</param>
      <param name="label">Descriptive text or image.</param>
      <param name="includeChildren">Should the returned height include the height of child properties?</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Get the height needed for a PropertyField control.</para>
      </summary>
      <param name="property">Height of the property area.</param>
      <param name="label">Descriptive text or image.</param>
      <param name="includeChildren">Should the returned height include the height of child properties?</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.HandlePrefixLabel(UnityEngine.Rect,UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label for some control.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="labelPosition">Rectangle on the screen to use for the label.</param>
      <param name="label">Label to show for the control.</param>
      <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
      <param name="style">Optional GUIStyle to use for the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.HandlePrefixLabel(UnityEngine.Rect,UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
      <summary>
        <para>Make a label for some control.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="labelPosition">Rectangle on the screen to use for the label.</param>
      <param name="label">Label to show for the control.</param>
      <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
      <param name="style">Optional GUIStyle to use for the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.HandlePrefixLabel(UnityEngine.Rect,UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label for some control.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="labelPosition">Rectangle on the screen to use for the label.</param>
      <param name="label">Label to show for the control.</param>
      <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
      <param name="style">Optional GUIStyle to use for the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.HelpBox(UnityEngine.Rect,System.String,UnityEditor.MessageType)">
      <summary>
        <para>Make a help box with a message to the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the help box within.</param>
      <param name="message">The message text.</param>
      <param name="type">The type of message.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.InspectorTitlebar">
      <summary>
        <para>Make an inspector-window-like titlebar.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the titlebar.</param>
      <param name="foldout">The foldout state shown with the arrow.</param>
      <param name="targetObj">The object (for example a component) that the titlebar is for.</param>
      <param name="targetObjs">The objects that the titlebar is for.</param>
      <param name="expandable">Whether this editor should display a foldout arrow in order to toggle the display of its properties.</param>
      <returns>
        <para>The foldout state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.InspectorTitlebar">
      <summary>
        <para>Make an inspector-window-like titlebar.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the titlebar.</param>
      <param name="foldout">The foldout state shown with the arrow.</param>
      <param name="targetObj">The object (for example a component) that the titlebar is for.</param>
      <param name="targetObjs">The objects that the titlebar is for.</param>
      <param name="expandable">Whether this editor should display a foldout arrow in order to toggle the display of its properties.</param>
      <returns>
        <para>The foldout state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.InspectorTitlebar(UnityEngine.Rect,System.Boolean,UnityEngine.Object,System.Boolean)">
      <summary>
        <para>Make an inspector-window-like titlebar.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the titlebar.</param>
      <param name="foldout">The foldout state shown with the arrow.</param>
      <param name="targetObj">The object (for example a component) that the titlebar is for.</param>
      <param name="targetObjs">The objects that the titlebar is for.</param>
      <param name="expandable">Whether this editor should display a foldout arrow in order to toggle the display of its properties.</param>
      <returns>
        <para>The foldout state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.InspectorTitlebar(UnityEngine.Rect,System.Boolean,UnityEngine.Object[],System.Boolean)">
      <summary>
        <para>Make an inspector-window-like titlebar.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the titlebar.</param>
      <param name="foldout">The foldout state shown with the arrow.</param>
      <param name="targetObj">The object (for example a component) that the titlebar is for.</param>
      <param name="targetObjs">The objects that the titlebar is for.</param>
      <param name="expandable">Whether this editor should display a foldout arrow in order to toggle the display of its properties.</param>
      <returns>
        <para>The foldout state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32)">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.String,System.Int32)">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.String,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,System.String[],System.Int32[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],System.Int32[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.String,System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.String,System.Int32,System.String[],System.Int32[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[])">
      <summary>
        <para></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="property">The SerializedProperty to use for the control.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct   mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="label">Optional label in front of the field.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIContent)">
      <summary>
        <para></para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="property">The SerializedProperty to use for the control.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct   mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="label">Optional label in front of the field.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Int32,System.Int32)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Int32,System.Int32,System.String)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Int32,System.Int32,UnityEngine.GUIContent)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String,System.String)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.Int32)">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.String,System.Int32)">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.String,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LongField(UnityEngine.Rect,System.Int64)">
      <summary>
        <para>Make a text field for entering long integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the long field.</param>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LongField(UnityEngine.Rect,System.String,System.Int64)">
      <summary>
        <para>Make a text field for entering long integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the long field.</param>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LongField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int64)">
      <summary>
        <para>Make a text field for entering long integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the long field.</param>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LongField(UnityEngine.Rect,System.String,System.Int64,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering long integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the long field.</param>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LongField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int64,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering long integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the long field.</param>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.Int32,System.String[])">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Label for the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOption">A string array containing the labels for each flag.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.String,System.Int32,System.String[])">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Label for the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOption">A string array containing the labels for each flag.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.String[])">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Label for the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOption">A string array containing the labels for each flag.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Label for the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOption">A string array containing the labels for each flag.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.String,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Label for the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOption">A string array containing the labels for each flag.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Label for the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOption">A string array containing the labels for each flag.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MinMaxSlider(UnityEngine.GUIContent,UnityEngine.Rect,System.Single&amp;,System.Single&amp;,System.Single,System.Single)">
      <summary>
        <para>Make a special slider the user can use to specify a range between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
      <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
      <param name="minLimit">The limit at the left end of the slider.</param>
      <param name="maxLimit">The limit at the right end of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MinMaxSlider(UnityEngine.Rect,System.Single&amp;,System.Single&amp;,System.Single,System.Single)">
      <summary>
        <para>Make a special slider the user can use to specify a range between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
      <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
      <param name="minLimit">The limit at the left end of the slider.</param>
      <param name="maxLimit">The limit at the right end of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MinMaxSlider(UnityEngine.Rect,System.String,System.Single&amp;,System.Single&amp;,System.Single,System.Single)">
      <summary>
        <para>Make a special slider the user can use to specify a range between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
      <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
      <param name="minLimit">The limit at the left end of the slider.</param>
      <param name="maxLimit">The limit at the right end of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MinMaxSlider(UnityEngine.Rect,UnityEngine.GUIContent,System.Single&amp;,System.Single&amp;,System.Single,System.Single)">
      <summary>
        <para>Make a special slider the user can use to specify a range between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
      <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
      <param name="minLimit">The limit at the left end of the slider.</param>
      <param name="maxLimit">The limit at the right end of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MultiFloatField(UnityEngine.Rect,UnityEngine.GUIContent[],System.Single[])">
      <summary>
        <para>Make a multi-control with text fields for entering multiple floats in the same line.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="subLabels">Array with small labels to show in front of each float field. There is room for one letter per field only.</param>
      <param name="values">Array with the values to edit.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MultiFloatField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIContent[],System.Single[])">
      <summary>
        <para>Make a multi-control with text fields for entering multiple floats in the same line.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="subLabels">Array with small labels to show in front of each float field. There is room for one letter per field only.</param>
      <param name="values">Array with the values to edit.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MultiPropertyField(UnityEngine.Rect,UnityEngine.GUIContent[],UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Make a multi-control with several property fields in the same line.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the multi-property field.</param>
      <param name="valuesIterator">The SerializedProperty of the first property to make a control for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <param name="subLabels">Array with small labels to show in front of each float field. There is room for one letter per field only.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MultiPropertyField(UnityEngine.Rect,UnityEngine.GUIContent[],UnityEditor.SerializedProperty)">
      <summary>
        <para>Make a multi-control with several property fields in the same line.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the multi-property field.</param>
      <param name="valuesIterator">The SerializedProperty of the first property to make a control for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <param name="subLabels">Array with small labels to show in front of each float field. There is room for one letter per field only.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEngine.Object,System.Type)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,System.String,UnityEngine.Object,System.Type)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Object,System.Type)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEngine.Object,System.Type,System.Boolean)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,System.String,UnityEngine.Object,System.Type,System.Boolean)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Object,System.Type,System.Boolean)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEditor.SerializedProperty)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="property">The object reference property the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="label">Optional label to display in front of the field. Pass GUIContent.none to hide the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="property">The object reference property the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="label">Optional label to display in front of the field. Pass GUIContent.none to hide the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Type)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="property">The object reference property the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="label">Optional label to display in front of the field. Pass GUIContent.none to hide the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Type,UnityEngine.GUIContent)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="property">The object reference property the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="label">Optional label to display in front of the field. Pass GUIContent.none to hide the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String,System.String)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,UnityEngine.GUIContent,System.String)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,System.String[])">
      <summary>
        <para>Make a generic popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[])">
      <summary>
        <para>Make a generic popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.String,System.Int32,System.String[])">
      <summary>
        <para>Make a generic popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[])">
      <summary>
        <para>Make a generic popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a generic popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a generic popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.String,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a generic popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a generic popup selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PrefixLabel(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label in front of some control.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
      <param name="label">Label to show in front of the control.</param>
      <param name="style">Style to use for the label.</param>
      <returns>
        <para>Rectangle on the screen to use just for the control itself.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PrefixLabel(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
      <param name="label">Label to show in front of the control.</param>
      <param name="style">Style to use for the label.</param>
      <returns>
        <para>Rectangle on the screen to use just for the control itself.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PrefixLabel(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label in front of some control.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
      <param name="label">Label to show in front of the control.</param>
      <param name="style">Style to use for the label.</param>
      <returns>
        <para>Rectangle on the screen to use just for the control itself.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PrefixLabel(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
      <param name="label">Label to show in front of the control.</param>
      <param name="style">Style to use for the label.</param>
      <returns>
        <para>Rectangle on the screen to use just for the control itself.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ProgressBar(UnityEngine.Rect,System.Single,System.String)">
      <summary>
        <para>Make a progress bar.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the control.</param>
      <param name="value">Value that is shown.</param>
      <param name="position"></param>
      <param name="text"></param>
    </member>
    <member name="M:UnityEditor.EditorGUI.PropertyField(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Boolean)">
      <summary>
        <para>Make a field for SerializedProperty.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the property field.</param>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <param name="includeChildren">If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PropertyField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Make a field for SerializedProperty.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the property field.</param>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <param name="includeChildren">If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.EditorGUI.PropertyScope">
      <summary>
        <para>Create a Property wrapper, useful for making regular GUI controls work with SerializedProperty.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUI.PropertyScope.content">
      <summary>
        <para>The actual label to use for the control.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.PropertyScope.#ctor(UnityEngine.Rect,UnityEngine.GUIContent,UnityEditor.SerializedProperty)">
      <summary>
        <para>Create a new PropertyScope and begin the corresponding property.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use for the control, including label if applicable.</param>
      <param name="label">Label in front of the slider. Use null to use the name from the SerializedProperty. Use GUIContent.none to not display a label.</param>
      <param name="property">The SerializedProperty to use for the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.RectField(UnityEngine.Rect,UnityEngine.Rect)">
      <summary>
        <para>Make an X, Y, W &amp; H field for entering a Rect.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.RectField(UnityEngine.Rect,System.String,UnityEngine.Rect)">
      <summary>
        <para>Make an X, Y, W &amp; H field for entering a Rect.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.RectField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rect)">
      <summary>
        <para>Make an X, Y, W &amp; H field for entering a Rect.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.RectField">
      <summary>
        <para>Make an X, Y, W &amp; H for Rect using SerializedProperty (not public).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.SelectableLabel(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="text">The text to show.</param>
      <param name="style">Optional GUIStyle.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.SelectableLabel(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="text">The text to show.</param>
      <param name="style">Optional GUIStyle.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,System.Single,System.Single,System.Single)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,System.String,System.Single,System.Single,System.Single)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEngine.GUIContent,System.Single,System.Single,System.Single)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single,System.Single)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single,System.Single,System.String)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single,System.Single,UnityEngine.GUIContent)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String,System.String)">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,UnityEngine.GUIContent,System.String)">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextArea(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a text area.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextArea(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text area.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a text field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String,System.String)">
      <summary>
        <para>Make a text field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,UnityEngine.GUIContent,System.String)">
      <summary>
        <para>Make a text field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.Boolean)">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.String,System.Boolean)">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.String,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,System.String,System.Boolean)">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional GUIStyle to use for the label.</param>
      <returns>
        <para>The value set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,System.String,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional GUIStyle to use for the label.</param>
      <returns>
        <para>The value set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional GUIStyle to use for the label.</param>
      <returns>
        <para>The value set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional GUIStyle to use for the label.</param>
      <returns>
        <para>The value set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector2Field(UnityEngine.Rect,System.String,UnityEngine.Vector2)">
      <summary>
        <para>Make an X &amp; Y field for entering a Vector2.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector2Field(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Vector2)">
      <summary>
        <para>Make an X &amp; Y field for entering a Vector2.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector3Field(UnityEngine.Rect,System.String,UnityEngine.Vector3)">
      <summary>
        <para>Make an X, Y &amp; Z field for entering a Vector3.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector3Field(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Vector3)">
      <summary>
        <para>Make an X, Y &amp; Z field for entering a Vector3.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector4Field(UnityEngine.Rect,System.String,UnityEngine.Vector4)">
      <summary>
        <para>Make an X, Y, Z &amp; W field for entering a Vector4.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.EditorGUILayout">
      <summary>
        <para>Auto-layouted version of EditorGUI.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginFadeGroup(System.Single)">
      <summary>
        <para>Begins a group that can be be hidden/shown and the transition will be animated.</para>
      </summary>
      <param name="value">A value between 0 and 1, 0 being hidden, and 1 being fully visible.</param>
      <returns>
        <para>If the group is visible or not.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginHorizontal(UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a horizontal group and get its rect back.</para>
      </summary>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting
        properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginHorizontal(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a horizontal group and get its rect back.</para>
      </summary>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting
        properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginHorizontal">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically layouted scrollview.</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <param name="alwayShowHorizontal">Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.</param>
      <param name="alwayShowVertical">Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.</param>
      <param name="horizontalScrollbar">Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
      <param name="verticalScrollbar">Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.</param>
      <param name="options"></param>
      <param name="alwaysShowHorizontal"></param>
      <param name="alwaysShowVertical"></param>
      <param name="background"></param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically layouted scrollview.</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <param name="alwayShowHorizontal">Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.</param>
      <param name="alwayShowVertical">Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.</param>
      <param name="horizontalScrollbar">Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
      <param name="verticalScrollbar">Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.</param>
      <param name="options"></param>
      <param name="alwaysShowHorizontal"></param>
      <param name="alwaysShowVertical"></param>
      <param name="background"></param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically layouted scrollview.</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <param name="alwayShowHorizontal">Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.</param>
      <param name="alwayShowVertical">Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.</param>
      <param name="horizontalScrollbar">Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
      <param name="verticalScrollbar">Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.</param>
      <param name="options"></param>
      <param name="alwaysShowHorizontal"></param>
      <param name="alwaysShowVertical"></param>
      <param name="background"></param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginScrollView">
      <summary>
        <para>Begin an automatically layouted scrollview.</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <param name="alwayShowHorizontal">Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.</param>
      <param name="alwayShowVertical">Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.</param>
      <param name="horizontalScrollbar">Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
      <param name="verticalScrollbar">Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.</param>
      <param name="options"></param>
      <param name="alwaysShowHorizontal"></param>
      <param name="alwaysShowVertical"></param>
      <param name="background"></param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically layouted scrollview.</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <param name="alwayShowHorizontal">Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.</param>
      <param name="alwayShowVertical">Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.</param>
      <param name="horizontalScrollbar">Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
      <param name="verticalScrollbar">Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.</param>
      <param name="options"></param>
      <param name="alwaysShowHorizontal"></param>
      <param name="alwaysShowVertical"></param>
      <param name="background"></param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginToggleGroup(System.String,System.Boolean)">
      <summary>
        <para>Begin a vertical group with a toggle to enable or disable all the controls within at once.</para>
      </summary>
      <param name="label">Label to show above the toggled controls.</param>
      <param name="toggle">Enabled state of the toggle group.</param>
      <returns>
        <para>The enabled state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginToggleGroup(UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Begin a vertical group with a toggle to enable or disable all the controls within at once.</para>
      </summary>
      <param name="label">Label to show above the toggled controls.</param>
      <param name="toggle">Enabled state of the toggle group.</param>
      <returns>
        <para>The enabled state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginVertical(UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a vertical group and get its rect back.</para>
      </summary>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties.
        Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginVertical(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a vertical group and get its rect back.</para>
      </summary>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties.
        Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginVertical">
      <summary>
        <para>Begin a vertical group and get its rect back.</para>
      </summary>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties.
        Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginVertical">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BoundsField(UnityEngine.Bounds,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make Center &amp; Extents field for entering a Bounds.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BoundsField(System.String,UnityEngine.Bounds,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make Center &amp; Extents field for entering a Bounds.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BoundsField(UnityEngine.GUIContent,UnityEngine.Bounds,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make Center &amp; Extents field for entering a Bounds.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ColorField(UnityEngine.Color,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for selecting a Color.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <param name="showEyedropper">If true, the color picker should show the eyedropper control. If false, don't show it.</param>
      <param name="showAlpha">If true, allow the user to set an alpha value for the color. If false, hide the alpha component.</param>
      <param name="hdr">If true, treat the color as an HDR value. If false, treat it as a standard LDR value.</param>
      <param name="hdrConfig">An object that sets the presentation parameters for an HDR color. If not using an HDR color, set this to null.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ColorField(System.String,UnityEngine.Color,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for selecting a Color.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <param name="showEyedropper">If true, the color picker should show the eyedropper control. If false, don't show it.</param>
      <param name="showAlpha">If true, allow the user to set an alpha value for the color. If false, hide the alpha component.</param>
      <param name="hdr">If true, treat the color as an HDR value. If false, treat it as a standard LDR value.</param>
      <param name="hdrConfig">An object that sets the presentation parameters for an HDR color. If not using an HDR color, set this to null.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ColorField(UnityEngine.GUIContent,UnityEngine.Color,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for selecting a Color.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <param name="showEyedropper">If true, the color picker should show the eyedropper control. If false, don't show it.</param>
      <param name="showAlpha">If true, allow the user to set an alpha value for the color. If false, hide the alpha component.</param>
      <param name="hdr">If true, treat the color as an HDR value. If false, treat it as a standard LDR value.</param>
      <param name="hdrConfig">An object that sets the presentation parameters for an HDR color. If not using an HDR color, set this to null.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ColorField(UnityEngine.GUIContent,UnityEngine.Color,System.Boolean,System.Boolean,System.Boolean,UnityEditor.ColorPickerHDRConfig,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for selecting a Color.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <param name="showEyedropper">If true, the color picker should show the eyedropper control. If false, don't show it.</param>
      <param name="showAlpha">If true, allow the user to set an alpha value for the color. If false, hide the alpha component.</param>
      <param name="hdr">If true, treat the color as an HDR value. If false, treat it as a standard LDR value.</param>
      <param name="hdrConfig">An object that sets the presentation parameters for an HDR color. If not using an HDR color, set this to null.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.AnimationCurve,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an AnimationCurve.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(System.String,UnityEngine.AnimationCurve,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an AnimationCurve.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.GUIContent,UnityEngine.AnimationCurve,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an AnimationCurve.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an AnimationCurve.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(System.String,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an AnimationCurve.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.GUIContent,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an AnimationCurve.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an AnimationCurve.</para>
      </summary>
      <param name="property">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="label">Optional label to display in front of the field. Pass [[GUIContent.none] to hide the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an AnimationCurve.</para>
      </summary>
      <param name="property">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="label">Optional label to display in front of the field. Pass [[GUIContent.none] to hide the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedDoubleField(System.Double,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">
          An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
          See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
          GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
        </param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedDoubleField(System.Double,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">
          An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
          See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
          GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
        </param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedDoubleField(System.String,System.Double,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">
          An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
          See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
          GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
        </param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedDoubleField(System.String,System.Double,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">
          An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
          See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
          GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
        </param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedDoubleField(UnityEngine.GUIContent,System.Double,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">
          An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
          See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
          GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
        </param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedDoubleField(UnityEngine.GUIContent,System.Double,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">
          An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
          See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
          GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
        </param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedDoubleField">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
      </summary>
      <param name="property">The double property to edit.</param>
      <param name="label">Optional label to display in front of the double field. Pass GUIContent.none to hide label.</param>
      <param name="options">
          An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
          See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
          GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
        </param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedDoubleField">
      <summary>
        <para>Make a delayed text field for entering doubles.</para>
      </summary>
      <param name="property">The double property to edit.</param>
      <param name="label">Optional label to display in front of the double field. Pass GUIContent.none to hide label.</param>
      <param name="options">
          An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
          See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
          GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
        </param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedFloatField(System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedFloatField(System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedFloatField(System.String,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedFloatField(System.String,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedFloatField(UnityEngine.GUIContent,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedFloatField(UnityEngine.GUIContent,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedFloatField(UnityEditor.SerializedProperty,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
      </summary>
      <param name="property">The float property to edit.</param>
      <param name="label">Optional label to display in front of the float field. Pass GUIContent.none to hide label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedFloatField(UnityEditor.SerializedProperty,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering floats.</para>
      </summary>
      <param name="property">The float property to edit.</param>
      <param name="label">Optional label to display in front of the float field. Pass GUIContent.none to hide label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedIntField(System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedIntField(System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedIntField(System.String,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedIntField(System.String,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedIntField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedIntField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedIntField(UnityEditor.SerializedProperty,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
      </summary>
      <param name="property">The int property to edit.</param>
      <param name="label">Optional label to display in front of the int field. Pass GUIContent.none to hide label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedIntField(UnityEditor.SerializedProperty,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field for entering integers.</para>
      </summary>
      <param name="property">The int property to edit.</param>
      <param name="label">Optional label to display in front of the int field. Pass GUIContent.none to hide label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedTextField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedTextField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedTextField(System.String,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedTextField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedTextField(UnityEngine.GUIContent,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedTextField(UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedTextField(UnityEditor.SerializedProperty,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field.</para>
      </summary>
      <param name="property">The text property to edit.</param>
      <param name="label">Optional label to display in front of the int field. Pass GUIContent.none to hide label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DelayedTextField(UnityEditor.SerializedProperty,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a delayed text field.</para>
      </summary>
      <param name="property">The text property to edit.</param>
      <param name="label">Optional label to display in front of the int field. Pass GUIContent.none to hide label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DoubleField(System.Double,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering double values.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DoubleField(System.Double,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering double values.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DoubleField(System.String,System.Double,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering double values.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DoubleField(System.String,System.Double,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering double values.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DoubleField(UnityEngine.GUIContent,System.Double,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering double values.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DoubleField(UnityEngine.GUIContent,System.Double,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering double values.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DropdownButton(UnityEngine.GUIContent,UnityEngine.FocusType,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a button that reacts to mouse down, for displaying your own dropdown content.</para>
      </summary>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="focusType">Whether the button should be selectable by keyboard or not.</param>
      <param name="style">Optional style to use.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>true when the user clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DropdownButton(UnityEngine.GUIContent,UnityEngine.FocusType,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a button that reacts to mouse down, for displaying your own dropdown content.</para>
      </summary>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="focusType">Whether the button should be selectable by keyboard or not.</param>
      <param name="style">Optional style to use.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>true when the user clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndFadeGroup">
      <summary>
        <para>Closes a group started with BeginFadeGroup.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndHorizontal">
      <summary>
        <para>Close a group started with BeginHorizontal.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndScrollView">
      <summary>
        <para>Ends a scrollview started with a call to BeginScrollView.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndToggleGroup">
      <summary>
        <para>Close a group started with BeginToggleGroup.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndVertical">
      <summary>
        <para>Close a group started with BeginVertical.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="label">Prefix label for this field.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="style"></param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.String,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="label">Prefix label for this field.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="style"></param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(UnityEngine.GUIContent,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="label">Prefix label for this field.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="style"></param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.String,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="label">Prefix label for this field.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="style"></param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="label">Prefix label for this field.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="style"></param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="label">Prefix label for this field.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="style"></param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskPopup(System.String,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field for a bitmask.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum options the field shows.</param>
      <param name="options">Optional layout options.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The enum options that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskPopup(System.String,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field for a bitmask.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum options the field shows.</param>
      <param name="options">Optional layout options.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The enum options that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskPopup(UnityEngine.GUIContent,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field for a bitmask.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum options the field shows.</param>
      <param name="options">Optional layout options.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The enum options that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskPopup(UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field for a bitmask.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum options the field shows.</param>
      <param name="options">Optional layout options.</param>
      <param name="style">Optional GUIStyle.</param>
      <returns>
        <para>The enum options that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.String,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.String,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(UnityEngine.GUIContent,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.EditorGUILayout.FadeGroupScope">
      <summary>
        <para>Begins a group that can be be hidden/shown and the transition will be animated.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUILayout.FadeGroupScope.visible">
      <summary>
        <para>Whether the group is visible.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FadeGroupScope.#ctor(System.Single)">
      <summary>
        <para>Create a new FadeGroupScope and begin the corresponding group.</para>
      </summary>
      <param name="value">A value between 0 and 1, 0 being hidden, and 1 being fully visible.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering float values.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering float values.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(System.String,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering float values.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(System.String,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering float values.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(UnityEngine.GUIContent,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering float values.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(UnityEngine.GUIContent,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering float values.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,System.String)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="toggleOnLabelClick">Whether to toggle the foldout state when the label is clicked.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,System.String,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="toggleOnLabelClick">Whether to toggle the foldout state when the label is clicked.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="toggleOnLabelClick">Whether to toggle the foldout state when the label is clicked.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="toggleOnLabelClick">Whether to toggle the foldout state when the label is clicked.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="toggleOnLabelClick">Whether to toggle the foldout state when the label is clicked.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="toggleOnLabelClick">Whether to toggle the foldout state when the label is clicked.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.GetControlRect(UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Get a rect for an Editor control.</para>
      </summary>
      <param name="hasLabel">Optional boolean to specify if the control has a label. Default is true.</param>
      <param name="height">The height in pixels of the control. Default is EditorGUIUtility.singleLineHeight.</param>
      <param name="style">Optional GUIStyle to use for the control.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.GetControlRect(System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Get a rect for an Editor control.</para>
      </summary>
      <param name="hasLabel">Optional boolean to specify if the control has a label. Default is true.</param>
      <param name="height">The height in pixels of the control. Default is EditorGUIUtility.singleLineHeight.</param>
      <param name="style">Optional GUIStyle to use for the control.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.GetControlRect(System.Boolean,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Get a rect for an Editor control.</para>
      </summary>
      <param name="hasLabel">Optional boolean to specify if the control has a label. Default is true.</param>
      <param name="height">The height in pixels of the control. Default is EditorGUIUtility.singleLineHeight.</param>
      <param name="style">Optional GUIStyle to use for the control.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.GetControlRect(System.Boolean,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Get a rect for an Editor control.</para>
      </summary>
      <param name="hasLabel">Optional boolean to specify if the control has a label. Default is true.</param>
      <param name="height">The height in pixels of the control. Default is EditorGUIUtility.singleLineHeight.</param>
      <param name="style">Optional GUIStyle to use for the control.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.HelpBox(System.String,UnityEditor.MessageType)">
      <summary>
        <para>Make a help box with a message to the user.</para>
      </summary>
      <param name="message">The message text.</param>
      <param name="type">The type of message.</param>
      <param name="wide">If true, the box will cover the whole width of the window; otherwise it will cover the controls part only.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.HelpBox(System.String,UnityEditor.MessageType,System.Boolean)">
      <summary>
        <para>Make a help box with a message to the user.</para>
      </summary>
      <param name="message">The message text.</param>
      <param name="type">The type of message.</param>
      <param name="wide">If true, the box will cover the whole width of the window; otherwise it will cover the controls part only.</param>
    </member>
    <member name="T:UnityEditor.EditorGUILayout.HorizontalScope">
      <summary>
        <para>Disposable helper class for managing BeginHorizontal / EndHorizontal.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUILayout.HorizontalScope.rect">
      <summary>
        <para>The rect of the horizontal group.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.HorizontalScope.#ctor(UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Create a new HorizontalScope and begin the corresponding horizontal group.</para>
      </summary>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.HorizontalScope.#ctor(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Create a new HorizontalScope and begin the corresponding horizontal group.</para>
      </summary>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.InspectorTitlebar(System.Boolean,UnityEngine.Object)">
      <summary>
        <para>Make an inspector-window-like titlebar.</para>
      </summary>
      <param name="foldout">The foldout state shown with the arrow.</param>
      <param name="targetObj">The object (for example a component) or objects that the titlebar is for.</param>
      <param name="targetObjs"></param>
      <returns>
        <para>The foldout state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.InspectorTitlebar(System.Boolean,UnityEngine.Object[])">
      <summary>
        <para>Make an inspector-window-like titlebar.</para>
      </summary>
      <param name="foldout">The foldout state shown with the arrow.</param>
      <param name="targetObj">The object (for example a component) or objects that the titlebar is for.</param>
      <param name="targetObjs"></param>
      <returns>
        <para>The foldout state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(System.String,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(System.String,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,System.String[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.String,System.Int32,System.String[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.String,System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="property">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="style"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="property">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="style"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="property">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="style"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(System.Int32,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(System.String,System.Int32,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEngine.GUIContent,System.Int32,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEditor.SerializedProperty,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEditor.SerializedProperty,System.Int32,System.Int32,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEditor.SerializedProperty,System.Int32,System.Int32,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="style"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="style"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="style"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="style"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="style"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="style"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="style"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="style"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(System.String,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(System.String,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LongField(System.Int64,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering long integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LongField(System.Int64,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering long integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LongField(System.String,System.Int64,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering long integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LongField(System.String,System.Int64,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering long integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LongField(UnityEngine.GUIContent,System.Int64,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering long integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LongField(UnityEngine.GUIContent,System.Int64,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering long integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(UnityEngine.GUIContent,System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="label">Prefix label of the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOption">A string array containing the labels for each flag.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="displayedOptions"></param>
      <param name="style"></param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(System.String,System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="label">Prefix label of the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOption">A string array containing the labels for each flag.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="displayedOptions"></param>
      <param name="style"></param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(UnityEngine.GUIContent,System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="label">Prefix label of the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOption">A string array containing the labels for each flag.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="displayedOptions"></param>
      <param name="style"></param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(System.String,System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="label">Prefix label of the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOption">A string array containing the labels for each flag.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="displayedOptions"></param>
      <param name="style"></param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="label">Prefix label of the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOption">A string array containing the labels for each flag.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="displayedOptions"></param>
      <param name="style"></param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="label">Prefix label of the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOption">A string array containing the labels for each flag.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <param name="displayedOptions"></param>
      <param name="style"></param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MinMaxSlider(System.Single&amp;,System.Single&amp;,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a special slider the user can use to specify a range between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
      <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
      <param name="minLimit">The limit at the left end of the slider.</param>
      <param name="maxLimit">The limit at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MinMaxSlider(System.String,System.Single&amp;,System.Single&amp;,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a special slider the user can use to specify a range between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
      <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
      <param name="minLimit">The limit at the left end of the slider.</param>
      <param name="maxLimit">The limit at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MinMaxSlider(UnityEngine.GUIContent,System.Single&amp;,System.Single&amp;,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a special slider the user can use to specify a range between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
      <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
      <param name="minLimit">The limit at the left end of the slider.</param>
      <param name="maxLimit">The limit at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEngine.Object,System.Type,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(System.String,UnityEngine.Object,System.Type,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEngine.GUIContent,UnityEngine.Object,System.Type,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEditor.SerializedProperty,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
      </summary>
      <param name="property">The object reference property the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="label">Optional label in front of the field. Pass GUIContent.none to hide the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting
        properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEditor.SerializedProperty,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
      </summary>
      <param name="property">The object reference property the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="label">Optional label in front of the field. Pass GUIContent.none to hide the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting
        properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEditor.SerializedProperty,System.Type,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
      </summary>
      <param name="property">The object reference property the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="label">Optional label in front of the field. Pass GUIContent.none to hide the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting
        properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEditor.SerializedProperty,System.Type,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
      </summary>
      <param name="property">The object reference property the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="label">Optional label in front of the field. Pass GUIContent.none to hide the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting
        properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEngine.Object,System.Type,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
      </summary>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(System.String,UnityEngine.Object,System.Type,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
      </summary>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEngine.GUIContent,UnityEngine.Object,System.Type,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
      </summary>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
      </summary>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
      </summary>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
      </summary>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
      </summary>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(UnityEngine.GUIContent,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
      </summary>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
      </summary>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,UnityEngine.GUIContent[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.String,System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.String,System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(System.String)">
      <summary>
        <para>Make a label in front of some control.</para>
      </summary>
      <param name="label">Label to show to the left of the control.</param>
      <param name="followingStyle"></param>
      <param name="labelStyle"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(UnityEngine.GUIContent)">
      <summary>
        <para>Make a label in front of some control.</para>
      </summary>
      <param name="label">Label to show to the left of the control.</param>
      <param name="followingStyle"></param>
      <param name="labelStyle"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
      </summary>
      <param name="label">Label to show to the left of the control.</param>
      <param name="followingStyle"></param>
      <param name="labelStyle"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(System.String,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
      </summary>
      <param name="label">Label to show to the left of the control.</param>
      <param name="followingStyle"></param>
      <param name="labelStyle"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
      </summary>
      <param name="label">Label to show to the left of the control.</param>
      <param name="followingStyle"></param>
      <param name="labelStyle"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
      </summary>
      <param name="label">Label to show to the left of the control.</param>
      <param name="followingStyle"></param>
      <param name="labelStyle"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for SerializedProperty.</para>
      </summary>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <param name="includeChildren">If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for SerializedProperty.</para>
      </summary>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <param name="includeChildren">If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for SerializedProperty.</para>
      </summary>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <param name="includeChildren">If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for SerializedProperty.</para>
      </summary>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <param name="includeChildren">If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.RectField(UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y, W &amp; H field for entering a Rect.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.RectField(System.String,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y, W &amp; H field for entering a Rect.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.RectField(UnityEngine.GUIContent,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y, W &amp; H field for entering a Rect.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.EditorGUILayout.ScrollViewScope">
      <summary>
        <para>Disposable helper class for managing BeginScrollView / EndScrollView.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUILayout.ScrollViewScope.handleScrollWheel">
      <summary>
        <para>Whether this ScrollView should handle scroll wheel events. (default: true).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUILayout.ScrollViewScope.scrollPosition">
      <summary>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ScrollViewScope.#ctor(UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Create a new ScrollViewScope and begin the corresponding ScrollView.</para>
      </summary>
      <param name="scrollPosition">The scroll position to use.</param>
      <param name="alwaysShowHorizontal">Whether to always show the horizontal scrollbar. If false, it is only shown when the content inside the ScrollView is wider than the scrollview itself.</param>
      <param name="alwaysShowVertical">Whether to always show the vertical scrollbar. If false, it is only shown when the content inside the ScrollView is higher than the scrollview itself.</param>
      <param name="horizontalScrollbar">Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
      <param name="verticalScrollbar">Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.</param>
      <param name="options"></param>
      <param name="style"></param>
      <param name="background"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ScrollViewScope.#ctor(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Create a new ScrollViewScope and begin the corresponding ScrollView.</para>
      </summary>
      <param name="scrollPosition">The scroll position to use.</param>
      <param name="alwaysShowHorizontal">Whether to always show the horizontal scrollbar. If false, it is only shown when the content inside the ScrollView is wider than the scrollview itself.</param>
      <param name="alwaysShowVertical">Whether to always show the vertical scrollbar. If false, it is only shown when the content inside the ScrollView is higher than the scrollview itself.</param>
      <param name="horizontalScrollbar">Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
      <param name="verticalScrollbar">Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.</param>
      <param name="options"></param>
      <param name="style"></param>
      <param name="background"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ScrollViewScope.#ctor(UnityEngine.Vector2,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Create a new ScrollViewScope and begin the corresponding ScrollView.</para>
      </summary>
      <param name="scrollPosition">The scroll position to use.</param>
      <param name="alwaysShowHorizontal">Whether to always show the horizontal scrollbar. If false, it is only shown when the content inside the ScrollView is wider than the scrollview itself.</param>
      <param name="alwaysShowVertical">Whether to always show the vertical scrollbar. If false, it is only shown when the content inside the ScrollView is higher than the scrollview itself.</param>
      <param name="horizontalScrollbar">Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
      <param name="verticalScrollbar">Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.</param>
      <param name="options"></param>
      <param name="style"></param>
      <param name="background"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ScrollViewScope.#ctor(UnityEngine.Vector2,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Create a new ScrollViewScope and begin the corresponding ScrollView.</para>
      </summary>
      <param name="scrollPosition">The scroll position to use.</param>
      <param name="alwaysShowHorizontal">Whether to always show the horizontal scrollbar. If false, it is only shown when the content inside the ScrollView is wider than the scrollview itself.</param>
      <param name="alwaysShowVertical">Whether to always show the vertical scrollbar. If false, it is only shown when the content inside the ScrollView is higher than the scrollview itself.</param>
      <param name="horizontalScrollbar">Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
      <param name="verticalScrollbar">Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.</param>
      <param name="options"></param>
      <param name="style"></param>
      <param name="background"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ScrollViewScope.#ctor(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Create a new ScrollViewScope and begin the corresponding ScrollView.</para>
      </summary>
      <param name="scrollPosition">The scroll position to use.</param>
      <param name="alwaysShowHorizontal">Whether to always show the horizontal scrollbar. If false, it is only shown when the content inside the ScrollView is wider than the scrollview itself.</param>
      <param name="alwaysShowVertical">Whether to always show the vertical scrollbar. If false, it is only shown when the content inside the ScrollView is higher than the scrollview itself.</param>
      <param name="horizontalScrollbar">Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.</param>
      <param name="verticalScrollbar">Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.</param>
      <param name="options"></param>
      <param name="style"></param>
      <param name="background"></param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.SelectableLabel(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</para>
      </summary>
      <param name="text">The text to show.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.SelectableLabel(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</para>
      </summary>
      <param name="text">The text to show.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(System.String,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEngine.GUIContent,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEditor.SerializedProperty,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEditor.SerializedProperty,System.Single,System.Single,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEditor.SerializedProperty,System.Single,System.Single,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Space">
      <summary>
        <para>Make a small space between the previous control and the following.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(UnityEngine.GUIContent,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextArea(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text area.</para>
      </summary>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextArea(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text area.</para>
      </summary>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
      </summary>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
      </summary>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
      </summary>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
      </summary>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(UnityEngine.GUIContent,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
      </summary>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
      </summary>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting
        properties. Any values passed in here will override settings defined by the style.&lt;br&gt;

See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(System.String,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting
        properties. Any values passed in here will override settings defined by the style.&lt;br&gt;

See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting
        properties. Any values passed in here will override settings defined by the style.&lt;br&gt;

See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting
        properties. Any values passed in here will override settings defined by the style.&lt;br&gt;

See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(System.String,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting
        properties. Any values passed in here will override settings defined by the style.&lt;br&gt;

See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional GUIStyle.</param>
      <param name="options">An optional list of layout options that specify extra layouting
        properties. Any values passed in here will override settings defined by the style.&lt;br&gt;

See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.EditorGUILayout.ToggleGroupScope">
      <summary>
        <para>Begin a vertical group with a toggle to enable or disable all the controls within at once.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUILayout.ToggleGroupScope.enabled">
      <summary>
        <para>The enabled state selected by the user.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ToggleGroupScope.#ctor(System.String,System.Boolean)">
      <summary>
        <para></para>
      </summary>
      <param name="label">Label to show above the toggled controls.</param>
      <param name="toggle">Enabled state of the toggle group.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ToggleGroupScope.#ctor(UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para></para>
      </summary>
      <param name="label">Label to show above the toggled controls.</param>
      <param name="toggle">Enabled state of the toggle group.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(System.String,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
      </summary>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional GUIStyle to use for the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
      </summary>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional GUIStyle to use for the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(System.String,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
      </summary>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional GUIStyle to use for the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
      </summary>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional GUIStyle to use for the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector2Field(System.String,UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X &amp; Y field for entering a Vector2.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector2Field(UnityEngine.GUIContent,UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X &amp; Y field for entering a Vector2.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector3Field(System.String,UnityEngine.Vector3,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y &amp; Z field for entering a Vector3.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting
        properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector3Field(UnityEngine.GUIContent,UnityEngine.Vector3,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y &amp; Z field for entering a Vector3.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting
        properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector4Field(System.String,UnityEngine.Vector4,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y, Z &amp; W field for entering a Vector4.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.EditorGUILayout.VerticalScope">
      <summary>
        <para>Disposable helper class for managing BeginVertical / EndVertical.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUILayout.VerticalScope.rect">
      <summary>
        <para>The rect of the vertical group.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.VerticalScope.#ctor(UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Create a new VerticalScope and begin the corresponding vertical group.</para>
      </summary>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.VerticalScope.#ctor(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Create a new VerticalScope and begin the corresponding vertical group.</para>
      </summary>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.&lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
    </member>
    <member name="T:UnityEditor.EditorGUIUtility">
      <summary>
        <para>Miscellaneous helper stuff for EditorGUI.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.currentViewWidth">
      <summary>
        <para>The width of the GUI area for the current EditorWindow or other view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.editingTextField">
      <summary>
        <para>Is a text field currently editing text?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.fieldWidth">
      <summary>
        <para>The minimum width in pixels reserved for the fields of Editor GUI controls.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.hierarchyMode">
      <summary>
        <para>Is the Editor GUI is hierarchy mode?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.isProSkin">
      <summary>
        <para>Is the user currently using the pro skin? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.labelWidth">
      <summary>
        <para>The width in pixels reserved for labels of Editor GUI controls.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.pixelsPerPoint">
      <summary>
        <para>The scale of GUI points relative to screen pixels for the current view

This value is the number of screen pixels per point of interface space. For instance, 2.0 on retina displays. Note that the value may differ from one view to the next if the views are on monitors with different UI scales.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.singleLineHeight">
      <summary>
        <para>Get the height used for a single Editor control such as a one-line EditorGUI.TextField or EditorGUI.Popup.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.standardVerticalSpacing">
      <summary>
        <para>Get the height used by default for vertical spacing between controls.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.systemCopyBuffer">
      <summary>
        <para>The system copy buffer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.whiteTexture">
      <summary>
        <para>Get a white texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.wideMode">
      <summary>
        <para>Is the Editor GUI currently in wide mode?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.AddCursorRect(UnityEngine.Rect,UnityEditor.MouseCursor)">
      <summary>
        <para>Add a custom mouse pointer to a control.</para>
      </summary>
      <param name="position">The rectangle the control should be shown within.</param>
      <param name="mouse">The mouse cursor to use.</param>
      <param name="controlID">ID of a target control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.AddCursorRect(UnityEngine.Rect,UnityEditor.MouseCursor,System.Int32)">
      <summary>
        <para>Add a custom mouse pointer to a control.</para>
      </summary>
      <param name="position">The rectangle the control should be shown within.</param>
      <param name="mouse">The mouse cursor to use.</param>
      <param name="controlID">ID of a target control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.CommandEvent(System.String)">
      <summary>
        <para>Creates an event that can be sent to another window.</para>
      </summary>
      <param name="commandName">The command to be sent.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawColorSwatch(UnityEngine.Rect,UnityEngine.Color)">
      <summary>
        <para>Draw a color swatch.</para>
      </summary>
      <param name="position">The rectangle to draw the color swatch within.</param>
      <param name="color">The color to draw.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawCurveSwatch(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Color)">
      <summary>
        <para>Draw a curve swatch.</para>
      </summary>
      <param name="position">The rectangle to draw the color swatch within.</param>
      <param name="curve">The curve to draw.</param>
      <param name="property">The curve to draw as a SerializedProperty.</param>
      <param name="color">The color to draw the curve with.</param>
      <param name="bgColor">The color to draw the background with.</param>
      <param name="curveRanges">Optional parameter to specify the range of the curve which should be included in swatch.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawCurveSwatch(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Draw a curve swatch.</para>
      </summary>
      <param name="position">The rectangle to draw the color swatch within.</param>
      <param name="curve">The curve to draw.</param>
      <param name="property">The curve to draw as a SerializedProperty.</param>
      <param name="color">The color to draw the curve with.</param>
      <param name="bgColor">The color to draw the background with.</param>
      <param name="curveRanges">Optional parameter to specify the range of the curve which should be included in swatch.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawRegionSwatch(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Draw swatch with a filled region between two SerializedProperty curves.</para>
      </summary>
      <param name="position"></param>
      <param name="property"></param>
      <param name="property2"></param>
      <param name="color"></param>
      <param name="bgColor"></param>
      <param name="curveRanges"></param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawRegionSwatch(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Draw swatch with a filled region between two curves.</para>
      </summary>
      <param name="position"></param>
      <param name="curve"></param>
      <param name="curve2"></param>
      <param name="color"></param>
      <param name="bgColor"></param>
      <param name="curveRanges"></param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.FindTexture(System.String)">
      <summary>
        <para>Get a texture from its source filename.</para>
      </summary>
      <param name="name"></param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.GetBuiltinSkin(UnityEditor.EditorSkin)">
      <summary>
        <para>Get one of the built-in GUI skins, which can be the game view, inspector or scene view skin as chosen by the parameter.</para>
      </summary>
      <param name="skin"></param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.GetFlowLayoutedRects(UnityEngine.Rect,UnityEngine.GUIStyle,System.Single,System.Single,System.Collections.Generic.List`1&lt;System.String&gt;)">
      <summary>
        <para>Layout list of string items left to right, top to bottom in the given area.</para>
      </summary>
      <param name="rect">Area where to layout the items.</param>
      <param name="style">Style for the items.</param>
      <param name="horizontalSpacing">Extra horizontal spacing between successive items.</param>
      <param name="verticalSpacing">Extra vertical spacing between item rows.</param>
      <param name="items">Strings to layout.</param>
      <returns>
        <para>List of rectangles for the passed items.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.GetIconSize">
      <summary>
        <para>Get the size that has been set using SetIconSize.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.GetObjectPickerControlID">
      <summary>
        <para>The controlID of the currently showing object picker.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.GetObjectPickerObject">
      <summary>
        <para>The object currently selected in the object picker.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.HasObjectThumbnail(System.Type)">
      <summary>
        <para>Does a given class have per-object thumbnails?</para>
      </summary>
      <param name="objType"></param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.IconContent(System.String)">
      <summary>
        <para>Fetch the GUIContent from the Unity builtin resources with the given name.</para>
      </summary>
      <param name="name">Name of the desired icon.</param>
      <param name="text">Tooltip for hovering over the icon.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.IconContent(System.String,System.String)">
      <summary>
        <para>Fetch the GUIContent from the Unity builtin resources with the given name.</para>
      </summary>
      <param name="name">Name of the desired icon.</param>
      <param name="text">Tooltip for hovering over the icon.</param>
    </member>
    <member name="T:UnityEditor.EditorGUIUtility.IconSizeScope">
      <summary>
        <para>Disposable scope helper for GetIconSize / SetIconSize.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.IconSizeScope.#ctor(UnityEngine.Vector2)">
      <summary>
        <para>Begin an IconSizeScope.</para>
      </summary>
      <param name="iconSizeWithinScope">Size to be used for icons rendered as GUIContent within this scope.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.IsDisplayReferencedByCameras(System.Int32)">
      <summary>
        <para>Check if any enabled camera can render to a particular display.</para>
      </summary>
      <param name="displayIndex">Display index.</param>
      <returns>
        <para>True if a camera will render to the display.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.Load(System.String)">
      <summary>
        <para>Load a built-in resource.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.LoadRequired(System.String)">
      <summary>
        <para>Load a required built-in resource.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.LookLikeControls()">
      <summary>
        <para>Make all EditorGUI look like regular controls.</para>
      </summary>
      <param name="labelWidth">Width to use for prefixed labels.</param>
      <param name="fieldWidth">Width of text entries.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.LookLikeControls(System.Single)">
      <summary>
        <para>Make all EditorGUI look like regular controls.</para>
      </summary>
      <param name="labelWidth">Width to use for prefixed labels.</param>
      <param name="fieldWidth">Width of text entries.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.LookLikeControls(System.Single,System.Single)">
      <summary>
        <para>Make all EditorGUI look like regular controls.</para>
      </summary>
      <param name="labelWidth">Width to use for prefixed labels.</param>
      <param name="fieldWidth">Width of text entries.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.LookLikeInspector">
      <summary>
        <para>Make all EditorGUI look like simplified outline view controls.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.ObjectContent(UnityEngine.Object,System.Type)">
      <summary>
        <para>Return a GUIContent object with the name and icon of an Object.</para>
      </summary>
      <param name="obj"></param>
      <param name="type"></param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.PingObject(UnityEngine.Object)">
      <summary>
        <para>Ping an object in the Scene like clicking it in an inspector.</para>
      </summary>
      <param name="obj">The object to be pinged.</param>
      <param name="targetInstanceID"></param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.PingObject(System.Int32)">
      <summary>
        <para>Ping an object in the Scene like clicking it in an inspector.</para>
      </summary>
      <param name="obj">The object to be pinged.</param>
      <param name="targetInstanceID"></param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.PixelsToPoints(UnityEngine.Vector2)">
      <summary>
        <para>Convert a position from pixel to point space.</para>
      </summary>
      <param name="position">A GUI position in pixel space.</param>
      <returns>
        <para>A vector representing the same position in point space.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.PixelsToPoints(UnityEngine.Rect)">
      <summary>
        <para>Convert a Rect from pixel space to point space.</para>
      </summary>
      <param name="rect">A GUI rect measured in pixels.</param>
      <returns>
        <para>A rect representing the same area in points.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.PointsToPixels(UnityEngine.Vector2)">
      <summary>
        <para>Convert a Rect from point space to pixel space.</para>
      </summary>
      <param name="position">A GUI rect measured in points.</param>
      <returns>
        <para>A rect representing the same area in pixels.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.PointsToPixels(UnityEngine.Rect)">
      <summary>
        <para>Converts a position from point to pixel space.</para>
      </summary>
      <param name="rect">A GUI position in point space.</param>
      <returns>
        <para>The same position in pixel space.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.QueueGameViewInputEvent(UnityEngine.Event)">
      <summary>
        <para>Send an input event into the game.</para>
      </summary>
      <param name="evt"></param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.RenderGameViewCameras(UnityEngine.Rect,System.Boolean,System.Boolean)">
      <summary>
        <para>Render all ingame cameras.</para>
      </summary>
      <param name="cameraRect">The device coordinates to render all game cameras into.</param>
      <param name="gizmos">Show gizmos as well.</param>
      <param name="gui"></param>
      <param name="statsRect"></param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.RenderGameViewCameras(UnityEngine.Rect,UnityEngine.Rect,System.Boolean,System.Boolean)">
      <summary>
        <para>Render all ingame cameras.</para>
      </summary>
      <param name="cameraRect">The device coordinates to render all game cameras into.</param>
      <param name="gizmos">Show gizmos as well.</param>
      <param name="gui"></param>
      <param name="statsRect"></param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.SetIconSize(UnityEngine.Vector2)">
      <summary>
        <para>Set icons rendered as part of GUIContent to be rendered at a specific size.</para>
      </summary>
      <param name="size"></param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.ShowObjectPicker(UnityEngine.Object,System.Boolean,System.String,System.Int32)">
      <summary>
        <para>Show the object picker from code.</para>
      </summary>
      <param name="obj">The object to be selected by default.</param>
      <param name="allowSceneObjects">Is selection of scene objects allowed, or should it only show assets.</param>
      <param name="searchFilter">Default search filter to apply.</param>
      <param name="controlID">The id of the control to set. This is useful if you are showing more than one of these. You can get the value at a later time.</param>
    </member>
    <member name="T:UnityEditor.EditorJsonUtility">
      <summary>
        <para>Utility functions for working with JSON data and engine objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorJsonUtility.FromJsonOverwrite(System.String,System.Object)">
      <summary>
        <para>Overwrite data in an object by reading from its JSON representation.</para>
      </summary>
      <param name="json">The JSON representation of the object.</param>
      <param name="objectToOverwrite">The object to overwrite.</param>
    </member>
    <member name="M:UnityEditor.EditorJsonUtility.ToJson(System.Object)">
      <summary>
        <para>Generate a JSON representation of an object.</para>
      </summary>
      <param name="obj">The object to convert to JSON form.</param>
      <param name="prettyPrint">If true, format the output for readability. If false, format the output for minimum size. Default is false.</param>
      <returns>
        <para>The object's data in JSON format.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorJsonUtility.ToJson(System.Object,System.Boolean)">
      <summary>
        <para>Generate a JSON representation of an object.</para>
      </summary>
      <param name="obj">The object to convert to JSON form.</param>
      <param name="prettyPrint">If true, format the output for readability. If false, format the output for minimum size. Default is false.</param>
      <returns>
        <para>The object's data in JSON format.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.EditorPrefs">
      <summary>
        <para>Stores and accesses Unity editor preferences.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.DeleteAll">
      <summary>
        <para>Removes all keys and values from the preferences. Use with caution.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.DeleteKey(System.String)">
      <summary>
        <para>Removes key and its corresponding value from the preferences.</para>
      </summary>
      <param name="key"></param>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetBool(System.String)">
      <summary>
        <para>Returns the value corresponding to key in the preference file if it exists.</para>
      </summary>
      <param name="key"></param>
      <param name="defaultValue"></param>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetBool(System.String,System.Boolean)">
      <summary>
        <para>Returns the value corresponding to key in the preference file if it exists.</para>
      </summary>
      <param name="key"></param>
      <param name="defaultValue"></param>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetFloat(System.String)">
      <summary>
        <para>Returns the float value corresponding to key if it exists in the preference file.</para>
      </summary>
      <param name="key">Name of key to read float from.</param>
      <param name="defaultValue">Float value to return if the key is not in the storage.</param>
      <returns>
        <para>The float value stored in the preference file or the defaultValue id the
        requested float does not exist.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetFloat(System.String,System.Single)">
      <summary>
        <para>Returns the float value corresponding to key if it exists in the preference file.</para>
      </summary>
      <param name="key">Name of key to read float from.</param>
      <param name="defaultValue">Float value to return if the key is not in the storage.</param>
      <returns>
        <para>The float value stored in the preference file or the defaultValue id the
        requested float does not exist.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetInt(System.String)">
      <summary>
        <para>Returns the value corresponding to key in the preference file if it exists.</para>
      </summary>
      <param name="key">Name of key to read integer from.</param>
      <param name="defaultValue">Integer value to return if the key is not in the storage.</param>
      <returns>
        <para>The value stored in the preference file.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetInt(System.String,System.Int32)">
      <summary>
        <para>Returns the value corresponding to key in the preference file if it exists.</para>
      </summary>
      <param name="key">Name of key to read integer from.</param>
      <param name="defaultValue">Integer value to return if the key is not in the storage.</param>
      <returns>
        <para>The value stored in the preference file.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetString(System.String)">
      <summary>
        <para>Returns the value corresponding to key in the preference file if it exists.</para>
      </summary>
      <param name="key"></param>
      <param name="defaultValue"></param>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetString(System.String,System.String)">
      <summary>
        <para>Returns the value corresponding to key in the preference file if it exists.</para>
      </summary>
      <param name="key"></param>
      <param name="defaultValue"></param>
    </member>
    <member name="M:UnityEditor.EditorPrefs.HasKey(System.String)">
      <summary>
        <para>Returns true if key exists in the preferences file.</para>
      </summary>
      <param name="key">Name of key to check for.</param>
      <returns>
        <para>The existence or not of the key.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorPrefs.SetBool(System.String,System.Boolean)">
      <summary>
        <para>Sets the value of the preference identified by key.</para>
      </summary>
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEditor.EditorPrefs.SetFloat(System.String,System.Single)">
      <summary>
        <para>Sets the float value of the preference identified by key.</para>
      </summary>
      <param name="key">Name of key to write float into.</param>
      <param name="value">Float value to write into the storage.</param>
    </member>
    <member name="M:UnityEditor.EditorPrefs.SetInt(System.String,System.Int32)">
      <summary>
        <para>Sets the value of the preference identified by key as an integer.</para>
      </summary>
      <param name="key">Name of key to write integer to.</param>
      <param name="value">Value of the integer to write into the storage.</param>
    </member>
    <member name="M:UnityEditor.EditorPrefs.SetString(System.String,System.String)">
      <summary>
        <para>Sets the value of the preference identified by key. Note that EditorPrefs does not support null strings and will store an empty string instead.</para>
      </summary>
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="T:UnityEditor.EditorSelectedRenderState">
      <summary>
        <para>The editor selected render mode for Scene View selection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorSelectedRenderState.Hidden">
      <summary>
        <para>The Renderer has no selection highlight or wireframe in the Editor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorSelectedRenderState.Highlight">
      <summary>
        <para>The Renderer has selection highlight but no wireframe in the Editor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorSelectedRenderState.Wireframe">
      <summary>
        <para>The Renderer has wireframe but not selection highlight in the Editor.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorSkin">
      <summary>
        <para>Enum that selects which skin to return from EditorGUIUtility.GetBuiltinSkin.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorSkin.Game">
      <summary>
        <para>The skin used for game views.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorSkin.Inspector">
      <summary>
        <para>The skin used for inspectors.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorSkin.Scene">
      <summary>
        <para>The skin used for scene views.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorStyles">
      <summary>
        <para>Common GUIStyles used for EditorGUI controls.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.boldFont">
      <summary>
        <para>Bold font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.boldLabel">
      <summary>
        <para>Style for bold label.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.centeredGreyMiniLabel">
      <summary>
        <para>Style for label with small font which is centered and grey.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.colorField">
      <summary>
        <para>Style used for headings for Color fields.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.foldout">
      <summary>
        <para>Style used for headings for EditorGUI.Foldout.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.foldoutPreDrop">
      <summary>
        <para>Style used for headings for EditorGUI.Foldout.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.helpBox">
      <summary>
        <para>Style used for background box for EditorGUI.HelpBox.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.inspectorDefaultMargins">
      <summary>
        <para>Wrap content in a vertical group with this style to get the default margins used in the Inspector.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.inspectorFullWidthMargins">
      <summary>
        <para>Wrap content in a vertical group with this style to get full width margins in the Inspector.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.label">
      <summary>
        <para>Style used for the labelled on all EditorGUI overloads that take a prefix label.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.largeLabel">
      <summary>
        <para>Style for label with large font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.layerMaskField">
      <summary>
        <para>Style used for headings for Layer masks.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniBoldFont">
      <summary>
        <para>Mini Bold font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniBoldLabel">
      <summary>
        <para>Style for mini bold label.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniButton">
      <summary>
        <para>Style used for a standalone small button.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniButtonLeft">
      <summary>
        <para>Style used for the leftmost button in a horizontal button group.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniButtonMid">
      <summary>
        <para>Style used for the middle buttons in a horizontal group.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniButtonRight">
      <summary>
        <para>Style used for the rightmost button in a horizontal group.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniFont">
      <summary>
        <para>Mini font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniLabel">
      <summary>
        <para>Style for label with small font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniTextField">
      <summary>
        <para>Smaller text field.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.numberField">
      <summary>
        <para>Style used for field editors for numbers.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.objectField">
      <summary>
        <para>Style used for headings for object fields.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.objectFieldMiniThumb">
      <summary>
        <para>Style used for object fields that have a thumbnail (e.g Textures). </para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.objectFieldThumb">
      <summary>
        <para>Style used for headings for the Select button in object fields.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.popup">
      <summary>
        <para>Style used for EditorGUI.Popup, EditorGUI.EnumPopup,.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.radioButton">
      <summary>
        <para>Style used for a radio button.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.standardFont">
      <summary>
        <para>Standard font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.textArea">
      <summary>
        <para>Style used for EditorGUI.TextArea.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.textField">
      <summary>
        <para>Style used for EditorGUI.TextField.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toggle">
      <summary>
        <para>Style used for headings for EditorGUI.Toggle.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toggleGroup">
      <summary>
        <para>Style used for headings for EditorGUILayout.BeginToggleGroup.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbar">
      <summary>
        <para>Toolbar background from top of windows.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbarButton">
      <summary>
        <para>Style for Button and Toggles in toolbars.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbarDropDown">
      <summary>
        <para>Toolbar Dropdown.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbarPopup">
      <summary>
        <para>Toolbar Popup.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbarTextField">
      <summary>
        <para>Toolbar text field.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.whiteBoldLabel">
      <summary>
        <para>Style for white bold label.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.whiteLabel">
      <summary>
        <para>Style for white label.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.whiteLargeLabel">
      <summary>
        <para>Style for white large label.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.whiteMiniLabel">
      <summary>
        <para>Style for white mini label.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.wordWrappedLabel">
      <summary>
        <para>Style for word wrapped label.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.wordWrappedMiniLabel">
      <summary>
        <para>Style for word wrapped mini label.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorUserBuildSettings">
      <summary>
        <para>User build settings for the Editor</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.activeBuildTarget">
      <summary>
        <para>The currently active build target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorUserBuildSettings.activeBuildTargetChanged">
      <summary>
        <para>Triggered in response to SwitchActiveBuildTarget.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.activeScriptCompilationDefines">
      <summary>
        <para>DEFINE directives for the compiler.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.allowDebugging">
      <summary>
        <para>Enable source-level debuggers to connect.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.androidBuildSubtarget">
      <summary>
        <para>Android platform options.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.androidBuildSystem">
      <summary>
        <para>Set which build system to use for building the Android package.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.buildScriptsOnly">
      <summary>
        <para>Is build script only enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.compressFilesInPackage">
      <summary>
        <para>Compress files in package.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.compressWithPsArc">
      <summary>
        <para>Build data compressed with PSArc.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.connectProfiler">
      <summary>
        <para>Start the player with a connection to the profiler.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.development">
      <summary>
        <para>Enables a development build.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.enableHeadlessMode">
      <summary>
        <para>Enables a Linux headless build.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.explicitDivideByZeroChecks">
      <summary>
        <para>Are divide by zero's actively checked?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.explicitNullChecks">
      <summary>
        <para>Are null references actively checked?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.exportAsGoogleAndroidProject">
      <summary>
        <para>Export Android Project for use with Android StudioGradle or EclipseADT.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.forceInstallation">
      <summary>
        <para>Force installation of package, even if error.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.forceOptimizeScriptCompilation">
      <summary>
        <para>Force full optimizations for script complilation in Development builds.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.installInBuildFolder">
      <summary>
        <para>Place the built player in the build folder.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.iOSBuildConfigType">
      <summary>
        <para>Scheme with which the project will be run in Xcode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.n3dsCreateCIAFile">
      <summary>
        <para>Create a .cia "download image" for deploying to test kits (3DS).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.needSubmissionMaterials">
      <summary>
        <para>Build submission materials.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.ps4BuildSubtarget">
      <summary>
        <para>PS4 Build Subtarget.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.ps4HardwareTarget">
      <summary>
        <para>Specifies which version of PS4 hardware to target.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.psmBuildSubtarget">
      <summary>
        <para>PSM Build Subtarget.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.psp2BuildSubtarget">
      <summary>
        <para>PS Vita Build subtarget.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.selectedBuildTargetGroup">
      <summary>
        <para>The currently selected build target group.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.selectedStandaloneTarget">
      <summary>
        <para>The currently selected target for a standalone build.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.streamingInstallLaunchRange">
      <summary>
        <para>When building an Xbox One Streaming Install package (makepkg.exe) The layout generation code in Unity will assign each scene and associated assets to individual chunks. Unity will mark scene 0 as being part of the launch range, IE the set of chunks required to launch the game, you may include additional scenes in this launch range if you desire, this specifies a range of scenes (starting at 0) to be included in the launch set. </para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.symlinkLibraries">
      <summary>
        <para>Symlink runtime libraries with an iOS Xcode project.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.tizenBuildSubtarget">
      <summary>
        <para>The texture compression type to be used when building.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.webGLUsePreBuiltUnityEngine">
      <summary>
        <para>Use prebuilt JavaScript version of Unity engine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.webPlayerOfflineDeployment">
      <summary>
        <para>Build the webplayer along with the UnityObject.js file (so it doesn't need to be downloaded).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.webPlayerStreamed">
      <summary>
        <para>Select the streaming option for a webplayer build.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.wiiUBootMode">
      <summary>
        <para>Boot mode of a devkit.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.wiiUBuildDebugLevel">
      <summary>
        <para>Wii U player debug level.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.wiiuBuildOutput">
      <summary>
        <para>Built player postprocessing options.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.wiiUEnableNetAPI">
      <summary>
        <para>Enable network API.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.wsaGenerateReferenceProjects">
      <summary>
        <para>Generate and reference C# projects from your main solution.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.wsaSDK">
      <summary>
        <para>Target Windows SDK.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.wsaSubtarget">
      <summary>
        <para>Sets and gets target device type for the application to run on when building to Windows Store platform.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.wsaUWPSDK">
      <summary>
        <para>Sets and gets target UWP SDK to build Windows Store application against.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.xboxBuildSubtarget">
      <summary>
        <para>Xbox Build subtarget.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.xboxOneDeployMethod">
      <summary>
        <para>The currently selected Xbox One Deploy Method.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.xboxOneNetworkSharePath">
      <summary>
        <para>Network shared folder path e.g.
MYCOMPUTER\SHAREDFOLDER\.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.xboxOneUsername">
      <summary>
        <para>Windows account username associated with PC share folder.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUserBuildSettings.GetBuildLocation(UnityEditor.BuildTarget)">
      <summary>
        <para>Get the current location for the build.</para>
      </summary>
      <param name="target"></param>
    </member>
    <member name="M:UnityEditor.EditorUserBuildSettings.GetPlatformSettings(System.String,System.String)">
      <summary>
        <para>Returns value for platform specifc Editor setting.</para>
      </summary>
      <param name="platformName">The name of the platform.</param>
      <param name="name">The name of the setting.</param>
    </member>
    <member name="M:UnityEditor.EditorUserBuildSettings.GetWSADotNetNative(UnityEditor.WSABuildType)">
      <summary>
        <para>Is .NET Native enabled for specific build configuration.
More information - https:msdn.microsoft.comen-uslibrary/dn584397(v=vs.110).aspx.</para>
      </summary>
      <param name="config">Build configuration.</param>
      <returns>
        <para>True if .NET Native is enabled for the specific build configuration.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorUserBuildSettings.SetBuildLocation(UnityEditor.BuildTarget,System.String)">
      <summary>
        <para>Set a new location for the build.</para>
      </summary>
      <param name="target"></param>
      <param name="location"></param>
    </member>
    <member name="M:UnityEditor.EditorUserBuildSettings.SetPlatformSettings(System.String,System.String,System.String)">
      <summary>
        <para>Set platform specifc Editor setting.</para>
      </summary>
      <param name="platformName">The name of the platform.</param>
      <param name="name">The name of the setting.</param>
      <param name="value">Setting value.</param>
    </member>
    <member name="M:UnityEditor.EditorUserBuildSettings.SetWSADotNetNative(UnityEditor.WSABuildType,System.Boolean)">
      <summary>
        <para>Enables or Disables .NET Native for specific build configuration.
More information - https:msdn.microsoft.comen-uslibrary/dn584397(v=vs.110).aspx.</para>
      </summary>
      <param name="config">Build configuration.</param>
      <param name="enabled">Is enabled?</param>
    </member>
    <member name="M:UnityEditor.EditorUserBuildSettings.SwitchActiveBuildTarget(UnityEditor.BuildTarget)">
      <summary>
        <para>Select a new build target to be active.</para>
      </summary>
      <param name="target">Target build platform.</param>
      <param name="targetGroup">Build target group.</param>
      <returns>
        <para>True if the build target was successfully switched, false otherwise (for example, if license checks fail, files are missing, or if the user has cancelled the operation via the UI).</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorUserBuildSettings.SwitchActiveBuildTarget(UnityEditor.BuildTargetGroup,UnityEditor.BuildTarget)">
      <summary>
        <para>Select a new build target to be active.</para>
      </summary>
      <param name="target">Target build platform.</param>
      <param name="targetGroup">Build target group.</param>
      <returns>
        <para>True if the build target was successfully switched, false otherwise (for example, if license checks fail, files are missing, or if the user has cancelled the operation via the UI).</para>
      </returns>
    </member>
    <member name="T:UnityEditor.EditorUtility">
      <summary>
        <para>Editor utility functions.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUtility.scriptCompilationFailed">
      <summary>
        <para>True if there are any compilation error messages in the log.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.ClearProgressBar">
      <summary>
        <para>Removes progress bar.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.CollectDeepHierarchy(UnityEngine.Object[])">
      <summary>
        <para>Collect all objects in the hierarchy rooted at each of the given objects.</para>
      </summary>
      <param name="roots">Array of objects where the search will start.</param>
      <returns>
        <para>Array of objects heirarchically attached to the search array.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorUtility.CollectDependencies(UnityEngine.Object[])">
      <summary>
        <para>Calculates and returns a list of all assets the assets listed in roots depend on.</para>
      </summary>
      <param name="roots"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.CompressCubemapTexture(UnityEngine.Cubemap,UnityEngine.TextureFormat,System.Int32)">
      <summary>
        <para>Compress a cubemap texture.</para>
      </summary>
      <param name="texture"></param>
      <param name="format"></param>
      <param name="quality"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.CompressCubemapTexture(UnityEngine.Cubemap,UnityEngine.TextureFormat,UnityEngine.TextureCompressionQuality)">
      <summary>
        <para>Compress a cubemap texture.</para>
      </summary>
      <param name="texture"></param>
      <param name="format"></param>
      <param name="quality"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.CompressTexture(UnityEngine.Texture2D,UnityEngine.TextureFormat,System.Int32)">
      <summary>
        <para>Compress a texture.</para>
      </summary>
      <param name="texture"></param>
      <param name="format"></param>
      <param name="quality"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.CompressTexture(UnityEngine.Texture2D,UnityEngine.TextureFormat,UnityEngine.TextureCompressionQuality)">
      <summary>
        <para>Compress a texture.</para>
      </summary>
      <param name="texture"></param>
      <param name="format"></param>
      <param name="quality"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.CopySerialized(UnityEngine.Object,UnityEngine.Object)">
      <summary>
        <para>Copy all settings of a Unity Object.</para>
      </summary>
      <param name="source"></param>
      <param name="dest"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.CopySerializedIfDifferent(UnityEngine.Object,UnityEngine.Object)">
      <summary>
        <para>Copy all settings of a Unity Object to a second Object if they differ.</para>
      </summary>
      <param name="source"></param>
      <param name="dest"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.CreateGameObjectWithHideFlags(System.String,UnityEngine.HideFlags,System.Type[])">
      <summary>
        <para>Creates a game object with HideFlags and specified components.</para>
      </summary>
      <param name="name"></param>
      <param name="flags"></param>
      <param name="components"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayCancelableProgressBar(System.String,System.String,System.Single)">
      <summary>
        <para>Displays or updates a progress bar that has a cancel button.</para>
      </summary>
      <param name="title"></param>
      <param name="info"></param>
      <param name="progress"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayDialog(System.String,System.String,System.String)">
      <summary>
        <para>Displays a modal dialog.</para>
      </summary>
      <param name="title">The title of the message box.</param>
      <param name="message">The text of the message.</param>
      <param name="ok">Label displayed on the OK dialog button.</param>
      <param name="cancel">Label displayed on the Cancel dialog button.</param>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayDialog(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Displays a modal dialog.</para>
      </summary>
      <param name="title">The title of the message box.</param>
      <param name="message">The text of the message.</param>
      <param name="ok">Label displayed on the OK dialog button.</param>
      <param name="cancel">Label displayed on the Cancel dialog button.</param>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayDialogComplex(System.String,System.String,System.String,System.String,System.String)">
      <summary>
        <para>Displays a modal dialog with three buttons.</para>
      </summary>
      <param name="title">Title for dialog.</param>
      <param name="message">Purpose for the dialog.</param>
      <param name="ok">Dialog function chosen.</param>
      <param name="alt">Choose alternative dialog purpose.</param>
      <param name="cancel">Close dialog with no operation.</param>
      <returns>
        <para>The id of the chosen button.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayPopupMenu(UnityEngine.Rect,System.String,UnityEditor.MenuCommand)">
      <summary>
        <para>Displays a popup menu.</para>
      </summary>
      <param name="position"></param>
      <param name="menuItemPath"></param>
      <param name="command"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayProgressBar(System.String,System.String,System.Single)">
      <summary>
        <para>Displays or updates a progress bar.</para>
      </summary>
      <param name="title"></param>
      <param name="info"></param>
      <param name="progress"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.ExtractOggFile(UnityEngine.Object,System.String)">
      <summary>
        <para>Saves an AudioClip or MovieTexture to a file.</para>
      </summary>
      <param name="obj"></param>
      <param name="path"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.FocusProjectWindow">
      <summary>
        <para>Brings the project window to the front and focuses it.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.FormatBytes(System.Int32)">
      <summary>
        <para>Returns a text for a number of bytes.</para>
      </summary>
      <param name="bytes"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.GetObjectEnabled(UnityEngine.Object)">
      <summary>
        <para>Is the object enabled (0 disabled, 1 enabled, -1 has no enabled button).</para>
      </summary>
      <param name="target"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.InstanceIDToObject(System.Int32)">
      <summary>
        <para>Translates an instance ID to a reference to an object.</para>
      </summary>
      <param name="instanceID"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.IsPersistent(UnityEngine.Object)">
      <summary>
        <para>Determines if an object is stored on disk.</para>
      </summary>
      <param name="target"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.NaturalCompare(System.String,System.String)">
      <summary>
        <para>Human-like sorting.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.OpenFilePanel(System.String,System.String,System.String)">
      <summary>
        <para>Displays the "open file" dialog and returns the selected path name.</para>
      </summary>
      <param name="title"></param>
      <param name="directory"></param>
      <param name="extension"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.OpenFilePanelWithFilters(System.String,System.String,System.String[])">
      <summary>
        <para>Displays the "open file" dialog and returns the selected path name.</para>
      </summary>
      <param name="title">Title for dialog.</param>
      <param name="directory">Default directory.</param>
      <param name="filters">File extensions in form { "Image files", "png,jpg,jpeg", "All files", "*" }.</param>
    </member>
    <member name="M:UnityEditor.EditorUtility.OpenFolderPanel(System.String,System.String,System.String)">
      <summary>
        <para>Displays the "open folder" dialog and returns the selected path name.</para>
      </summary>
      <param name="title"></param>
      <param name="folder"></param>
      <param name="defaultName"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.SaveFilePanel(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Displays the "save file" dialog and returns the selected path name.</para>
      </summary>
      <param name="title"></param>
      <param name="directory"></param>
      <param name="defaultName"></param>
      <param name="extension"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.SaveFilePanelInProject(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Displays the "save file" dialog in the Assets folder of the project and returns the selected path name.</para>
      </summary>
      <param name="title"></param>
      <param name="defaultName"></param>
      <param name="extension"></param>
      <param name="message"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.SaveFolderPanel(System.String,System.String,System.String)">
      <summary>
        <para>Displays the "save folder" dialog and returns the selected path name.</para>
      </summary>
      <param name="title"></param>
      <param name="folder"></param>
      <param name="defaultName"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.SetDirty(UnityEngine.Object)">
      <summary>
        <para>Marks target object as dirty. (Only suitable for non-scene objects).</para>
      </summary>
      <param name="target">The object to mark as dirty.</param>
    </member>
    <member name="M:UnityEditor.EditorUtility.SetObjectEnabled(UnityEngine.Object,System.Boolean)">
      <summary>
        <para>Set the enabled state of the object.</para>
      </summary>
      <param name="target"></param>
      <param name="enabled"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.SetSelectedRenderState(UnityEngine.Renderer,UnityEditor.EditorSelectedRenderState)">
      <summary>
        <para>Set the Scene View selected display mode for this Renderer.</para>
      </summary>
      <param name="renderer"></param>
      <param name="renderState"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.SetSelectedWireframeHidden(UnityEngine.Renderer,System.Boolean)">
      <summary>
        <para>Sets whether the selected Renderer's wireframe will be hidden when the GameObject it is attached to is selected.</para>
      </summary>
      <param name="renderer"></param>
      <param name="enabled"></param>
    </member>
    <member name="M:UnityEditor.EditorUtility.UnloadUnusedAssetsImmediate">
      <summary>
        <para>Unloads assets that are not used.</para>
      </summary>
      <param name="ignoreReferencesFromScript">When true delete assets even if linked in scripts.</param>
    </member>
    <member name="M:UnityEditor.EditorUtility.UnloadUnusedAssetsImmediate">
      <summary>
        <para>Unloads assets that are not used.</para>
      </summary>
      <param name="ignoreReferencesFromScript">When true delete assets even if linked in scripts.</param>
    </member>
    <member name="T:UnityEditor.EditorWindow">
      <summary>
        <para>Derive from this class to create an editor window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.autoRepaintOnSceneChange">
      <summary>
        <para>Does the window automatically repaint whenever the scene has changed?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.focusedWindow">
      <summary>
        <para>The EditorWindow which currently has keyboard focus. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.maximized">
      <summary>
        <para>Is this window maximized.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.maxSize">
      <summary>
        <para>The maximum size of this window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.minSize">
      <summary>
        <para>The minimum size of this window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.mouseOverWindow">
      <summary>
        <para>The EditorWindow currently under the mouse cursor. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.position">
      <summary>
        <para>The position of the window in screen space.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.title">
      <summary>
        <para>The title of this window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.titleContent">
      <summary>
        <para>The GUIContent used for drawing the title of EditorWindows.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.wantsMouseEnterLeaveWindow">
      <summary>
        <para>Checks whether MouseEnterWindow and MouseLeaveWindow events are received in the GUI in this Editor window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.wantsMouseMove">
      <summary>
        <para>Checks whether MouseMove events are received in the GUI in this Editor window.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.BeginWindows">
      <summary>
        <para>Mark the beginning area of all popup windows.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.Close">
      <summary>
        <para>Close the editor window.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.EndWindows">
      <summary>
        <para>Close a window group started with EditorWindow.BeginWindows.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.Focus">
      <summary>
        <para>Moves keyboard focus to this EditorWindow.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.FocusWindowIfItsOpen(System.Type)">
      <summary>
        <para>Focuses the first found EditorWindow of specified type if it is open.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.FocusWindowIfItsOpen">
      <summary>
        <para>Focuses the first found EditorWindow of type T if it is open.</para>
      </summary>
      <param name="T">The type of the window. Must derive from EditorWindow.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type)">
      <summary>
        <para>Returns the first EditorWindow of type t which is currently on the screen.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type t which is currently on the screen.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type,System.Boolean,System.String)">
      <summary>
        <para>Returns the first EditorWindow of type t which is currently on the screen.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type,System.Boolean,System.String,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type t which is currently on the screen.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow">
      <summary>
        <para>Returns the first EditorWindow of type T which is currently on the screen.</para>
      </summary>
      <param name="T">The type of the window. Must derive from EditorWindow.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type T which is currently on the screen.</para>
      </summary>
      <param name="T">The type of the window. Must derive from EditorWindow.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Boolean,System.String)">
      <summary>
        <para>Returns the first EditorWindow of type T which is currently on the screen.</para>
      </summary>
      <param name="T">The type of the window. Must derive from EditorWindow.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.String)">
      <summary>
        <para>Returns the first EditorWindow of type T which is currently on the screen.</para>
      </summary>
      <param name="T">The type of the window. Must derive from EditorWindow.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.String,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type T which is currently on the screen.</para>
      </summary>
      <param name="T">The type of the window. Must derive from EditorWindow.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Boolean,System.String,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type T which is currently on the screen.</para>
      </summary>
      <param name="T">The type of the window. Must derive from EditorWindow.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type[])">
      <summary>
        <para>Returns the first EditorWindow of type T which is currently on the screen.</para>
      </summary>
      <param name="T">The type of the window. Must derive from EditorWindow.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="desiredDockNextTo">An array of EditorWindow types that the window will attempt to dock onto.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.String,System.Type[])">
      <summary>
        <para>Returns the first EditorWindow of type T which is currently on the screen.</para>
      </summary>
      <param name="T">The type of the window. Must derive from EditorWindow.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="desiredDockNextTo">An array of EditorWindow types that the window will attempt to dock onto.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.String,System.Boolean,System.Type[])">
      <summary>
        <para>Returns the first EditorWindow of type T which is currently on the screen.</para>
      </summary>
      <param name="T">The type of the window. Must derive from EditorWindow.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="desiredDockNextTo">An array of EditorWindow types that the window will attempt to dock onto.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect(System.Type,UnityEngine.Rect)">
      <summary>
        <para>Returns the first EditorWindow of type t which is currently on the screen.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect(System.Type,UnityEngine.Rect,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type t which is currently on the screen.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect(System.Type,UnityEngine.Rect,System.Boolean,System.String)">
      <summary>
        <para>Returns the first EditorWindow of type t which is currently on the screen.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect(UnityEngine.Rect)">
      <summary>
        <para>Returns the first EditorWindow of type t which is currently on the screen.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect(UnityEngine.Rect,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type t which is currently on the screen.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect(UnityEngine.Rect,System.Boolean,System.String)">
      <summary>
        <para>Returns the first EditorWindow of type t which is currently on the screen.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect(UnityEngine.Rect,System.Boolean,System.String,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type t which is currently on the screen.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="focus">Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.RemoveNotification">
      <summary>
        <para>Stop showing notification message.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.Repaint">
      <summary>
        <para>Make the window repaint.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.SendEvent(UnityEngine.Event)">
      <summary>
        <para>Sends an Event to a window.</para>
      </summary>
      <param name="e"></param>
    </member>
    <member name="M:UnityEditor.EditorWindow.Show">
      <summary>
        <para>Show the EditorWindow.</para>
      </summary>
      <param name="immediateDisplay"></param>
    </member>
    <member name="M:UnityEditor.EditorWindow.Show(System.Boolean)">
      <summary>
        <para>Show the EditorWindow.</para>
      </summary>
      <param name="immediateDisplay"></param>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowAsDropDown(UnityEngine.Rect,UnityEngine.Vector2)">
      <summary>
        <para>Shows a window with dropdown behaviour and styling.</para>
      </summary>
      <param name="buttonRect">The button from which the position of the window will be determined (see description).</param>
      <param name="windowSize">The initial size of the window.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowAuxWindow">
      <summary>
        <para>Show the editor window in the auxiliary window.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowNotification(UnityEngine.GUIContent)">
      <summary>
        <para>Show a notification message.</para>
      </summary>
      <param name="notification"></param>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowPopup">
      <summary>
        <para>Shows an Editor window using popup-style framing.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowUtility">
      <summary>
        <para>Show the EditorWindow as a floating utility window.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Events.UnityEventTools">
      <summary>
        <para>Editor tools for working with persistent UnityEvents.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddBoolPersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction`1&lt;System.Boolean&gt;,System.Boolean)">
      <summary>
        <para>Adds a persistent, preset call to the listener.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddFloatPersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction`1&lt;System.Single&gt;,System.Single)">
      <summary>
        <para>Adds a persistent, preset call to the listener.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddIntPersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction`1&lt;System.Int32&gt;,System.Int32)">
      <summary>
        <para>Adds a persistent, preset call to the listener.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddObjectPersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction`1&lt;T&gt;,T)">
      <summary>
        <para>Adds a persistent, preset call to the listener.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener(UnityEngine.Events.UnityEventBase)">
      <summary>
        <para>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener(UnityEngine.Events.UnityEvent,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener(UnityEngine.Events.UnityEvent`1&lt;T0&gt;,UnityEngine.Events.UnityAction`1&lt;T0&gt;)">
      <summary>
        <para>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener(UnityEngine.Events.UnityEvent`2&lt;T0,T1&gt;,UnityEngine.Events.UnityAction`2&lt;T0,T1&gt;)">
      <summary>
        <para>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener(UnityEngine.Events.UnityEvent`3&lt;T0,T1,T2&gt;,UnityEngine.Events.UnityAction`3&lt;T0,T1,T2&gt;)">
      <summary>
        <para>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener(UnityEngine.Events.UnityEvent`4&lt;T0,T1,T2,T3&gt;,UnityEngine.Events.UnityAction`4&lt;T0,T1,T2,T3&gt;)">
      <summary>
        <para>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddStringPersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction`1&lt;System.String&gt;,System.String)">
      <summary>
        <para>Adds a persistent, preset call to the listener.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddVoidPersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Adds a persistent, preset call to the listener.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterBoolPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,UnityEngine.Events.UnityAction`1&lt;System.Boolean&gt;,System.Boolean)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterFloatPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,UnityEngine.Events.UnityAction`1&lt;System.Single&gt;,System.Single)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterIntPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,UnityEngine.Events.UnityAction`1&lt;System.Int32&gt;,System.Int32)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterObjectPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,UnityEngine.Events.UnityAction`1&lt;T&gt;,T)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterPersistentListener(UnityEngine.Events.UnityEvent,System.Int32,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterPersistentListener(UnityEngine.Events.UnityEvent`1&lt;T0&gt;,System.Int32,UnityEngine.Events.UnityAction`1&lt;T0&gt;)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterPersistentListener(UnityEngine.Events.UnityEvent`2&lt;T0,T1&gt;,System.Int32,UnityEngine.Events.UnityAction`2&lt;T0,T1&gt;)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterPersistentListener(UnityEngine.Events.UnityEvent`3&lt;T0,T1,T2&gt;,System.Int32,UnityEngine.Events.UnityAction`3&lt;T0,T1,T2&gt;)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterPersistentListener(UnityEngine.Events.UnityEvent`4&lt;T0,T1,T2,T3&gt;,System.Int32,UnityEngine.Events.UnityAction`4&lt;T0,T1,T2,T3&gt;)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterStringPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,UnityEngine.Events.UnityAction`1&lt;System.String&gt;,System.String)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterVoidPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener(UnityEngine.Events.UnityEventBase,System.Int32)">
      <summary>
        <para>Removes the given function from the event.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to remove (if specified).</param>
      <param name="call">Function to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Removes the given function from the event.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to remove (if specified).</param>
      <param name="call">Function to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction`1&lt;T0&gt;)">
      <summary>
        <para>Removes the given function from the event.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to remove (if specified).</param>
      <param name="call">Function to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction`2&lt;T0,T1&gt;)">
      <summary>
        <para>Removes the given function from the event.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to remove (if specified).</param>
      <param name="call">Function to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction`3&lt;T0,T1,T2&gt;)">
      <summary>
        <para>Removes the given function from the event.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to remove (if specified).</param>
      <param name="call">Function to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction`4&lt;T0,T1,T2,T3&gt;)">
      <summary>
        <para>Removes the given function from the event.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to remove (if specified).</param>
      <param name="call">Function to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.UnregisterPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32)">
      <summary>
        <para>Unregisters the given listener at the specified index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to unregister.</param>
    </member>
    <member name="T:UnityEditor.ExportPackageOptions">
      <summary>
        <para>Export package option. Multiple options can be combined together using the | operator.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.Default">
      <summary>
        <para>Default mode. Will not include dependencies or subdirectories nor include Library assets unless specifically included in the asset list.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.IncludeDependencies">
      <summary>
        <para>In addition to the assets paths listed, all dependent assets will be included as well.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.IncludeLibraryAssets">
      <summary>
        <para>The exported package will include all library assets, ie. the project settings located in the Library folder of the project.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.Interactive">
      <summary>
        <para>The export operation will be run asynchronously and reveal the exported package file in a file browser window after the export is finished.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.Recurse">
      <summary>
        <para>Will recurse through any subdirectories listed and include all assets inside them.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.FileUtil">
      <summary>
        <para>Lets you do move, copy, delete operations over files or directories.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.CopyFileOrDirectory(System.String,System.String)">
      <summary>
        <para>Copies a file or a directory.</para>
      </summary>
      <param name="from"></param>
      <param name="to"></param>
    </member>
    <member name="M:UnityEditor.FileUtil.CopyFileOrDirectoryFollowSymlinks(System.String,System.String)">
      <summary>
        <para>Copies the file or directory.</para>
      </summary>
      <param name="from"></param>
      <param name="to"></param>
    </member>
    <member name="M:UnityEditor.FileUtil.DeleteFileOrDirectory(System.String)">
      <summary>
        <para>Deletes a file or a directory given a path.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEditor.FileUtil.GetUniqueTempPathInProject">
      <summary>
        <para>Returns a unique path in the Temp folder within your current project.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.MoveFileOrDirectory(System.String,System.String)">
      <summary>
        <para>Moves a file or a directory from a given path to another path.</para>
      </summary>
      <param name="from"></param>
      <param name="to"></param>
    </member>
    <member name="M:UnityEditor.FileUtil.ReplaceDirectory(System.String,System.String)">
      <summary>
        <para>Replaces a directory.</para>
      </summary>
      <param name="src"></param>
      <param name="dst"></param>
    </member>
    <member name="M:UnityEditor.FileUtil.ReplaceFile(System.String,System.String)">
      <summary>
        <para>Replaces a file.</para>
      </summary>
      <param name="src"></param>
      <param name="dst"></param>
    </member>
    <member name="T:UnityEditor.FontRenderingMode">
      <summary>
        <para>Font rendering mode constants for TrueTypeFontImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontRenderingMode.HintedRaster">
      <summary>
        <para>Use hinted font rendering without anti-aliasing. This is the crispest font rendering option, and may be most readable for small.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontRenderingMode.HintedSmooth">
      <summary>
        <para>Use Anti-Aliased Font rendering with hinting. This forces character lines to run along pixel boundaries, and generally produces.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontRenderingMode.OSDefault">
      <summary>
        <para>Use the OS default font rendering mode. This selects either FontRenderingMode.HintedSmooth or.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontRenderingMode.Smooth">
      <summary>
        <para>Use Anti-Aliased Font rendering. When using dynamic fonts, this is the mode which is fastest in rendering font textures.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.FontTextureCase">
      <summary>
        <para>Texture case constants for TrueTypeFontImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.ASCII">
      <summary>
        <para>Import basic ASCII character set.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.ASCIILowerCase">
      <summary>
        <para>Only import lower case ASCII character set.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.ASCIIUpperCase">
      <summary>
        <para>Only import upper case ASCII character set.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.CustomSet">
      <summary>
        <para>Custom set of characters.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.Dynamic">
      <summary>
        <para>Render characters into font texture at runtime as needed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.Unicode">
      <summary>
        <para>Import a set of Unicode characters common for latin scripts.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.GameObjectUtility">
      <summary>
        <para>GameObject utility functions.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.AreStaticEditorFlagsSet(UnityEngine.GameObject,UnityEditor.StaticEditorFlags)">
      <summary>
        <para>Returns true if the passed in StaticEditorFlags are set on the GameObject specified.</para>
      </summary>
      <param name="go">The GameObject to check.</param>
      <param name="flags">The flags you want to check.</param>
      <returns>
        <para>Whether the GameObject's static flags match the flags specified.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetNavMeshArea(UnityEngine.GameObject)">
      <summary>
        <para>Get the navmesh area index for the GameObject.</para>
      </summary>
      <param name="go">GameObject to query.</param>
      <returns>
        <para>NavMesh area index.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetNavMeshAreaFromName(System.String)">
      <summary>
        <para>Get the navmesh area index from the area name.</para>
      </summary>
      <param name="name">NavMesh area name to query.</param>
      <returns>
        <para>The NavMesh area index. If there is no NavMesh area with the requested name, the return value is -1.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetNavMeshAreaNames">
      <summary>
        <para>Get all the navmesh area names.</para>
      </summary>
      <returns>
        <para>Names of all the NavMesh areas.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetNavMeshLayer(UnityEngine.GameObject)">
      <summary>
        <para>Get the navmesh layer for the GameObject.</para>
      </summary>
      <param name="go">The GameObject to check.</param>
      <returns>
        <para>The navmesh layer for the GameObject specified.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetNavMeshLayerFromName(System.String)">
      <summary>
        <para>Get the navmesh layer from the layer name.</para>
      </summary>
      <param name="name">The name of the navmesh layer.</param>
      <returns>
        <para>The layer number of the navmesh layer name specified.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetNavMeshLayerNames">
      <summary>
        <para>Get all the navmesh layer names.</para>
      </summary>
      <returns>
        <para>An array of the names of all navmesh layers.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetStaticEditorFlags(UnityEngine.GameObject)">
      <summary>
        <para>Gets the StaticEditorFlags of the GameObject specified.</para>
      </summary>
      <param name="go">The GameObject whose flags you are interested in.</param>
      <returns>
        <para>The static editor flags of the GameObject specified.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetUniqueNameForSibling(UnityEngine.Transform,System.String)">
      <summary>
        <para>Get unique name for a new GameObject compared to existing siblings. Useful when trying to avoid duplicate naming. When duplicate(s) are found, uses incremental a number after the base name.</para>
      </summary>
      <param name="parent">Target parent for a new GameObject. Null means root level.</param>
      <param name="name">Requested name for a new GameObject.</param>
      <returns>
        <para>Unique name for a new GameObject.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.SetNavMeshArea(UnityEngine.GameObject,System.Int32)">
      <summary>
        <para>Set the navmesh area for the gameobject.</para>
      </summary>
      <param name="go">GameObject to modify.</param>
      <param name="areaIndex">NavMesh area index to set.</param>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.SetNavMeshLayer(UnityEngine.GameObject,System.Int32)">
      <summary>
        <para>Set the navmesh layer for the GameObject.</para>
      </summary>
      <param name="go">The GameObject on which to set the navmesh layer.</param>
      <param name="areaIndex">The layer number you want to set.</param>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.SetParentAndAlign(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>Sets the parent and gives the child the same layer and position.</para>
      </summary>
      <param name="child">The GameObject that should have a new parent set.</param>
      <param name="parent">The GameObject that the child should get as a parent and have position and layer copied from. If null, this function does nothing.</param>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.SetStaticEditorFlags(UnityEngine.GameObject,UnityEditor.StaticEditorFlags)">
      <summary>
        <para>Sets the static editor flags on the specified GameObject.</para>
      </summary>
      <param name="go">The GameObject whose static editor flags you want to set.</param>
      <param name="flags">The flags to set on the GameObject.</param>
    </member>
    <member name="T:UnityEditor.GenericMenu">
      <summary>
        <para>The GenericMenu lets you create a custom context and dropdown menus.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GenericMenu.AddDisabledItem(UnityEngine.GUIContent)">
      <summary>
        <para>Add a disabled item to the menu.</para>
      </summary>
      <param name="content">The GUIContent to display as a disabled menu item.</param>
    </member>
    <member name="M:UnityEditor.GenericMenu.AddItem(UnityEngine.GUIContent,System.Boolean,UnityEditor.GenericMenu/MenuFunction)">
      <summary>
        <para>Add an item to the menu.</para>
      </summary>
      <param name="content">The GUIContent to add as a menu item.</param>
      <param name="on">Whether to show the item is currently activated (i.e. a tick next to the item in the menu).</param>
      <param name="func">The function to call when the menu item is selected.</param>
    </member>
    <member name="M:UnityEditor.GenericMenu.AddItem(UnityEngine.GUIContent,System.Boolean,UnityEditor.GenericMenu/MenuFunction2,System.Object)">
      <summary>
        <para>Add an item to the menu.</para>
      </summary>
      <param name="content">The GUIContent to add as a menu item.</param>
      <param name="on">Whether to show the item is currently activated (i.e. a tick next to the item in the menu).</param>
      <param name="func">The function to call when the menu item is selected.</param>
      <param name="userData">The data to pass to the function called when the item is selected.</param>
    </member>
    <member name="M:UnityEditor.GenericMenu.AddSeparator(System.String)">
      <summary>
        <para>Add a seperator item to the menu.</para>
      </summary>
      <param name="path">The path to the submenu, if adding a separator to a submenu. When adding a separator to the top level of a menu, use an empty string as the path.</param>
    </member>
    <member name="M:UnityEditor.GenericMenu.DropDown(UnityEngine.Rect)">
      <summary>
        <para>Show the menu at the given screen rect.</para>
      </summary>
      <param name="position">The position at which to show the menu.</param>
    </member>
    <member name="M:UnityEditor.GenericMenu.GetItemCount">
      <summary>
        <para>Get number of items in the menu.</para>
      </summary>
      <returns>
        <para>The number of items in the menu.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.GenericMenu.MenuFunction">
      <summary>
        <para>Callback function, called when a menu item is selected.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.GenericMenu.MenuFunction2">
      <summary>
        <para>Callback function with user data, called when a menu item is selected.</para>
      </summary>
      <param name="userData">The data to pass through to the callback function.</param>
    </member>
    <member name="M:UnityEditor.GenericMenu.ShowAsContext">
      <summary>
        <para>Show the menu under the mouse when right-clicked.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.GizmoType">
      <summary>
        <para>Determines how a gizmo is drawn or picked in the Unity editor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GizmoType.Active">
      <summary>
        <para>Draw the gizmo if it is active (shown in the inspector).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GizmoType.InSelectionHierarchy">
      <summary>
        <para>Draw the gizmo if it is selected or it is a child/descendent of the selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GizmoType.NonSelected">
      <summary>
        <para>Draw the gizmo if it is not selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GizmoType.NotInSelectionHierarchy">
      <summary>
        <para>Draw the gizmo if it is not selected and also no parent/ancestor is selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GizmoType.Pickable">
      <summary>
        <para>The gizmo can be picked in the editor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GizmoType.Selected">
      <summary>
        <para>Draw the gizmo if it is selected.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.GraphicsJobMode">
      <summary>
        <para>Enum used to specify the graphics jobs mode to use.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GraphicsJobMode.Legacy">
      <summary>
        <para>Legacy graphics jobs.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GraphicsJobMode.Native">
      <summary>
        <para>Native graphics jobs.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.GUIDrawer">
      <summary>
        <para>Base class for PropertyDrawer and DecoratorDrawer.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Handles">
      <summary>
        <para>Custom 3D GUI controls and drawing in the scene view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.centerColor">
      <summary>
        <para>Color to use for handles that represent the center of something.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.color">
      <summary>
        <para>Colors of the handles.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.currentCamera">
      <summary>
        <para>Setup viewport and stuff for a current camera.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.inverseMatrix">
      <summary>
        <para>The inverse of the matrix for all handle operations.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.lighting">
      <summary>
        <para>Are handles lit?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.matrix">
      <summary>
        <para>Matrix for all handle operations.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.secondaryColor">
      <summary>
        <para>Soft color to use for for general things.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.selectedColor">
      <summary>
        <para>Color to use for the currently active handle.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.xAxisColor">
      <summary>
        <para>Color to use for handles that manipulates the X coordinate of something.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.yAxisColor">
      <summary>
        <para>Color to use for handles that manipulates the Y coordinate of something.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.zAxisColor">
      <summary>
        <para>Color to use for handles that manipulates the Z coordinate of something.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.zTest">
      <summary>
        <para>zTest of the handles.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.ArrowHandleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.EventType)">
      <summary>
        <para>Draw an arrow like those used by the move tool.</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The position of the handle in the space of Handles.matrix.</param>
      <param name="rotation">The rotation of the handle in the space of Handles.matrix.</param>
      <param name="size">The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.</param>
      <param name="eventType">Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.</param>
    </member>
    <member name="M:UnityEditor.Handles.BeginGUI">
      <summary>
        <para>Begin a 2D GUI block inside the 3D handle GUI.</para>
      </summary>
      <param name="position">The position and size of the 2D GUI area.</param>
    </member>
    <member name="M:UnityEditor.Handles.BeginGUI(UnityEngine.Rect)">
      <summary>
        <para>Begin a 2D GUI block inside the 3D handle GUI.</para>
      </summary>
      <param name="position">The position and size of the 2D GUI area.</param>
    </member>
    <member name="M:UnityEditor.Handles.Button(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEditor.Handles/CapFunction)">
      <summary>
        <para>Make a 3D Button.</para>
      </summary>
      <param name="position">The position to draw the button in the space of Handles.matrix.</param>
      <param name="direction">The rotation of the button in the space of Handles.matrix.</param>
      <param name="size">The visual size of the handle. Use HandleUtility.GetHandleSize if you want a constant screen-space size.</param>
      <param name="pickSize">The size of the button for the purpose of detecting a click. Use HandleUtility.GetHandleSize if you want a constant screen-space size.</param>
      <param name="capFunction">The draw style of the button.</param>
      <returns>
        <para>True when the user clicks the button.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Handles.CapFunction">
      <summary>
        <para>The function to use for drawing the handle e.g. Handles.RectangleCap.</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The position of the handle in the space of Handles.matrix.</param>
      <param name="rotation">The rotation of the handle in the space of Handles.matrix.</param>
      <param name="size">The size of the handle in world-space units.</param>
      <param name="eventType">Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.</param>
    </member>
    <member name="M:UnityEditor.Handles.CircleHandleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.EventType)">
      <summary>
        <para>Draw a circle handle. Pass this into handle functions.</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The position of the handle in the space of Handles.matrix.</param>
      <param name="rotation">The rotation of the handle in the space of Handles.matrix.</param>
      <param name="size">The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.</param>
      <param name="eventType">Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.</param>
    </member>
    <member name="M:UnityEditor.Handles.ClearCamera(UnityEngine.Rect,UnityEngine.Camera)">
      <summary>
        <para>Clears the camera.</para>
      </summary>
      <param name="position">Where in the Scene to clear.</param>
      <param name="camera">The camera to clear.</param>
    </member>
    <member name="M:UnityEditor.Handles.ConeHandleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.EventType)">
      <summary>
        <para>Draw a cone handle. Pass this into handle functions.</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The position of the handle in the space of Handles.matrix.</param>
      <param name="rotation">The rotation of the handle in the space of Handles.matrix.</param>
      <param name="size">The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.</param>
      <param name="eventType">Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.</param>
    </member>
    <member name="M:UnityEditor.Handles.CubeHandleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.EventType)">
      <summary>
        <para>Draw a cube handle. Pass this into handle functions.</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The position of the handle in the space of Handles.matrix.</param>
      <param name="rotation">The rotation of the handle in the space of Handles.matrix.</param>
      <param name="size">The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.</param>
      <param name="eventType">Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.</param>
    </member>
    <member name="M:UnityEditor.Handles.CylinderHandleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.EventType)">
      <summary>
        <para>Draw a cylinder handle. Pass this into handle functions.</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The position of the handle in the space of Handles.matrix.</param>
      <param name="rotation">The rotation of the handle in the space of Handles.matrix.</param>
      <param name="size">The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.</param>
      <param name="eventType">Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.</param>
    </member>
    <member name="M:UnityEditor.Handles.Disc(UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Boolean,System.Single)">
      <summary>
        <para>Make a 3D disc that can be dragged with the mouse.
Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </summary>
      <param name="rotation">The rotation of the disc.</param>
      <param name="position">The center of the disc.</param>
      <param name="axis">The axis to rotate around.</param>
      <param name="size">The size of the disc in world space See Also:HandleUtility.GetHandleSize.</param>
      <param name="cutoffPlane">If true, only the front-facing half of the circle is draw / draggable. This is useful when you have many overlapping rotation axes (like in the default rotate tool) to avoid clutter.</param>
      <param name="snap">The grid size to snap to.</param>
      <returns>
        <para>The new rotation value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.DotHandleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.EventType)">
      <summary>
        <para>Draw a dot handle. Pass this into handle functions.</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The position of the handle in the space of Handles.matrix.</param>
      <param name="rotation">The rotation of the handle in the space of Handles.matrix.</param>
      <param name="size">The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.</param>
      <param name="eventType">Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAConvexPolygon(UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased convex polygon specified with point array.</para>
      </summary>
      <param name="points">List of points describing the convex polygon.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
      </summary>
      <param name="lineTex">The AA texture used for rendering. To get an anti-aliased effect use a texture that is 1x2 pixels with one transparent white pixel and one opaque white pixel.</param>
      <param name="width">The width of the line. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
      <param name="points">List of points to build the line from.</param>
      <param name="actualNumberOfPoints"></param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(System.Single,UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
      </summary>
      <param name="lineTex">The AA texture used for rendering. To get an anti-aliased effect use a texture that is 1x2 pixels with one transparent white pixel and one opaque white pixel.</param>
      <param name="width">The width of the line. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
      <param name="points">List of points to build the line from.</param>
      <param name="actualNumberOfPoints"></param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(UnityEngine.Texture2D,UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
      </summary>
      <param name="lineTex">The AA texture used for rendering. To get an anti-aliased effect use a texture that is 1x2 pixels with one transparent white pixel and one opaque white pixel.</param>
      <param name="width">The width of the line. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
      <param name="points">List of points to build the line from.</param>
      <param name="actualNumberOfPoints"></param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(System.Single,System.Int32,UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
      </summary>
      <param name="lineTex">The AA texture used for rendering. To get an anti-aliased effect use a texture that is 1x2 pixels with one transparent white pixel and one opaque white pixel.</param>
      <param name="width">The width of the line. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
      <param name="points">List of points to build the line from.</param>
      <param name="actualNumberOfPoints"></param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(UnityEngine.Texture2D,System.Single,UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
      </summary>
      <param name="lineTex">The AA texture used for rendering. To get an anti-aliased effect use a texture that is 1x2 pixels with one transparent white pixel and one opaque white pixel.</param>
      <param name="width">The width of the line. Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
      <param name="points">List of points to build the line from.</param>
      <param name="actualNumberOfPoints"></param>
    </member>
    <member name="M:UnityEditor.Handles.DrawBezier(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Texture2D,System.Single)">
      <summary>
        <para>Draw textured bezier line through start and end points with the given tangents.  To get an anti-aliased effect use a texture that is 1x2 pixels with one transparent white pixel and one opaque white pixel.  The bezier curve will be swept using this texture.</para>
      </summary>
      <param name="startPosition">The start point of the bezier line.</param>
      <param name="endPosition">The end point of the bezier line.</param>
      <param name="startTangent">The start tangent of the bezier line.</param>
      <param name="endTangent">The end tangent of the bezier line.</param>
      <param name="color">The color to use for the bezier line.</param>
      <param name="texture">The texture to use for drawing the bezier line.</param>
      <param name="width">The width of the bezier line.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawCamera">
      <summary>
        <para>Draws a camera inside a rectangle.</para>
      </summary>
      <param name="position">The area to draw the camera within in GUI coordinates.</param>
      <param name="camera">The camera to draw.</param>
      <param name="drawMode">How the camera is drawn (textured, wireframe, etc).</param>
      <param name="gridParam">Parameters of grid drawing (can be omitted).</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawCamera(UnityEngine.Rect,UnityEngine.Camera)">
      <summary>
        <para>Draws a camera inside a rectangle.</para>
      </summary>
      <param name="position">The area to draw the camera within in GUI coordinates.</param>
      <param name="camera">The camera to draw.</param>
      <param name="drawMode">How the camera is drawn (textured, wireframe, etc.).</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawCamera(UnityEngine.Rect,UnityEngine.Camera,UnityEditor.DrawCameraMode)">
      <summary>
        <para>Draws a camera inside a rectangle.</para>
      </summary>
      <param name="position">The area to draw the camera within in GUI coordinates.</param>
      <param name="camera">The camera to draw.</param>
      <param name="drawMode">How the camera is drawn (textured, wireframe, etc.).</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawDottedLine(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Draw a dotted line from p1 to p2.</para>
      </summary>
      <param name="p1">The start point.</param>
      <param name="p2">The end point.</param>
      <param name="screenSpaceSize">The size in pixels for the lengths of the line segments and the gaps between them.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawDottedLines(UnityEngine.Vector3[],System.Single)">
      <summary>
        <para>Draw a list of dotted line segments.</para>
      </summary>
      <param name="lineSegments">A list of pairs of points that represent the start and end of line segments.</param>
      <param name="screenSpaceSize">The size in pixels for the lengths of the line segments and the gaps between them.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawDottedLines(UnityEngine.Vector3[],System.Int32[],System.Single)">
      <summary>
        <para>Draw a list of indexed dotted line segments.</para>
      </summary>
      <param name="points">A list of points.</param>
      <param name="segmentIndices">A list of pairs of indices to the start and end points of the line segments.</param>
      <param name="screenSpaceSize">The size in pixels for the lengths of the line segments and the gaps between them.</param>
    </member>
    <member name="T:UnityEditor.Handles.DrawingScope">
      <summary>
        <para>Disposable helper struct for automatically setting and reverting Handles.color and/or Handles.matrix.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.DrawingScope.originalColor">
      <summary>
        <para>The value of Handles.color at the time this DrawingScope was created.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.DrawingScope.originalMatrix">
      <summary>
        <para>The value of Handles.matrix at the time this DrawingScope was created.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.DrawingScope.#ctor(UnityEngine.Color)">
      <summary>
        <para>Create a new DrawingScope and set Handles.color and/or Handles.matrix to the specified values.</para>
      </summary>
      <param name="matrix">The matrix to use for displaying Handles inside the scope block.</param>
      <param name="color">The color to use for displaying Handles inside the scope block.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawingScope.#ctor(UnityEngine.Color,UnityEngine.Matrix4x4)">
      <summary>
        <para>Create a new DrawingScope and set Handles.color and/or Handles.matrix to the specified values.</para>
      </summary>
      <param name="matrix">The matrix to use for displaying Handles inside the scope block.</param>
      <param name="color">The color to use for displaying Handles inside the scope block.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawingScope.#ctor(UnityEngine.Matrix4x4)">
      <summary>
        <para>Create a new DrawingScope and set Handles.color and/or Handles.matrix to the specified values.</para>
      </summary>
      <param name="matrix">The matrix to use for displaying Handles inside the scope block.</param>
      <param name="color">The color to use for displaying Handles inside the scope block.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawingScope.Dispose">
      <summary>
        <para>Automatically reverts Handles.color and Handles.matrix to their values prior to entering the scope, when the scope is exited. You do not need to call this method manually.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Draw a line from p1 to p2.</para>
      </summary>
      <param name="p1"></param>
      <param name="p2"></param>
    </member>
    <member name="M:UnityEditor.Handles.DrawLines(UnityEngine.Vector3[])">
      <summary>
        <para>Draw a list of line segments.</para>
      </summary>
      <param name="lineSegments">A list of pairs of points that represent the start and end of line segments.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawLines(UnityEngine.Vector3[],System.Int32[])">
      <summary>
        <para>Draw a list of indexed line segments.</para>
      </summary>
      <param name="points">A list of points.</param>
      <param name="segmentIndices">A list of pairs of indices to the start and end points of the line segments.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawPolyLine(UnityEngine.Vector3[])">
      <summary>
        <para>Draw a line going through the list of all points.</para>
      </summary>
      <param name="points"></param>
    </member>
    <member name="M:UnityEditor.Handles.DrawSelectionFrame(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.EventType)">
      <summary>
        <para>Draw a camera facing selection frame.</para>
      </summary>
      <param name="controlID"></param>
      <param name="position"></param>
      <param name="rotation"></param>
      <param name="size"></param>
      <param name="eventType"></param>
    </member>
    <member name="M:UnityEditor.Handles.DrawSolidArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
      <summary>
        <para>Draw a circular sector (pie piece) in 3D space.</para>
      </summary>
      <param name="center">The center of the circle.</param>
      <param name="normal">The normal of the circle.</param>
      <param name="from">The direction of the point on the circumference, relative to the center, where the sector begins.</param>
      <param name="angle">The angle of the sector, in degrees.</param>
      <param name="radius">The radius of the circle

Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawSolidDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Draw a solid flat disc in 3D space.</para>
      </summary>
      <param name="center">The center of the dics.</param>
      <param name="normal">The normal of the disc.</param>
      <param name="radius">The radius of the dics

Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawSolidRectangleWithOutline(UnityEngine.Vector3[],UnityEngine.Color,UnityEngine.Color)">
      <summary>
        <para>Draw a solid outlined rectangle in 3D space.</para>
      </summary>
      <param name="verts">The 4 vertices of the rectangle in world coordinates.</param>
      <param name="faceColor">The color of the rectangle's face.</param>
      <param name="outlineColor">The outline color of the rectangle.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawWireArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
      <summary>
        <para>Draw a circular arc in 3D space.</para>
      </summary>
      <param name="center">The center of the circle.</param>
      <param name="normal">The normal of the circle.</param>
      <param name="from">The direction of the point on the circle circumference, relative to the center, where the arc begins.</param>
      <param name="angle">The angle of the arc, in degrees.</param>
      <param name="radius">The radius of the circle

Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawWireCube(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Draw a wireframe box with center and size.</para>
      </summary>
      <param name="center"></param>
      <param name="size"></param>
    </member>
    <member name="M:UnityEditor.Handles.DrawWireDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Draw the outline of a flat disc in 3D space.</para>
      </summary>
      <param name="center">The center of the dics.</param>
      <param name="normal">The normal of the disc.</param>
      <param name="radius">The radius of the dics

Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.EndGUI">
      <summary>
        <para>End a 2D GUI block and get back to the 3D handle GUI.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.FreeMoveHandle(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.Vector3,UnityEditor.Handles/CapFunction)">
      <summary>
        <para>Make an unconstrained movement handle.</para>
      </summary>
      <param name="position">The position of the handle in the space of Handles.matrix.</param>
      <param name="rotation">The rotation of the handle in the space of Handles.matrix.</param>
      <param name="size">The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.</param>
      <param name="snap">The snap increment on all axes. See Handles.SnapValue.</param>
      <param name="capFunction">The function to call for doing the actual drawing.</param>
      <returns>
        <para>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.FreeRotateHandle(UnityEngine.Quaternion,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Make an unconstrained rotation handle.</para>
      </summary>
      <param name="rotation">Orientation of the handle.</param>
      <param name="position">Center of the handle in 3D space.</param>
      <param name="size">The size of the handle.

Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
      <returns>
        <para>The new rotation value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.GetMainGameViewSize">
      <summary>
        <para>Get the width and height of the main game view.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,System.String)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="text">Text to display on the label.</param>
      <param name="image">Texture to display on the label.</param>
      <param name="content">Text, image and tooltip for this label.</param>
      <param name="style">The style to use. If left out, the label style from the current GUISkin is used.

Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,UnityEngine.Texture)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="text">Text to display on the label.</param>
      <param name="image">Texture to display on the label.</param>
      <param name="content">Text, image and tooltip for this label.</param>
      <param name="style">The style to use. If left out, the label style from the current GUISkin is used.

Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,UnityEngine.GUIContent)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="text">Text to display on the label.</param>
      <param name="image">Texture to display on the label.</param>
      <param name="content">Text, image and tooltip for this label.</param>
      <param name="style">The style to use. If left out, the label style from the current GUISkin is used.

Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="text">Text to display on the label.</param>
      <param name="image">Texture to display on the label.</param>
      <param name="content">Text, image and tooltip for this label.</param>
      <param name="style">The style to use. If left out, the label style from the current GUISkin is used.

Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="text">Text to display on the label.</param>
      <param name="image">Texture to display on the label.</param>
      <param name="content">Text, image and tooltip for this label.</param>
      <param name="style">The style to use. If left out, the label style from the current GUISkin is used.

Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.MakeBezierPoints(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Int32)">
      <summary>
        <para>Retuns an array of points to representing the bezier curve. See Handles.DrawBezier.</para>
      </summary>
      <param name="startPosition"></param>
      <param name="endPosition"></param>
      <param name="startTangent"></param>
      <param name="endTangent"></param>
      <param name="division"></param>
    </member>
    <member name="M:UnityEditor.Handles.PositionHandle(UnityEngine.Vector3,UnityEngine.Quaternion)">
      <summary>
        <para>Make a position handle.</para>
      </summary>
      <param name="position">Center of the handle in 3D space.</param>
      <param name="rotation">Orientation of the handle in 3D space.</param>
      <returns>
        <para>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.RadiusHandle(UnityEngine.Quaternion,UnityEngine.Vector3,System.Single,System.Boolean)">
      <summary>
        <para>Make a Scene view radius handle.</para>
      </summary>
      <param name="rotation">Orientation of the handle.</param>
      <param name="position">Center of the handle in 3D space.</param>
      <param name="radius">Radius to modify.</param>
      <param name="handlesOnly">Whether to omit the circular outline of the radius and only draw the point handles.</param>
      <returns>
        <para>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.

Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.RadiusHandle(UnityEngine.Quaternion,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Make a Scene view radius handle.</para>
      </summary>
      <param name="rotation">Orientation of the handle.</param>
      <param name="position">Center of the handle in 3D space.</param>
      <param name="radius">Radius to modify.</param>
      <param name="handlesOnly">Whether to omit the circular outline of the radius and only draw the point handles.</param>
      <returns>
        <para>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.

Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.RectangleHandleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.EventType)">
      <summary>
        <para>Draw a rectangle handle. Pass this into handle functions.</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The position of the handle in the space of Handles.matrix.</param>
      <param name="rotation">The rotation of the handle in the space of Handles.matrix.</param>
      <param name="size">The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.</param>
      <param name="eventType">Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.</param>
    </member>
    <member name="M:UnityEditor.Handles.RotationHandle(UnityEngine.Quaternion,UnityEngine.Vector3)">
      <summary>
        <para>Make a Scene view rotation handle.</para>
      </summary>
      <param name="rotation">Orientation of the handle.</param>
      <param name="position">Center of the handle in 3D space.</param>
      <returns>
        <para>The new rotation value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.ScaleHandle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Make a Scene view scale handle.

Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </summary>
      <param name="scale">Scale to modify.</param>
      <param name="position">The position of the handle.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">Allows you to scale the size of the handle on-scren.</param>
      <returns>
        <para>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.ScaleSlider(System.Single,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single)">
      <summary>
        <para>Make a directional scale slider.</para>
      </summary>
      <param name="scale">The value the user can modify.</param>
      <param name="position">The position of the handle in the space of Handles.matrix.</param>
      <param name="direction">The direction of the handle in the space of Handles.matrix.</param>
      <param name="rotation">The rotation of the handle in the space of Handles.matrix.</param>
      <param name="size">The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.</param>
      <param name="snap">The snap increment. See Handles.SnapValue.</param>
      <returns>
        <para>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.ScaleValueHandle(System.Single,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEditor.Handles/CapFunction,System.Single)">
      <summary>
        <para>Make a 3D handle that scales a single float.</para>
      </summary>
      <param name="value">The value the user can modify.</param>
      <param name="position">The position of the handle in the space of Handles.matrix.</param>
      <param name="rotation">The rotation of the handle in the space of Handles.matrix.</param>
      <param name="size">The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.</param>
      <param name="snap">The snap increment. See Handles.SnapValue.</param>
      <param name="capFunction">The function to call for doing the actual drawing.</param>
      <returns>
        <para>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.SetCamera(UnityEngine.Camera)">
      <summary>
        <para>Set the current camera so all Handles and Gizmos are draw with its settings.</para>
      </summary>
      <param name="camera"></param>
      <param name="position"></param>
    </member>
    <member name="M:UnityEditor.Handles.SetCamera(UnityEngine.Rect,UnityEngine.Camera)">
      <summary>
        <para>Set the current camera so all Handles and Gizmos are draw with its settings.</para>
      </summary>
      <param name="camera"></param>
      <param name="position"></param>
    </member>
    <member name="T:UnityEditor.Handles.SizeFunction">
      <summary>
        <para>A delegate type for getting a handle's size based on its current position.</para>
      </summary>
      <param name="position">The current position of the handle in the space of Handles.matrix.</param>
    </member>
    <member name="M:UnityEditor.Handles.Slider(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Make a 3D slider that moves along one axis.</para>
      </summary>
      <param name="position">The position of the current point in the space of Handles.matrix.</param>
      <param name="direction">The direction axis of the slider in the space of Handles.matrix.</param>
      <param name="size">The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.</param>
      <param name="snap">The snap increment. See Handles.SnapValue.</param>
      <param name="capFunction">The function to call for doing the actual drawing. By default it is Handles.ArrowHandleCap, but any function that has the same signature can be used.</param>
      <returns>
        <para>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the position value passed into the function.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles/CapFunction,System.Single)">
      <summary>
        <para>Make a 3D slider that moves along one axis.</para>
      </summary>
      <param name="position">The position of the current point in the space of Handles.matrix.</param>
      <param name="direction">The direction axis of the slider in the space of Handles.matrix.</param>
      <param name="size">The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.</param>
      <param name="snap">The snap increment. See Handles.SnapValue.</param>
      <param name="capFunction">The function to call for doing the actual drawing. By default it is Handles.ArrowHandleCap, but any function that has the same signature can be used.</param>
      <returns>
        <para>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the position value passed into the function.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles/CapFunction,UnityEngine.Vector2,System.Boolean)">
      <summary>
        <para>Make a 3D slider that moves along a plane defined by two axes.</para>
      </summary>
      <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
      <param name="handlePos">The position of the current point in the space of Handles.matrix.</param>
      <param name="offset">(optional) renders the Slider2D at handlePos, but treats the Slider2D's origin as handlePos + offset. Useful for Slider2D instances that are placed/rendered relative to another object or handle.</param>
      <param name="handleDir">The direction of the handle in the space of Handles.matrix, only used for rendering of the handle.</param>
      <param name="slideDir1">The first axis of the slider's plane of movement in the space of Handles.matrix.</param>
      <param name="slideDir2">The second axis of the slider's plane of movement in the space of Handles.matrix.</param>
      <param name="handleSize">The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.</param>
      <param name="snap">(float or Vector2) The snap increment along both axes, either uniform or per-axis. See Handles.SnapValue.</param>
      <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
      <param name="capFunction">The function to call for doing the actual drawing.</param>
      <returns>
        <para>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the position value passed into the function.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles/CapFunction,System.Single,System.Boolean)">
      <summary>
        <para>Make a 3D slider that moves along a plane defined by two axes.</para>
      </summary>
      <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
      <param name="handlePos">The position of the current point in the space of Handles.matrix.</param>
      <param name="offset">(optional) renders the Slider2D at handlePos, but treats the Slider2D's origin as handlePos + offset. Useful for Slider2D instances that are placed/rendered relative to another object or handle.</param>
      <param name="handleDir">The direction of the handle in the space of Handles.matrix, only used for rendering of the handle.</param>
      <param name="slideDir1">The first axis of the slider's plane of movement in the space of Handles.matrix.</param>
      <param name="slideDir2">The second axis of the slider's plane of movement in the space of Handles.matrix.</param>
      <param name="handleSize">The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.</param>
      <param name="snap">(float or Vector2) The snap increment along both axes, either uniform or per-axis. See Handles.SnapValue.</param>
      <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
      <param name="capFunction">The function to call for doing the actual drawing.</param>
      <returns>
        <para>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the position value passed into the function.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles/CapFunction,UnityEngine.Vector2,System.Boolean)">
      <summary>
        <para>Make a 3D slider that moves along a plane defined by two axes.</para>
      </summary>
      <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
      <param name="handlePos">The position of the current point in the space of Handles.matrix.</param>
      <param name="offset">(optional) renders the Slider2D at handlePos, but treats the Slider2D's origin as handlePos + offset. Useful for Slider2D instances that are placed/rendered relative to another object or handle.</param>
      <param name="handleDir">The direction of the handle in the space of Handles.matrix, only used for rendering of the handle.</param>
      <param name="slideDir1">The first axis of the slider's plane of movement in the space of Handles.matrix.</param>
      <param name="slideDir2">The second axis of the slider's plane of movement in the space of Handles.matrix.</param>
      <param name="handleSize">The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.</param>
      <param name="snap">(float or Vector2) The snap increment along both axes, either uniform or per-axis. See Handles.SnapValue.</param>
      <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
      <param name="capFunction">The function to call for doing the actual drawing.</param>
      <returns>
        <para>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the position value passed into the function.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles/CapFunction,UnityEngine.Vector2,System.Boolean)">
      <summary>
        <para>Make a 3D slider that moves along a plane defined by two axes.</para>
      </summary>
      <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
      <param name="handlePos">The position of the current point in the space of Handles.matrix.</param>
      <param name="offset">(optional) renders the Slider2D at handlePos, but treats the Slider2D's origin as handlePos + offset. Useful for Slider2D instances that are placed/rendered relative to another object or handle.</param>
      <param name="handleDir">The direction of the handle in the space of Handles.matrix, only used for rendering of the handle.</param>
      <param name="slideDir1">The first axis of the slider's plane of movement in the space of Handles.matrix.</param>
      <param name="slideDir2">The second axis of the slider's plane of movement in the space of Handles.matrix.</param>
      <param name="handleSize">The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.</param>
      <param name="snap">(float or Vector2) The snap increment along both axes, either uniform or per-axis. See Handles.SnapValue.</param>
      <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
      <param name="capFunction">The function to call for doing the actual drawing.</param>
      <returns>
        <para>The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the position value passed into the function.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.SnapValue(System.Single,System.Single)">
      <summary>
        <para>Rounds the value val to the closest multiple of snap (snap can only be positive).</para>
      </summary>
      <param name="val"></param>
      <param name="snap"></param>
      <returns>
        <para>The rounded value, if snap is positive, and val otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.SphereHandleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.EventType)">
      <summary>
        <para>Draw a sphere handle. Pass this into handle functions.</para>
      </summary>
      <param name="controlID">The control ID for the handle.</param>
      <param name="position">The position of the handle in the space of Handles.matrix.</param>
      <param name="rotation">The rotation of the handle in the space of Handles.matrix.</param>
      <param name="eventType">Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.</param>
      <param name="size">The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.</param>
    </member>
    <member name="T:UnityEditor.HandleUtility">
      <summary>
        <para>Helper functions for Scene View style 3D GUI.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.HandleUtility.acceleration">
      <summary>
        <para>Get standard acceleration for dragging values (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.HandleUtility.niceMouseDelta">
      <summary>
        <para>Get nice mouse delta to use for dragging a float value (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.HandleUtility.niceMouseDeltaZoom">
      <summary>
        <para>Get nice mouse delta to use for zooming (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.AddControl(System.Int32,System.Single)">
      <summary>
        <para>Record a distance measurement from a handle.</para>
      </summary>
      <param name="controlId"></param>
      <param name="distance"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.AddDefaultControl(System.Int32)">
      <summary>
        <para>Add the ID for a default control. This will be picked if nothing else is.</para>
      </summary>
      <param name="controlId"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.CalcLineTranslation(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Map a mouse drag onto a movement along a line in 3D space.</para>
      </summary>
      <param name="src">The source point of the drag.</param>
      <param name="dest">The destination point of the drag.</param>
      <param name="srcPosition">The 3D position the dragged object had at src ray.</param>
      <param name="constraintDir">3D direction of constrained movement.</param>
      <returns>
        <para>The distance travelled along constraintDir.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.HandleUtility.ClosestPointToArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
      <summary>
        <para>Get the point on an arc (in 3D space) which is closest to the current mouse position.</para>
      </summary>
      <param name="center"></param>
      <param name="normal"></param>
      <param name="from"></param>
      <param name="angle"></param>
      <param name="radius"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.ClosestPointToDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Get the point on an disc (in 3D space) which is closest to the current mouse position.</para>
      </summary>
      <param name="center"></param>
      <param name="normal"></param>
      <param name="radius"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.ClosestPointToPolyLine(UnityEngine.Vector3[])">
      <summary>
        <para>Get the point on a polyline (in 3D space) which is closest to the current mouse position.</para>
      </summary>
      <param name="vertices"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistancePointBezier(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Calculate distance between a point and a Bezier curve.</para>
      </summary>
      <param name="point"></param>
      <param name="startPosition"></param>
      <param name="endPosition"></param>
      <param name="startTangent"></param>
      <param name="endTangent"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistancePointLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Calculate distance between a point and a line.</para>
      </summary>
      <param name="point"></param>
      <param name="lineStart"></param>
      <param name="lineEnd"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistancePointToLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Distance from a point p in 2d to a line defined by two points a and b.</para>
      </summary>
      <param name="p"></param>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistancePointToLineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Distance from a point p in 2d to a line segment defined by two points a and b.</para>
      </summary>
      <param name="p"></param>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
      <summary>
        <para>Pixel distance from mouse pointer to a 3D section of a disc.</para>
      </summary>
      <param name="center"></param>
      <param name="normal"></param>
      <param name="from"></param>
      <param name="angle"></param>
      <param name="radius"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToCircle(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Pixel distance from mouse pointer to camera facing circle.</para>
      </summary>
      <param name="position"></param>
      <param name="radius"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Pixel distance from mouse pointer to a 3D disc.</para>
      </summary>
      <param name="center"></param>
      <param name="normal"></param>
      <param name="radius"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToLine(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Pixel distance from mouse pointer to line.</para>
      </summary>
      <param name="p1"></param>
      <param name="p2"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToPolyLine(UnityEngine.Vector3[])">
      <summary>
        <para>Pixel distance from mouse pointer to a polyline.</para>
      </summary>
      <param name="points"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToRectangle(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Pixel distance from mouse pointer to a rectangle on screen.</para>
      </summary>
      <param name="position"></param>
      <param name="rotation"></param>
      <param name="size"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.GetHandleSize(UnityEngine.Vector3)">
      <summary>
        <para>Get world space size of a manipulator handle at given position.</para>
      </summary>
      <param name="position">The position of the handle in 3d space.</param>
      <returns>
        <para>A constant screen-size for the handle, based on the distance between from the supplied handle's position to the camera.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.HandleUtility.GUIPointToScreenPixelCoordinate(UnityEngine.Vector2)">
      <summary>
        <para>Converts a 2D GUI position to screen pixel coordinates.</para>
      </summary>
      <param name="guiPoint"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.GUIPointToWorldRay(UnityEngine.Vector2)">
      <summary>
        <para>Convert 2D GUI position to a world space ray.</para>
      </summary>
      <param name="position"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.PickGameObject(UnityEngine.Vector2,System.Boolean)">
      <summary>
        <para>Pick game object closest to specified position.</para>
      </summary>
      <param name="selectPrefabRoot">Select prefab.</param>
      <param name="materialIndex">Returns index into material array of the Renderer component that is closest to specified position.</param>
      <param name="position"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.PickGameObject(UnityEngine.Vector2,System.Int32&amp;)">
      <summary>
        <para>Pick game object closest to specified position.</para>
      </summary>
      <param name="selectPrefabRoot">Select prefab.</param>
      <param name="materialIndex">Returns index into material array of the Renderer component that is closest to specified position.</param>
      <param name="position"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.PickRectObjects(UnityEngine.Rect)">
      <summary>
        <para>Pick GameObjects that lie within a specified screen rectangle.</para>
      </summary>
      <param name="rect">An screen rectangle specified with pixel coordinates.</param>
    </member>
    <member name="M:UnityEditor.HandleUtility.PickRectObjects(UnityEngine.Rect,System.Boolean)">
      <summary>
        <para></para>
      </summary>
      <param name="rect"></param>
      <param name="selectPrefabRootsOnly"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.PointOnLineParameter(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Returns the parameter for the projection of the point on the given line.</para>
      </summary>
      <param name="point"></param>
      <param name="linePoint"></param>
      <param name="lineDirection"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.PopCamera(UnityEngine.Camera)">
      <summary>
        <para>Retrieve all camera settings.</para>
      </summary>
      <param name="camera"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.ProjectPointLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Project point onto a line.</para>
      </summary>
      <param name="point"></param>
      <param name="lineStart"></param>
      <param name="lineEnd"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.PushCamera(UnityEngine.Camera)">
      <summary>
        <para>Store all camera settings.</para>
      </summary>
      <param name="camera"></param>
    </member>
    <member name="M:UnityEditor.HandleUtility.RaySnap(UnityEngine.Ray)">
      <summary>
        <para>Casts ray against the scene and report if an object lies in its path.</para>
      </summary>
      <param name="ray"></param>
      <returns>
        <para>A boxed RaycastHit, null if nothing hit it.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.HandleUtility.Repaint">
      <summary>
        <para>Repaint the current view.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.WorldPointToSizedRect(UnityEngine.Vector3,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Calculate a rectangle to display a 2D GUI element near a projected point in 3D space.</para>
      </summary>
      <param name="position">The world-space position to use.</param>
      <param name="content">The content to make room for.</param>
      <param name="style">The style to use. The style's alignment.</param>
    </member>
    <member name="M:UnityEditor.HandleUtility.WorldToGUIPoint(UnityEngine.Vector3)">
      <summary>
        <para>Convert world space point to a 2D GUI position.</para>
      </summary>
      <param name="world">Point in world space.</param>
    </member>
    <member name="T:UnityEditor.Help">
      <summary>
        <para>Helper class to access Unity documentation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Help.BrowseURL(System.String)">
      <summary>
        <para>Open url in the default web browser.</para>
      </summary>
      <param name="url"></param>
    </member>
    <member name="M:UnityEditor.Help.GetHelpURLForObject(UnityEngine.Object)">
      <summary>
        <para>Get the URL for this object's documentation.</para>
      </summary>
      <param name="obj">The object to retrieve documentation for.</param>
      <returns>
        <para>The documentation URL for the object. Note that this could use the http: or file: schemas.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Help.HasHelpForObject(UnityEngine.Object)">
      <summary>
        <para>Is there a help page for this object?</para>
      </summary>
      <param name="obj"></param>
    </member>
    <member name="M:UnityEditor.Help.ShowHelpForObject(UnityEngine.Object)">
      <summary>
        <para>Show help page for this object.</para>
      </summary>
      <param name="obj"></param>
    </member>
    <member name="M:UnityEditor.Help.ShowHelpPage(System.String)">
      <summary>
        <para>Show a help page.</para>
      </summary>
      <param name="page"></param>
    </member>
    <member name="T:UnityEditor.Highlighter">
      <summary>
        <para>Use this class to highlight elements in the editor for use in in-editor tutorials and similar.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Highlighter.active">
      <summary>
        <para>Is there currently an active highlight?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Highlighter.activeRect">
      <summary>
        <para>The rect in screenspace of the current active highlight.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Highlighter.activeText">
      <summary>
        <para>The text of the current active highlight.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Highlighter.activeVisible">
      <summary>
        <para>Is the current active highlight visible yet?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Highlighter.Highlight(System.String,System.String)">
      <summary>
        <para>Highlights an element in the editor.</para>
      </summary>
      <param name="windowTitle">The title of the window the element is inside.</param>
      <param name="text">The text to identify the element with.</param>
      <param name="mode">Optional mode to specify how to search for the element.</param>
      <returns>
        <para>true if the requested element was found; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Highlighter.Highlight(System.String,System.String,UnityEditor.HighlightSearchMode)">
      <summary>
        <para>Highlights an element in the editor.</para>
      </summary>
      <param name="windowTitle">The title of the window the element is inside.</param>
      <param name="text">The text to identify the element with.</param>
      <param name="mode">Optional mode to specify how to search for the element.</param>
      <returns>
        <para>true if the requested element was found; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Highlighter.HighlightIdentifier(UnityEngine.Rect,System.String)">
      <summary>
        <para>Call this method to create an identifiable rect that the Highlighter can find.</para>
      </summary>
      <param name="position">The position to make highlightable.</param>
      <param name="identifier">The identifier text of the rect.</param>
    </member>
    <member name="M:UnityEditor.Highlighter.Stop">
      <summary>
        <para>Stops the active highlight.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.HighlightSearchMode">
      <summary>
        <para>Used to specify how to find a given element in the editor to highlight.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.Auto">
      <summary>
        <para>Highlights the first element found using any of the search modes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.Content">
      <summary>
        <para>Highlights an element containing text using the text as identifier.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.Identifier">
      <summary>
        <para>Highlights an element with a given identifier text.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.None">
      <summary>
        <para>Highlights nothing.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.PrefixLabel">
      <summary>
        <para>Highlights an entire editor control using its label text as identifier.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.IconKind">
      <summary>
        <para>Icon kind.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IconKind.Any">
      <summary>
        <para>This icon can be used for any purpose in an application.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IconKind.Application">
      <summary>
        <para>This icon is used for the main application icons.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IconKind.Notification">
      <summary>
        <para>This icon is used for push notifications.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IconKind.Settings">
      <summary>
        <para>This icon is used for settings.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IconKind.Spotlight">
      <summary>
        <para>This icon is used for Spotlight searches. (iOS only).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.IHVImageFormatImporter">
      <summary>
        <para>Use IHVImageFormatImporter to modify Texture2D import settings for Textures in IHV (Independent Hardware Vendor) formats such as .DDS and .PVR from Editor scripts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IHVImageFormatImporter.filterMode">
      <summary>
        <para>Filtering mode of the texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IHVImageFormatImporter.isReadable">
      <summary>
        <para>Is texture data readable from scripts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IHVImageFormatImporter.wrapMode">
      <summary>
        <para>Wrap mode of the texture.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.BoxBoundsHandle">
      <summary>
        <para>A compound handle to edit a box-shaped bounding volume in the Scene view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.BoxBoundsHandle.size">
      <summary>
        <para>Gets or sets the size of the bounding box.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.BoxBoundsHandle.#ctor(System.Int32)">
      <summary>
        <para>Create a new instance of the BoxBoundsHandle class.</para>
      </summary>
      <param name="controlIDHint">An integer value used to generate consistent control IDs for each control handle on this instance. You may use any value you like, but should avoid using the same value for all of your PrimitiveBoundsHandle instances.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.BoxBoundsHandle.DrawWireframe">
      <summary>
        <para>Draw a wireframe box for this instance.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.CapsuleBoundsHandle">
      <summary>
        <para>A compound handle to edit a capsule-shaped bounding volume in the Scene view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.CapsuleBoundsHandle.height">
      <summary>
        <para>Gets or sets the height of the capsule bounding volume.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.CapsuleBoundsHandle.heightAxis">
      <summary>
        <para>Gets or sets the axis in the handle's space to which height maps. The radius maps to the remaining axes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.CapsuleBoundsHandle.radius">
      <summary>
        <para>Gets or sets the radius of the capsule bounding volume.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.CapsuleBoundsHandle.#ctor(System.Int32)">
      <summary>
        <para>Create a new instance of the CapsuleBoundsHandle class.</para>
      </summary>
      <param name="controlIDHint">An integer value used to generate consistent control IDs for each control handle on this instance. You may use any value you like, but should avoid using the same value for all of your PrimitiveBoundsHandle instances.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.CapsuleBoundsHandle.DrawWireframe">
      <summary>
        <para>Draw a wireframe capsule for this instance.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.CapsuleBoundsHandle.HeightAxis">
      <summary>
        <para>An enumeration for specifying which axis on a CapsuleBoundsHandle object maps to the CapsuleBoundsHandle.height parameter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.CapsuleBoundsHandle.HeightAxis.X">
      <summary>
        <para>X-axis.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.CapsuleBoundsHandle.HeightAxis.Y">
      <summary>
        <para>Y-axis.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.CapsuleBoundsHandle.HeightAxis.Z">
      <summary>
        <para>Z-axis.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.CapsuleBoundsHandle.OnHandleChanged(UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle/HandleDirection,UnityEngine.Bounds,UnityEngine.Bounds)">
      <summary>
        <para>A callback for when a control handle was dragged in the scene.</para>
      </summary>
      <param name="handle">The handle that was dragged.</param>
      <param name="boundsOnClick">The raw Bounds for this instance's volume at the time the control handle was clicked.</param>
      <param name="newBounds">The raw Bounds for this instance's volume based on the updated handle position.</param>
      <returns>
        <para>The bounds that should be applied to this instance, with any necessary modifications applied.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.MultiColumnHeader">
      <summary>
        <para>The MultiColumnHeader is a general purpose class that e.g can be used with the TreeView to create multi-column tree views and list views.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.MultiColumnHeader.canSort">
      <summary>
        <para>Use this property to control whether sorting is enabled for all the columns.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.MultiColumnHeader.height">
      <summary>
        <para>Customizable height of the multi column header.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.MultiColumnHeader.sortedColumnIndex">
      <summary>
        <para>The index of the column that is set to be the primary sorting column. This is the column that shows the sorting arrow above the header text.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.IMGUI.Controls.MultiColumnHeader.sortingChanged(UnityEditor.IMGUI.Controls.MultiColumnHeader/HeaderCallback)">
      <summary>
        <para>Subscribe to this event to get notified when sorting has changed.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.MultiColumnHeader.state">
      <summary>
        <para>This is the state of the MultiColumnHeader.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.IMGUI.Controls.MultiColumnHeader.visibleColumnsChanged(UnityEditor.IMGUI.Controls.MultiColumnHeader/HeaderCallback)">
      <summary>
        <para>Subscribe to this event to get notified when the number of visible columns has changed.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.AddColumnHeaderContextMenuItems(UnityEditor.GenericMenu)">
      <summary>
        <para>Override this method to extend the default context menu items shown when context clicking the header area.</para>
      </summary>
      <param name="menu">Context menu shown.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.ColumnHeaderClicked(UnityEditor.IMGUI.Controls.MultiColumnHeaderState/Column,System.Int32)">
      <summary>
        <para>Override to customize the behavior when clicking a column header.</para>
      </summary>
      <param name="column">Column clicked.</param>
      <param name="columnIndex">Column index clicked.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.ColumnHeaderGUI(UnityEditor.IMGUI.Controls.MultiColumnHeaderState/Column,UnityEngine.Rect,System.Int32)">
      <summary>
        <para>Override to customize the GUI of a single column header.</para>
      </summary>
      <param name="column">Column header data.</param>
      <param name="headerRect">Rect for column header.</param>
      <param name="columnIndex">Column index.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.#ctor(UnityEditor.IMGUI.Controls.MultiColumnHeaderState)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="state">Column header state and Column state.</param>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.MultiColumnHeader.DefaultGUI">
      <summary>
        <para>Default GUI methods and properties for the MultiColumnHeader class.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.MultiColumnHeader.DefaultGUI.columnContentMargin">
      <summary>
        <para>Margin that can be used by clients of the MultiColumnHeader to control spacing between content in multiple columns.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.MultiColumnHeader.DefaultGUI.defaultHeight">
      <summary>
        <para>Default height of the header.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.MultiColumnHeader.DefaultGUI.minimumHeight">
      <summary>
        <para>This height is the minium height the header can have and can only be used if sorting is disabled.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.MultiColumnHeader.DefaultStyles">
      <summary>
        <para>Default styles used by the MultiColumnHeader class.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.MultiColumnHeader.DefaultStyles.background">
      <summary>
        <para>Style used for rendering the background of the header.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.MultiColumnHeader.DefaultStyles.columnHeader">
      <summary>
        <para>Style used for left aligned header text.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.MultiColumnHeader.DefaultStyles.columnHeaderCenterAligned">
      <summary>
        <para>Style used for centered header text.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.MultiColumnHeader.DefaultStyles.columnHeaderRightAligned">
      <summary>
        <para>Style used for right aligned header text.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.GetCellRect(System.Int32,UnityEngine.Rect)">
      <summary>
        <para>Calculates a cell rect for a column and row using the visibleColumnIndex and rowRect parameters.</para>
      </summary>
      <param name="visibleColumnIndex"></param>
      <param name="rowRect"></param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.GetColumn(System.Int32)">
      <summary>
        <para>Returns the column data for a given column index.</para>
      </summary>
      <param name="columnIndex">Column index.</param>
      <returns>
        <para>Column data.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.GetColumnRect(System.Int32)">
      <summary>
        <para>Returns the header column Rect for a given visible column index.</para>
      </summary>
      <param name="visibleColumnIndex">Index of a visible column.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.GetVisibleColumnIndex(System.Int32)">
      <summary>
        <para>Convert from column index to visible column index.</para>
      </summary>
      <param name="columnIndex">Column index.</param>
      <returns>
        <para>Visible column index.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.MultiColumnHeader.HeaderCallback">
      <summary>
        <para>Delegate used for events from the MultiColumnHeader.</para>
      </summary>
      <param name="multiColumnHeader">The MultiColumnHeader that dispatched this event.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.IsColumnVisible(System.Int32)">
      <summary>
        <para>Check if a column is currently visible in the MultiColumnHeader.</para>
      </summary>
      <param name="columnIndex">Column index.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.IsSortedAscending(System.Int32)">
      <summary>
        <para>Check the sorting order state for a column.</para>
      </summary>
      <param name="columnIndex">Column index.</param>
      <returns>
        <para>True if sorted ascending.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.OnGUI(UnityEngine.Rect,System.Single)">
      <summary>
        <para>Render and handle input for the MultiColumnHeader at the given rect.</para>
      </summary>
      <param name="xScroll">Horizontal scroll offset.</param>
      <param name="rect">Rect where the MultiColumnHeader is drawn in.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.OnSortingChanged">
      <summary>
        <para>Called when sorting changes and dispatches the sortingChanged event.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.OnVisibleColumnsChanged">
      <summary>
        <para>Called when the number of visible column changes and dispatches the visibleColumnsChanged event.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.Repaint">
      <summary>
        <para>Requests the window which contains the MultiColumnHeader to repaint.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.ResizeToFit">
      <summary>
        <para>Resizes the column widths of the columns that have auto-resize enabled to make all the columns fit to the width of the MultiColumnHeader render rect.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.SetSortDirection(System.Int32,System.Boolean)">
      <summary>
        <para>Change sort direction for a given column.</para>
      </summary>
      <param name="columnIndex">Column index.</param>
      <param name="sortAscending">Direction of the sorting.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.SetSorting(System.Int32,System.Boolean)">
      <summary>
        <para>Sets the primary sorting column and its sorting order.</para>
      </summary>
      <param name="columnIndex">Column to sort.</param>
      <param name="sortAscending">Sorting order for the column specified.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.SetSortingColumns(System.Int32[],System.Boolean[])">
      <summary>
        <para>Sets multiple sorting columns and the associated sorting orders.</para>
      </summary>
      <param name="columnIndices">Column indices of the sorted columns.</param>
      <param name="sortAscending">Sorting order for the column indices specified.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.SortingButton(UnityEditor.IMGUI.Controls.MultiColumnHeaderState/Column,UnityEngine.Rect,System.Int32)">
      <summary>
        <para>Provides the button logic for a column header and the rendering of the sorting arrow (if visible).</para>
      </summary>
      <param name="column">Column data.</param>
      <param name="headerRect">Column header rect.</param>
      <param name="columnIndex">Column index.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeader.ToggleVisibility(System.Int32)">
      <summary>
        <para>Method for toggling the visibility of a column.</para>
      </summary>
      <param name="columnIndex">Toggle visibility for this column.</param>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.MultiColumnHeaderState">
      <summary>
        <para>State used by the MultiColumnHeader.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.columns">
      <summary>
        <para>The array of column states used by the MultiColumnHeader class.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.maximumNumberOfSortedColumns">
      <summary>
        <para>This property controls the maximum number of columns returned by the sortedColumns property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.sortedColumnIndex">
      <summary>
        <para>This property holds the index to the primary sorted column.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.sortedColumns">
      <summary>
        <para>The array of column indices for multiple column sorting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.visibleColumns">
      <summary>
        <para>This is the array of currently visible column indices.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.widthOfAllVisibleColumns">
      <summary>
        <para>Returns the sum of all the widths of the visible columns in the visibleColumns array.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.CanOverwriteSerializedFields(UnityEditor.IMGUI.Controls.MultiColumnHeaderState,UnityEditor.IMGUI.Controls.MultiColumnHeaderState)">
      <summary>
        <para>Checks if the source state can transfer its serialized data to the destination state.</para>
      </summary>
      <param name="source">State that have serialized data to be transfered to the destination state.</param>
      <param name="destination">Destination state.</param>
      <returns>
        <para>Returns true if the source state have the same number of columns as the destination state.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column">
      <summary>
        <para>Column state.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column.allowToggleVisibility">
      <summary>
        <para>Option to allow/disallow hiding the column from the context menu.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column.autoResize">
      <summary>
        <para>Option to allow the column to resize automatically when resizing the entire MultiColumnHeader.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column.canSort">
      <summary>
        <para>Is sorting enabled for this column. If false, left-clicking this column header has no effect.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column.contextMenuText">
      <summary>
        <para>If this is set then it is used for the context menu for toggling visibility, if not set then the ::headerContent is used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column.headerContent">
      <summary>
        <para>This is the GUIContent that will be rendered in the column header.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column.headerTextAlignment">
      <summary>
        <para>Alignment of the header content.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column.maxWidth">
      <summary>
        <para>Maximum width of the column.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column.minWidth">
      <summary>
        <para>Minimum width of the column.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column.sortedAscending">
      <summary>
        <para>Value that controls if this column is sorted ascending or descending.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column.sortingArrowAlignment">
      <summary>
        <para>Alignment of the sorting arrow.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column.width">
      <summary>
        <para>The width of the column.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.#ctor(UnityEditor.IMGUI.Controls.MultiColumnHeaderState/Column[])">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="columns">Column data.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.MultiColumnHeaderState.OverwriteSerializedFields(UnityEditor.IMGUI.Controls.MultiColumnHeaderState,UnityEditor.IMGUI.Controls.MultiColumnHeaderState)">
      <summary>
        <para>Overwrites the seralized fields from the source state to the destination state.</para>
      </summary>
      <param name="source">State that have serialized data to be transfered to the destination state.</param>
      <param name="destination">Destination state.</param>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle">
      <summary>
        <para>Base class for a compound handle to edit a bounding volume in the Scene view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.axes">
      <summary>
        <para>Flags specifying which axes should display control handles.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.center">
      <summary>
        <para>Gets or sets the center of the bounding volume for the handle.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.handleColor">
      <summary>
        <para>Specifies the color of the control handles.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.midpointHandleDrawFunction">
      <summary>
        <para>An optional Handles.CapFunction to use when displaying the control handles. Defaults to Handles.DotHandleCap if no value is specified.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.midpointHandleSizeFunction">
      <summary>
        <para>An optional Handles.SizeFunction to specify how large the control handles should be in the space of Handles.matrix. Defaults to a fixed screen-space size.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.wireframeColor">
      <summary>
        <para>Specifies the color of the wireframe shape.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.Axes">
      <summary>
        <para>A flag enumeration for specifying which axes on a PrimitiveBoundsHandle object should be enabled.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.Axes.All">
      <summary>
        <para>All axes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.Axes.None">
      <summary>
        <para>No axes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.Axes.X">
      <summary>
        <para>X-axis (bit 0).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.Axes.Y">
      <summary>
        <para>Y-axis (bit 1).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.Axes.Z">
      <summary>
        <para>Z-axis (bit 2).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.#ctor(System.Int32)">
      <summary>
        <para>Create a new instance of the PrimitiveBoundsHandle class.</para>
      </summary>
      <param name="controlIDHint">An integer value used to generate consistent control IDs for each control handle on this instance. You may use any value you like, but should avoid using the same value for all of your PrimitiveBoundsHandle instances.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.DrawHandle">
      <summary>
        <para>A function to display this instance in the current handle camera using its current configuration.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.DrawWireframe">
      <summary>
        <para>Draw a wireframe shape for this instance. Subclasses must implement this method.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.GetSize">
      <summary>
        <para>Gets the current size of the bounding volume for this instance.</para>
      </summary>
      <returns>
        <para>The current size of the bounding volume for this instance.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.HandleDirection">
      <summary>
        <para>An enumeration of directions the handle moves in.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.HandleDirection.NegativeX">
      <summary>
        <para>This value corresponds to the handle moving in a negative direction away from PrimitiveBoundsHandle.center along the x-axis.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.HandleDirection.NegativeY">
      <summary>
        <para>This value corresponds to the handle moving in a negative direction away from PrimitiveBoundsHandle.center along the y-axis.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.HandleDirection.NegativeZ">
      <summary>
        <para>This value corresponds to the handle moving in a negative direction away from PrimitiveBoundsHandle.center along the z-axis.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.HandleDirection.PositiveX">
      <summary>
        <para>This value corresponds to the handle moving in a positive direction away from PrimitiveBoundsHandle.center along the x-axis.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.HandleDirection.PositiveY">
      <summary>
        <para>This value corresponds to the handle moving in a positive direction away from PrimitiveBoundsHandle.center along the y-axis.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.HandleDirection.PositiveZ">
      <summary>
        <para>This value corresponds to the handle moving in a positive direction away from PrimitiveBoundsHandle.center along the z-axis.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.IsAxisEnabled(UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle/Axes)">
      <summary>
        <para>Gets a value indicating whether the specified axis is enabled for the current instance.</para>
      </summary>
      <param name="axis">An Axes.</param>
      <param name="vector3Axis">An integer corresponding to an axis on a Vector3. For example, 0 is x, 1 is y, and 2 is z.</param>
      <returns>
        <para>true if the specified axis is enabled; otherwise, false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.IsAxisEnabled(System.Int32)">
      <summary>
        <para>Gets a value indicating whether the specified axis is enabled for the current instance.</para>
      </summary>
      <param name="axis">An Axes.</param>
      <param name="vector3Axis">An integer corresponding to an axis on a Vector3. For example, 0 is x, 1 is y, and 2 is z.</param>
      <returns>
        <para>true if the specified axis is enabled; otherwise, false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.OnHandleChanged(UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle/HandleDirection,UnityEngine.Bounds,UnityEngine.Bounds)">
      <summary>
        <para>A callback for when a control handle was dragged in the scene.</para>
      </summary>
      <param name="handle">The handle that was dragged.</param>
      <param name="boundsOnClick">The raw Bounds for this instance's volume at the time the control handle was clicked.</param>
      <param name="newBounds">The raw Bounds for this instance's volume based on the updated handle position.</param>
      <returns>
        <para>The bounds that should be applied to this instance, with any necessary modifications applied.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.SetColor(UnityEngine.Color)">
      <summary>
        <para>Set handleColor and wireframeColor to the same value.</para>
      </summary>
      <param name="color">The color to use for the control handles and the wireframe shape.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.SetSize(UnityEngine.Vector3)">
      <summary>
        <para>Sets the current size of the bounding volume for this instance.</para>
      </summary>
      <param name="size">A Vector3 specifying how large the bounding volume is along all of its axes.</param>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.SearchField">
      <summary>
        <para>The SearchField control creates a text field for a user to input text that can be used for searching.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.SearchField.autoSetFocusOnFindCommand">
      <summary>
        <para>Changes the keyboard focus to the search field when the user presses ‘Ctrl/Cmd + F’ when set to true. It is true by default.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.IMGUI.Controls.SearchField.downOrUpArrowKeyPressed(UnityEditor.IMGUI.Controls.SearchField/SearchFieldCallback)">
      <summary>
        <para>This event is dispatched when the focused search field detects that the down or up key is pressed and can be used to change keyboard focus to another control, such as the TreeView.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.SearchField.searchFieldControlID">
      <summary>
        <para>This is the controlID used for the text field to obtain keyboard focus.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.SearchField.HasFocus">
      <summary>
        <para>This function returns true if the search field has keyboard focus.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.SearchField.OnGUI(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>This function displays the search field with the default UI style and uses the GUILayout class to automatically calculate the position and size of the Rect it is rendered to. Pass an optional list to specify extra layout properties.</para>
      </summary>
      <param name="text">Text string to display in the search field.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. &lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The text entered in the search field. The original input string is returned instead if the search field text was not changed.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.SearchField.OnGUI(UnityEngine.Rect,System.String)">
      <summary>
        <para>This function displays the search field with the default UI style in the given Rect.</para>
      </summary>
      <param name="rect">Rectangle to use for the search field.</param>
      <param name="text">Text string to display in the search field.</param>
      <returns>
        <para>The text entered in the search field. The original input string is returned instead if the search field text was not changed.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.SearchField.OnGUI(UnityEngine.Rect,System.String,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
      <summary>
        <para>This function displays a search text field with the given Rect and UI style parameters.</para>
      </summary>
      <param name="rect">Rectangle to use for the search field.</param>
      <param name="text">Text string to display in the search field.</param>
      <param name="style">The text field style.</param>
      <param name="cancelButtonStyle">The cancel button style used when there is text in the search field.</param>
      <param name="emptyCancelButtonStyle">The cancel button style used when there is no text in the search field.</param>
      <returns>
        <para>The text entered in the SearchField. The original input string is returned instead if the search field text was not changed.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.SearchField.OnToolbarGUI(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>This function displays the search field with the toolbar UI style and uses the GUILayout class to automatically calculate the position and size of the Rect it is rendered to. Pass an optional list to specify extra layout properties.</para>
      </summary>
      <param name="text">Text string to display in the search field.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. &lt;br&gt;
See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.</param>
      <returns>
        <para>The text entered in the search field. The original input string is returned instead if the search field text was not changed.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.SearchField.OnToolbarGUI(UnityEngine.Rect,System.String)">
      <summary>
        <para>This function displays the search field with a toolbar style in the given Rect.</para>
      </summary>
      <param name="rect">Rectangle to use for the search field.</param>
      <param name="text">Text string to display in the search field.</param>
      <returns>
        <para>The text entered in the search field. The original input string is returned instead if the search field text was not changed.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.SearchField.SearchFieldCallback">
      <summary>
        <para>This is a generic callback delegate for SearchField events and does not take any parameters.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.SearchField.SetFocus">
      <summary>
        <para>This function changes keyboard focus to the search field so a user can start typing.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.SphereBoundsHandle">
      <summary>
        <para>A compound handle to edit a sphere-shaped bounding volume in the Scene view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.SphereBoundsHandle.radius">
      <summary>
        <para>Gets or sets the radius of the capsule bounding volume.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.SphereBoundsHandle.#ctor(System.Int32)">
      <summary>
        <para>Create a new instance of the SphereBoundsHandle class.</para>
      </summary>
      <param name="controlIDHint">An integer value used to generate consistent control IDs for each control handle on this instance. You may use any value you like, but should avoid using the same value for all of your PrimitiveBoundsHandle instances.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.SphereBoundsHandle.DrawWireframe">
      <summary>
        <para>Draw a wireframe sphere for this instance.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.SphereBoundsHandle.OnHandleChanged(UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle/HandleDirection,UnityEngine.Bounds,UnityEngine.Bounds)">
      <summary>
        <para>A callback for when a control handle was dragged in the scene.</para>
      </summary>
      <param name="handle">The handle that was dragged.</param>
      <param name="boundsOnClick">The raw Bounds for this instance's volume at the time the control handle was clicked.</param>
      <param name="newBounds">The raw Bounds for this instance's volume based on the updated handle position.</param>
      <returns>
        <para>The bounds that should be applied to this instance, with any necessary modifications applied.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.TreeView">
      <summary>
        <para>The TreeView is an IMGUI control that lets you create tree views, list views and multi-column tables for Editor tools.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.baseIndent">
      <summary>
        <para>Indent used for all rows before the tree foldout arrows and content.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.cellMargin">
      <summary>
        <para>When using a MultiColumnHeader this value adjusts the cell rects provided for all columns except the tree foldout column.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.columnIndexForTreeFoldouts">
      <summary>
        <para>When using a MultiColumnHeader this value should be set to the column index in which the foldout arrows should appear.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.customFoldoutYOffset">
      <summary>
        <para>Custom vertical offset of the foldout arrow.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.depthIndentWidth">
      <summary>
        <para>Value that returns how far the foldouts are indented for each increasing depth value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.extraSpaceBeforeIconAndLabel">
      <summary>
        <para>Value to control the spacing before the default icon and label. Can be used e.g for placing a toggle button to the left of the content.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.foldoutWidth">
      <summary>
        <para>Width of the built-in foldout arrow.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.hasSearch">
      <summary>
        <para>The current search state of the TreeView.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.isDragging">
      <summary>
        <para>True if the user is currently dragging one or more items in the TreeView, and false otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.isInitialized">
      <summary>
        <para>The TreeView is initialized by calling Reload(). Therefore returns false until Reload() is called the first time.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.multiColumnHeader">
      <summary>
        <para>Get the MultiColumnHeader of the TreeView. Can be null if the TreeView was created without a MultiColumnHeader.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.rootItem">
      <summary>
        <para>The hidden root item of the TreeView (it is never rendered).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.rowHeight">
      <summary>
        <para>The fixed height used for each row in the TreeView if GetCustomRowHeight have not been overridden.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.searchString">
      <summary>
        <para>Current search string of the TreeView.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.showAlternatingRowBackgrounds">
      <summary>
        <para>Enable this to show alternating row background colors.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.showBorder">
      <summary>
        <para>Enable this to show a border around the TreeView.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.showingHorizontalScrollBar">
      <summary>
        <para>Returns true if the horizontal scroll bar is showing, otherwise false.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.showingVerticalScrollBar">
      <summary>
        <para>Returns true if the vertical scroll bar is showing, otherwise false.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.state">
      <summary>
        <para>The state of the TreeView (expanded state, selection, scroll etc.)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.totalHeight">
      <summary>
        <para>Returns the sum of the TreeView row heights, the MultiColumnHeader height (if used) and the border (if used).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.treeViewControlID">
      <summary>
        <para>The controlID used by the TreeView to obtain keyboard control focus.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeView.treeViewRect">
      <summary>
        <para>The Rect the TreeView is being rendered to.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.AddExpandedRows(UnityEditor.IMGUI.Controls.TreeViewItem,System.Collections.Generic.IList`1&lt;UnityEditor.IMGUI.Controls.TreeViewItem&gt;)">
      <summary>
        <para>Adds the expanded rows of the full tree to the input list. Only use this method if a full tree was built in BuildRoot.</para>
      </summary>
      <param name="root">Root of the TreeView.</param>
      <param name="rows">Rows that will be refilled using the expanded state of TreeView.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.AfterRowsGUI">
      <summary>
        <para>This is called after all rows have their RowGUI called.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.BeforeRowsGUI">
      <summary>
        <para>This is called before any rows have their RowGUI called.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.BeginRename(UnityEditor.IMGUI.Controls.TreeViewItem)">
      <summary>
        <para>Shows the rename overlay for a TreeViewItem.</para>
      </summary>
      <param name="item">Item to rename.</param>
      <param name="delay">Delay in seconds until the rename overlay shows.</param>
      <returns>
        <para>Returns true if renaming was started. Returns false if renaming was already active.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.BeginRename(UnityEditor.IMGUI.Controls.TreeViewItem,System.Single)">
      <summary>
        <para>Shows the rename overlay for a TreeViewItem.</para>
      </summary>
      <param name="item">Item to rename.</param>
      <param name="delay">Delay in seconds until the rename overlay shows.</param>
      <returns>
        <para>Returns true if renaming was started. Returns false if renaming was already active.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.BuildRoot">
      <summary>
        <para>Abstract method that is required to be implemented. By default this method should create the full tree of TreeViewItems and return the root.</para>
      </summary>
      <returns>
        <para>The root of the tree. This item can later be accessed by 'rootItem'.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.BuildRows(UnityEditor.IMGUI.Controls.TreeViewItem)">
      <summary>
        <para>Override this method to take control of how the rows are generated.</para>
      </summary>
      <param name="root">Root item that was created in the BuildRoot method.</param>
      <returns>
        <para>The rows list shown in the TreeView. Can later be accessed using GetRows().</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.CanBeParent(UnityEditor.IMGUI.Controls.TreeViewItem)">
      <summary>
        <para>Override this method to control which items are allowed to be parents.</para>
      </summary>
      <param name="item">Can this item be a parent?</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.CanChangeExpandedState(UnityEditor.IMGUI.Controls.TreeViewItem)">
      <summary>
        <para>Override this method to control whether an item can be expanded or collapsed by key or mouse.</para>
      </summary>
      <param name="item">Can this item be expanded/collapsed.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.CanMultiSelect(UnityEditor.IMGUI.Controls.TreeViewItem)">
      <summary>
        <para>Override this method to control whether the item can be part of a multiselection.</para>
      </summary>
      <param name="item">Can this item be part of a multiselection.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.CanRename(UnityEditor.IMGUI.Controls.TreeViewItem)">
      <summary>
        <para>Override this method to control whether the item can be renamed using a keyboard shortcut or when clicking an already selected item.</para>
      </summary>
      <param name="item">Can this item be renamed?</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.CanStartDrag(UnityEditor.IMGUI.Controls.TreeView/CanStartDragArgs)">
      <summary>
        <para>This function is called whenever a TreeViewItem is clicked and dragged. It returns false by default.</para>
      </summary>
      <param name="args"></param>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.TreeView.CanStartDragArgs">
      <summary>
        <para>Method arguments for the CanStartDrag virtual method.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.CanStartDragArgs.draggedItem">
      <summary>
        <para>Item about to be dragged.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.CanStartDragArgs.draggedItemIDs">
      <summary>
        <para>The multi-selection about to be dragged.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.CenterRectUsingSingleLineHeight(UnityEngine.Rect&amp;)">
      <summary>
        <para>Modifies the input rect so it is centered and have a height equal to EditorGUIUtility.singleLineHeight.</para>
      </summary>
      <param name="rect">Rect to be modified and centered.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.CollapseAll">
      <summary>
        <para>Collapse all expanded items in the TreeView.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.CommandEventHandling">
      <summary>
        <para>This function is called automatically and handles the ExecuteCommand events for “SelectAll” and “FrameSelection”. Override this function to extend or avoid Command events.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.ContextClicked">
      <summary>
        <para>Override this method to handle context clicks outside any items (but still in the TreeView rect).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.ContextClickedItem(System.Int32)">
      <summary>
        <para>Override this method to handle a context click on an item with ID TreeViewItem.id.</para>
      </summary>
      <param name="id">TreeViewItem id.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.CreateChildListForCollapsedParent">
      <summary>
        <para>Creates a dummy TreeViewItem list. Useful when overriding BuildRows to prevent building a full tree of items.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.#ctor(UnityEditor.IMGUI.Controls.TreeViewState)">
      <summary>
        <para>The TreeView is always constructed with a state object and optionally a multi-column header object if a header is needed.</para>
      </summary>
      <param name="state">TreeView state (expanded items, selection etc.)</param>
      <param name="multiColumnHeader">Multi-column header for the TreeView.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.#ctor(UnityEditor.IMGUI.Controls.TreeViewState,UnityEditor.IMGUI.Controls.MultiColumnHeader)">
      <summary>
        <para>The TreeView is always constructed with a state object and optionally a multi-column header object if a header is needed.</para>
      </summary>
      <param name="state">TreeView state (expanded items, selection etc.)</param>
      <param name="multiColumnHeader">Multi-column header for the TreeView.</param>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.TreeView.DefaultGUI">
      <summary>
        <para>Default GUI methods and properties for the TreeView class.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.DefaultGUI.BoldLabel(UnityEngine.Rect,System.String,System.Boolean,System.Boolean)">
      <summary>
        <para>Draws a bold label that have correct text color when selected and/or focused.</para>
      </summary>
      <param name="rect">Rect to render the text in.</param>
      <param name="label">Label to render.</param>
      <param name="selected">Selected state used for determining text color.</param>
      <param name="focused">Focused state used for determining text color.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.DefaultGUI.BoldLabelRightAligned(UnityEngine.Rect,System.String,System.Boolean,System.Boolean)">
      <summary>
        <para>Draws a bold right aligned label that have correct text color when selected and/or focused.</para>
      </summary>
      <param name="rect">Rect to render the text in.</param>
      <param name="label">Label to render.</param>
      <param name="selected">Selected state used for determining text color.</param>
      <param name="focused">Focused state used for determining text color.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.DefaultGUI.FoldoutLabel(UnityEngine.Rect,System.String,System.Boolean,System.Boolean)">
      <summary>
        <para>Draws a foldout label that have correct text color when selected and/or focused.</para>
      </summary>
      <param name="rect">Rect to render the text in.</param>
      <param name="label">Label to render.</param>
      <param name="selected">Selected state used for determining text color.</param>
      <param name="focused">Focused state used for determining text color.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.DefaultGUI.Label(UnityEngine.Rect,System.String,System.Boolean,System.Boolean)">
      <summary>
        <para>Draws a label that have correct text color when selected and/or focused.</para>
      </summary>
      <param name="rect">Rect to render the text in.</param>
      <param name="label">Label to render.</param>
      <param name="selected">Selected state used for determining text color.</param>
      <param name="focused">Focused state used for determining text color.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.DefaultGUI.LabelRightAligned(UnityEngine.Rect,System.String,System.Boolean,System.Boolean)">
      <summary>
        <para>Draws a right aligned label that have correct text color when selected and/or focused.</para>
      </summary>
      <param name="rect">Rect to render the text in.</param>
      <param name="label">Label to render.</param>
      <param name="selected">Selected state used for determining text color.</param>
      <param name="focused">Focused state used for determining text color.</param>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.TreeView.DefaultStyles">
      <summary>
        <para>Default styles used by the TreeView class.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.DefaultStyles.backgroundEven">
      <summary>
        <para>Background style used for alternating row background colors when enabling TreeView.showAlternatingRowBackgrounds.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.DefaultStyles.backgroundOdd">
      <summary>
        <para>Background style used for alternating row background colors when enabling TreeView.showAlternatingRowBackgrounds.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.DefaultStyles.boldLabel">
      <summary>
        <para>Bold label with alternative text color when selected and/or focused.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.DefaultStyles.boldLabelRightAligned">
      <summary>
        <para>Right aligned bold label with alternative text color when selected and/or focused.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.DefaultStyles.foldoutLabel">
      <summary>
        <para>The label that is used for foldout label with alternative text color when selected and/or focused.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.DefaultStyles.label">
      <summary>
        <para>Left aligned label with alternative text color when selected and/or focused.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.DefaultStyles.labelRightAligned">
      <summary>
        <para>Right aligend label with alternative text color when selected and/or focused.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.DoesItemMatchSearch(UnityEditor.IMGUI.Controls.TreeViewItem,System.String)">
      <summary>
        <para>Override this function to extend or change the search behavior.</para>
      </summary>
      <param name="item">Item used for matching against the search string.</param>
      <param name="search">The search string of the TreeView.</param>
      <returns>
        <para>True if item matches search string, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.DoubleClickedItem(System.Int32)">
      <summary>
        <para>Override this method to handle double click events on an item.</para>
      </summary>
      <param name="id">ID of TreeViewItem that was double clicked.</param>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.TreeView.DragAndDropArgs">
      <summary>
        <para>Method arguments for the HandleDragAndDrop virtual method.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.DragAndDropArgs.dragAndDropPosition">
      <summary>
        <para>When dragging items the current drag can have the following 3 positions relative to the items: Upon an item, Between two items or Outside items.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.DragAndDropArgs.insertAtIndex">
      <summary>
        <para>This index refers to the index in the children list of the parentItem where the current drag is positioned.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.DragAndDropArgs.parentItem">
      <summary>
        <para>The parent item is set if the drag is either upon this item or between two of its children.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.DragAndDropArgs.performDrop">
      <summary>
        <para>This value is false as long as the mouse button is down, when the mouse button is released it is true.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.TreeView.DragAndDropPosition">
      <summary>
        <para>Enum describing the possible positions a drag can have relative to the items: upon a item, between two items or outside items.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.DragAndDropPosition.BetweenItems">
      <summary>
        <para>This value is used when dragging between two items.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.DragAndDropPosition.OutsideItems">
      <summary>
        <para>This value is used when dragging outside all items.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.DragAndDropPosition.UponItem">
      <summary>
        <para>This value is used when the drag is upon a item.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.EndRename">
      <summary>
        <para>Ends renaming if the rename overlay is shown. If called while the rename overlay is not being shown, this method does nothing.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.ExpandAll">
      <summary>
        <para>Expand all collapsed items in the TreeView.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.ExpandedStateChanged">
      <summary>
        <para>Override to get notified when items are expanded or collapsed. This is a general notification that the expanded state has changed.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.FindItem(System.Int32,UnityEditor.IMGUI.Controls.TreeViewItem)">
      <summary>
        <para>Finds a TreeViewItem by an ID.</para>
      </summary>
      <param name="id">Find the TreeViewItem with this ID.</param>
      <param name="searchFromThisItem">Sets the search to start from an item. Use 'rootItem' to search the entire tree.</param>
      <returns>
        <para>This search method returns the TreeViewItem found and returns null if not found.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.FindRows(System.Collections.Generic.IList`1&lt;System.Int32&gt;)">
      <summary>
        <para>Useful for converting from TreeViewItem IDs to TreeViewItems using the current rows.</para>
      </summary>
      <param name="ids">TreeViewItem IDs.</param>
      <returns>
        <para>TreeViewItems.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.FrameItem(System.Int32)">
      <summary>
        <para>This will reveal the item with ID id (by expanding the ancestors of that item) and will make sure it is visible in the ScrollView.</para>
      </summary>
      <param name="id">TreeViewItem ID.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.GetAncestors(System.Int32)">
      <summary>
        <para>This method is e.g. used for revealing items that are currently under a collapsed item.</para>
      </summary>
      <param name="id">TreeViewItem ID.</param>
      <returns>
        <para>List of all the ancestors of a given item with ID id.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.GetCellRectForTreeFoldouts(UnityEngine.Rect)">
      <summary>
        <para>Utility for multi column setups. This method will clip the input rowRect against the column rect defined by columnIndexForTreeFoldouts to get the cell rect where the the foldout arrows appear.</para>
      </summary>
      <param name="rowRect">Rect for a row.</param>
      <returns>
        <para>Cell rect in a multi column setup.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.GetContentIndent(UnityEditor.IMGUI.Controls.TreeViewItem)">
      <summary>
        <para>Returns the horizontal content offset for an item. This is where the content should begin (after the foldout arrow).</para>
      </summary>
      <param name="item">Item used to determine the indent.</param>
      <returns>
        <para>Indent.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.GetCustomRowHeight(System.Int32,UnityEditor.IMGUI.Controls.TreeViewItem)">
      <summary>
        <para>Override to control individual row heights.</para>
      </summary>
      <param name="row">Row index.</param>
      <param name="item">Item for given row.</param>
      <returns>
        <para>Height of row.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.GetDescendantsThatHaveChildren(System.Int32)">
      <summary>
        <para>Returns all descendants for the item with ID id that have children.</para>
      </summary>
      <param name="id">TreeViewItem ID.</param>
      <returns>
        <para>Descendants that have children.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.GetExpanded">
      <summary>
        <para>Returns a list of TreeViewItem IDs that are currently expanded in the TreeView.</para>
      </summary>
      <returns>
        <para>TreeViewItem IDs.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.GetFirstAndLastVisibleRows(System.Int32&amp;,System.Int32&amp;)">
      <summary>
        <para>Returns the first and the last indices of the rows that are visible in the scroll view of the TreeView.</para>
      </summary>
      <param name="firstRowVisible">First row visible.</param>
      <param name="lastRowVisible">Last row visible.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.GetFoldoutIndent(UnityEditor.IMGUI.Controls.TreeViewItem)">
      <summary>
        <para>Returns the horizontal foldout offset for an item. This is where the foldout arrow is rendered.</para>
      </summary>
      <param name="item">Item used to determine the indent.</param>
      <returns>
        <para>Indent for the foldout arrow.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.GetRenameRect(UnityEngine.Rect,System.Int32,UnityEditor.IMGUI.Controls.TreeViewItem)">
      <summary>
        <para>Override this method if custom GUI handling are used in RowGUI. This method for controls where the rename overlay appears.</para>
      </summary>
      <param name="rowRect">Row rect for the item currently being renamed.</param>
      <param name="row">Row index for the item currently being renamed.</param>
      <param name="item">TreeViewItem that are currently being renamed.</param>
      <returns>
        <para>The rect where the rename overlay should appear.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.GetRowRect(System.Int32)">
      <summary>
        <para>Get the rect for a row.</para>
      </summary>
      <param name="row">Row index.</param>
      <returns>
        <para>Row rect.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.GetRows">
      <summary>
        <para>This is the list of TreeViewItems that have been built in BuildRows.</para>
      </summary>
      <returns>
        <para>Rows.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.GetSelection">
      <summary>
        <para>Returns the list of TreeViewItem IDs that are currently selected.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.HandleDragAndDrop(UnityEditor.IMGUI.Controls.TreeView/DragAndDropArgs)">
      <summary>
        <para>Override this function to control the drag and drop behavior of the TreeView.</para>
      </summary>
      <param name="args">Drag and drop arguments.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.HasFocus">
      <summary>
        <para>Returns true if the TreeView and its EditorWindow have keyboard focus.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.HasSelection">
      <summary>
        <para>Returns true if the TreeView has a selection.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.IsChildListForACollapsedParent(System.Collections.Generic.IList`1&lt;UnityEditor.IMGUI.Controls.TreeViewItem&gt;)">
      <summary>
        <para>Utility method for checking if the childList is identical to the one returned by the CreateChildListForCollapsedParent method.</para>
      </summary>
      <param name="childList">Children list of a TreeViewItem.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.IsExpanded(System.Int32)">
      <summary>
        <para>Returns true if the TreeViewItem with ID id is currently expanded.</para>
      </summary>
      <param name="id">TreeViewItem ID.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.IsSelected(System.Int32)">
      <summary>
        <para>Returns true if the TreeViewItem with ID id is currently selected.</para>
      </summary>
      <param name="id">TreeViewItem ID.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.KeyEvent">
      <summary>
        <para>Override this method to handle events when the TreeView has keyboard focus.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.OnGUI(UnityEngine.Rect)">
      <summary>
        <para>This is the main GUI method of the TreeView, where the TreeViewItems are processed and drawn.</para>
      </summary>
      <param name="rect">Rect where the TreeView is rendered.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.RefreshCustomRowHeights">
      <summary>
        <para>Refreshes the cache of custom row rects based on the heights returned by GetCustomRowHeight.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.Reload">
      <summary>
        <para>Call this to force the TreeView to reload its data. This in turn causes BuildRoot and BuildRows to be called.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.RenameEnded(UnityEditor.IMGUI.Controls.TreeView/RenameEndedArgs)">
      <summary>
        <para>Called when rename ends either by the user completing the renaming process, when the rename overlay loses focus or is closed using  EndRename.</para>
      </summary>
      <param name="args"></param>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.TreeView.RenameEndedArgs">
      <summary>
        <para>Method arguments for the virtual method RenameEnded.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.RenameEndedArgs.acceptedRename">
      <summary>
        <para>Is true if the rename is accepted.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.RenameEndedArgs.itemID">
      <summary>
        <para>Item with ID that are being renamed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.RenameEndedArgs.newName">
      <summary>
        <para>Name entered in the rename overlay.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.RenameEndedArgs.originalName">
      <summary>
        <para>The original name when starting the rename.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.Repaint">
      <summary>
        <para>Request a repaint of the window that the TreeView is rendered in.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.RowGUI(UnityEditor.IMGUI.Controls.TreeView/RowGUIArgs)">
      <summary>
        <para>Override this method to add custom GUI content for the rows in the TreeView.</para>
      </summary>
      <param name="args">Row data.</param>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.TreeView.RowGUIArgs">
      <summary>
        <para>Method arguments for the virtual method RowGUI.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.RowGUIArgs.focused">
      <summary>
        <para>This value is true only when the TreeView has keyboard focus and the TreeView's window has focus.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.RowGUIArgs.isRenaming">
      <summary>
        <para>This value is true when the ::item is currently being renamed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.RowGUIArgs.item">
      <summary>
        <para>Item for the current row being handled in TreeView.RowGUI.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.RowGUIArgs.label">
      <summary>
        <para>Label used for text rendering of the item displayName. Note this is an empty string when isRenaming == true.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.RowGUIArgs.row">
      <summary>
        <para>Row index into the list of current rows.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.RowGUIArgs.rowRect">
      <summary>
        <para>Row rect for the current row being handled.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.RowGUIArgs.selected">
      <summary>
        <para>This value is true when the current row's item is part of the current selection.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.RowGUIArgs.GetCellRect(System.Int32)">
      <summary>
        <para>If using a MultiColumnHeader for the TreeView this method can be used to get the cell rects of a row using the visible columns of the MultiColumnHeader.</para>
      </summary>
      <param name="visibleColumnIndex">Index into the list of visible columns of the multi column header.</param>
      <returns>
        <para>Cell rect defined by the intersection between the row rect and the rect of the visible column.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.RowGUIArgs.GetColumn(System.Int32)">
      <summary>
        <para>If using a MultiColumnHeader for the TreeView this method can be used to convert an index from the visible columns list to a index into the actual columns in the MultiColumnHeaderState.</para>
      </summary>
      <param name="visibleColumnIndex">This index is the index into the current visible columns.</param>
      <returns>
        <para>Column index into the columns array in MultiColumnHeaderState.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.RowGUIArgs.GetNumVisibleColumns">
      <summary>
        <para>If using a MultiColumnHeader for the TreeView use this method to get the number of visible columns currently being shown in the MultiColumnHeader.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.SearchChanged(System.String)">
      <summary>
        <para>Override the method to get notified of search string changes.</para>
      </summary>
      <param name="newSearch"></param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.SelectAllRows">
      <summary>
        <para>Selects all rows in the TreeView.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.SelectionChanged(System.Collections.Generic.IList`1&lt;System.Int32&gt;)">
      <summary>
        <para>Override the method to get notified of selection changes.</para>
      </summary>
      <param name="selectedIds">TreeViewItem IDs.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.SelectionClick(UnityEditor.IMGUI.Controls.TreeViewItem,System.Boolean)">
      <summary>
        <para>Use this method in RowGUI to peform the logic of a mouse click.</para>
      </summary>
      <param name="item">TreeViewItem clicked.</param>
      <param name="keepMultiSelection">If true then keeps the multiselection when clicking on a item already part of the selection. If false then clears the selection before selecting the item clicked. For left button clicks this is usually false. For context clicks it is usually true so a context opereration can operate on the multiselection.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.SetExpanded(System.Int32,System.Boolean)">
      <summary>
        <para>Set a single TreeViewItem to be expanded or collapsed.</para>
      </summary>
      <param name="id">TreeViewItem ID.</param>
      <param name="expanded">True expands item. False collapses item.</param>
      <returns>
        <para>True if item changed expanded state, false if item already had the expanded state.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.SetExpanded(System.Collections.Generic.IList`1&lt;System.Int32&gt;)">
      <summary>
        <para>Set the current expanded TreeViewItems of the TreeView. This will overwrite the previous expanded state.</para>
      </summary>
      <param name="ids">List of item IDs that should be expanded.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.SetExpandedRecursive(System.Int32,System.Boolean)">
      <summary>
        <para>Expand or collapse all items under item with id.</para>
      </summary>
      <param name="id">TreeViewItem ID.</param>
      <param name="expanded">Expanded state: true expands, false collapses.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.SetFocus">
      <summary>
        <para>Calling this function changes the keyboard focus to the TreeView.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.SetFocusAndEnsureSelectedItem">
      <summary>
        <para>Calling this function changes the keyboard focus to the TreeView and ensures an item is selected. Use this function to enable key navigation of the TreeView.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.SetSelection(System.Collections.Generic.IList`1&lt;System.Int32&gt;)">
      <summary>
        <para>Set the selected items of the TreeView.</para>
      </summary>
      <param name="selectedIDs">TreeViewItem IDs.</param>
      <param name="options">Options for extra logic performed after the selection. See TreeViewSelectionOptions.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.SetSelection(System.Collections.Generic.IList`1&lt;System.Int32&gt;,UnityEditor.IMGUI.Controls.TreeViewSelectionOptions)">
      <summary>
        <para>Set the selected items of the TreeView.</para>
      </summary>
      <param name="selectedIDs">TreeViewItem IDs.</param>
      <param name="options">Options for extra logic performed after the selection. See TreeViewSelectionOptions.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.SetupDepthsFromParentsAndChildren(UnityEditor.IMGUI.Controls.TreeViewItem)">
      <summary>
        <para>Utility method using the depth of the input TreeViewItem to set the correct depths for all its descendant TreeViewItems.</para>
      </summary>
      <param name="root">TreeViewItem from which the descendentans should have their depth updated.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.SetupDragAndDrop(UnityEditor.IMGUI.Controls.TreeView/SetupDragAndDropArgs)">
      <summary>
        <para>This function is called when CanStartDrag returns true.</para>
      </summary>
      <param name="args"></param>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.TreeView.SetupDragAndDropArgs">
      <summary>
        <para>Method arguments to the virtual method SetupDragAndDrop.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeView.SetupDragAndDropArgs.draggedItemIDs">
      <summary>
        <para>TreeViewItem IDs being dragged.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.SetupParentsAndChildrenFromDepths(UnityEditor.IMGUI.Controls.TreeViewItem,System.Collections.Generic.IList`1&lt;UnityEditor.IMGUI.Controls.TreeViewItem&gt;)">
      <summary>
        <para>Utility method for initializing all the parent and children properties of the rows using the order and the depths values that have been set.</para>
      </summary>
      <param name="root">The hidden root item.</param>
      <param name="rows">TreeViewItems where only the depth property have been set.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeView.SortItemIDsInRowOrder(System.Collections.Generic.IList`1&lt;System.Int32&gt;)">
      <summary>
        <para>Returns a list sorted in the order in which they are shown in the TreeView.</para>
      </summary>
      <param name="ids">TreeViewItem IDs.</param>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.TreeViewItem">
      <summary>
        <para>The TreeViewItem is used to build the tree representation of a tree data structure.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeViewItem.children">
      <summary>
        <para>The list of child items of this TreeViewItem.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeViewItem.depth">
      <summary>
        <para>The depth refers to how many ancestors this item has, and corresponds to the number of horizontal ‘indents’ this item has.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeViewItem.displayName">
      <summary>
        <para>Name shown for this item when rendered.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeViewItem.hasChildren">
      <summary>
        <para>Returns true if children has any items.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeViewItem.icon">
      <summary>
        <para>If set, this icon will be rendered to the left of the displayName. The icon is rendered at 16x16 points by default.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeViewItem.id">
      <summary>
        <para>Unique ID for an item.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeViewItem.parent">
      <summary>
        <para>The parent of this TreeViewItem. If it is null then it is considered the root of the TreeViewItem tree.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeViewItem.AddChild(UnityEditor.IMGUI.Controls.TreeViewItem)">
      <summary>
        <para>Helper method that adds the child TreeViewItem to the children list and sets the parent property on the child.</para>
      </summary>
      <param name="child">TreeViewItem to be added to the children list.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeViewItem.#ctor(System.Int32)">
      <summary>
        <para>TreeViewItem constructor.</para>
      </summary>
      <param name="id">Unique ID to identify this TreeViewItem with among all TreeViewItems of the TreeView. See Also id.</param>
      <param name="depth">Depth of this TreeViewItem. See Also depth.</param>
      <param name="displayName">Rendered name of this TreeViewItem. See Also displayName.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeViewItem.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>TreeViewItem constructor.</para>
      </summary>
      <param name="id">Unique ID to identify this TreeViewItem with among all TreeViewItems of the TreeView. See Also id.</param>
      <param name="depth">Depth of this TreeViewItem. See Also depth.</param>
      <param name="displayName">Rendered name of this TreeViewItem. See Also displayName.</param>
    </member>
    <member name="M:UnityEditor.IMGUI.Controls.TreeViewItem.#ctor(System.Int32,System.Int32,System.String)">
      <summary>
        <para>TreeViewItem constructor.</para>
      </summary>
      <param name="id">Unique ID to identify this TreeViewItem with among all TreeViewItems of the TreeView. See Also id.</param>
      <param name="depth">Depth of this TreeViewItem. See Also depth.</param>
      <param name="displayName">Rendered name of this TreeViewItem. See Also displayName.</param>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.TreeViewSelectionOptions">
      <summary>
        <para>Enum used by the TreeView.SetSelection method.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeViewSelectionOptions.FireSelectionChanged">
      <summary>
        <para>If this flag is passed to TreeView.SetSelection then the TreeView will call the its TreeView.SelectionChanged method.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeViewSelectionOptions.None">
      <summary>
        <para>If this flag is passed to TreeView.SetSelection no extra logic is be performed after setting selection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeViewSelectionOptions.RevealAndFrame">
      <summary>
        <para>If this flag is passed to TreeView.SetSelection then the TreeView will make sure the last item in the input selection list is visible on screen.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.IMGUI.Controls.TreeViewState">
      <summary>
        <para>The TreeViewState contains serializable state information for the TreeView.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeViewState.expandedIDs">
      <summary>
        <para>This is the list of currently expanded TreeViewItem IDs.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeViewState.lastClickedID">
      <summary>
        <para>The ID for the TreeViewItem that currently is being used for multi selection and key navigation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.IMGUI.Controls.TreeViewState.scrollPos">
      <summary>
        <para>The current scroll values of the TreeView's scroll view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeViewState.searchString">
      <summary>
        <para>Search string state that can be used in the TreeView to filter the tree data when creating the TreeViewItems.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.IMGUI.Controls.TreeViewState.selectedIDs">
      <summary>
        <para>Selected TreeViewItem IDs. Use of the SetSelection and IsSelected API will access this state.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ImportAssetOptions">
      <summary>
        <para>Asset importing options.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.Default">
      <summary>
        <para>Default import options.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.DontDownloadFromCacheServer">
      <summary>
        <para>Force a full reimport but don't download the assets from the cache server.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.ForceSynchronousImport">
      <summary>
        <para>Import all assets synchronously.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.ForceUncompressedImport">
      <summary>
        <para>Forces asset import as uncompressed for edition facilities.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.ForceUpdate">
      <summary>
        <para>User initiated asset import.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.ImportRecursive">
      <summary>
        <para>When a folder is imported, import all its contents as well.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.InitializeOnLoadAttribute">
      <summary>
        <para>Allow an editor class to be initialized when Unity loads without action from the user.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.InitializeOnLoadMethodAttribute">
      <summary>
        <para>Allow an editor class method to be initialized when Unity loads without action from the user.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSAppInBackgroundBehavior">
      <summary>
        <para>Application behavior when entering background.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSAppInBackgroundBehavior.Custom">
      <summary>
        <para>Custom background behavior, see iOSBackgroundMode for specific background modes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSAppInBackgroundBehavior.Exit">
      <summary>
        <para>Application should exit when entering background.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSAppInBackgroundBehavior.Suspend">
      <summary>
        <para>Application should suspend execution when entering background.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSBackgroundMode">
      <summary>
        <para>Background modes supported by the application corresponding to project settings in Xcode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.Audio">
      <summary>
        <para>Audio, AirPlay and Picture in Picture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.BluetoothCentral">
      <summary>
        <para>Uses Bluetooth LE accessories.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.BluetoothPeripheral">
      <summary>
        <para>Acts as a Bluetooth LE accessory.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.ExternalAccessory">
      <summary>
        <para>External accessory communication.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.Fetch">
      <summary>
        <para>Background fetch.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.Location">
      <summary>
        <para>Location updates.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.NewsstandContent">
      <summary>
        <para>Newsstand downloads.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.None">
      <summary>
        <para>No background modes supported.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.RemoteNotification">
      <summary>
        <para>Remote notifications.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSBackgroundMode.VOIP">
      <summary>
        <para>Voice over IP.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSBuildType">
      <summary>
        <para>Build configurations for the generated Xcode project.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSBuildType.Debug">
      <summary>
        <para>Build configuration set to Debug for the generated Xcode project.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSBuildType.Release">
      <summary>
        <para>Build configuration set to Release for the generated Xcode project with optimization enabled.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSDeviceRequirement">
      <summary>
        <para>A device requirement description used for configuration of App Slicing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.iOSDeviceRequirement.values">
      <summary>
        <para>The values of the device requirement description.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.iOSDeviceRequirement.#ctor">
      <summary>
        <para>Constructs new device requirement description.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSSdkVersion">
      <summary>
        <para>Supported iOS SDK versions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSSdkVersion.DeviceSDK">
      <summary>
        <para>Device SDK.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSSdkVersion.SimulatorSDK">
      <summary>
        <para>Simulator SDK.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSShowActivityIndicatorOnLoading">
      <summary>
        <para>Activity Indicator on loading.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.DontShow">
      <summary>
        <para>Don't Show.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.Gray">
      <summary>
        <para>Gray.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.White">
      <summary>
        <para>White.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.WhiteLarge">
      <summary>
        <para>White Large.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSStatusBarStyle">
      <summary>
        <para>iOS status bar style.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSStatusBarStyle.BlackOpaque">
      <summary>
        <para>Black opaque.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSStatusBarStyle.BlackTranslucent">
      <summary>
        <para>Black translucent.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSStatusBarStyle.Default">
      <summary>
        <para>Default.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSTargetDevice">
      <summary>
        <para>Target iOS device.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetDevice.iPadOnly">
      <summary>
        <para>iPad Only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetDevice.iPhoneAndiPad">
      <summary>
        <para>Universal : iPhone/iPod + iPad.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetDevice.iPhoneOnly">
      <summary>
        <para>iPhone/iPod Only.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSTargetOSVersion">
      <summary>
        <para>Supported iOS deployment versions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_4_0">
      <summary>
        <para>iOS 4.0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_4_1">
      <summary>
        <para>iOS 4.1.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_4_2">
      <summary>
        <para>iOS 4.2.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_4_3">
      <summary>
        <para>iOS 4.3.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_5_0">
      <summary>
        <para>iOS 5.0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_5_1">
      <summary>
        <para>iOS 5.1.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_6_0">
      <summary>
        <para>iOS 6.0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_7_0">
      <summary>
        <para>iOS 7.0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_7_1">
      <summary>
        <para>iOS 7.1.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_8_0">
      <summary>
        <para>iOS 8.0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_8_1">
      <summary>
        <para>iOS 8.1.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.Unknown">
      <summary>
        <para>Unknown iOS version, managed by user.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.LightingDataAsset">
      <summary>
        <para>The lighting data asset used by the active scene.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.LightmapBakeQuality">
      <summary>
        <para>Bake quality setting for LightmapEditorSettings.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.LightmapBakeQuality.High">
      <summary>
        <para>High quality bake for final renderings.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.LightmapBakeQuality.Low">
      <summary>
        <para>Low quality bake for preview renderings.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.LightmapEditorSettings">
      <summary>
        <para>Various settings for the bake.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.aoExponentDirect">
      <summary>
        <para>Ambient occlusion (AO) for direct lighting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.aoExponentIndirect">
      <summary>
        <para>Ambient occlusion (AO) for indirect lighting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.aoMaxDistance">
      <summary>
        <para>Beyond this distance a ray is considered to be unoccluded.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.enableAmbientOcclusion">
      <summary>
        <para>Enable baked ambient occlusion (AO).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.giBakeBackend">
      <summary>
        <para>Determines which backend to use for baking lightmaps.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.giPathTracerFilter">
      <summary>
        <para>Determines the filtering kernel for the Progressive Path Tracer backend.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.giPathTracerSampling">
      <summary>
        <para>Determines which sampling strategy to use for baking lightmaps with the path tracing backend.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.maxAtlasHeight">
      <summary>
        <para>The maximum height of an individual lightmap texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.maxAtlasWidth">
      <summary>
        <para>The maximum width of an individual lightmap texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.padding">
      <summary>
        <para>Texel separation between shapes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.realtimeResolution">
      <summary>
        <para>Lightmap resolution in texels per world unit. Defines the resolution of Realtime GI if enabled. If Baked GI is enabled, this defines the resolution used for indirect lighting. Higher resolution may take a long time to bake.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.reflectionCubemapCompression">
      <summary>
        <para>Determines how Unity will compress baked reflection cubemap.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.textureCompression">
      <summary>
        <para>Whether to use texture compression on the generated lightmaps.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.LightmapEditorSettings.GIBakeBackend">
      <summary>
        <para>Backends available for baking lightmaps.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.LightmapEditorSettings.GIBakeBackend.PathTracer">
      <summary>
        <para>Backend for baking lightmaps with path tracing.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.LightmapEditorSettings.GIBakeBackend.Radiosity">
      <summary>
        <para>Backend for baking lightmaps with the Enlighten radiosity middleware.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.LightmapEditorSettings.PathTracerFilter">
      <summary>
        <para>The available filter kernels for the Progressive Path Tracer GI backend.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.LightmapEditorSettings.PathTracerFilter.ATrous">
      <summary>
        <para>Filter baked results of the Progressive Path Tracer with an A-Trous kernel.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.LightmapEditorSettings.PathTracerFilter.Gaussian">
      <summary>
        <para>Filter baked results of the Progressive Path Tracer with an Gauss kernel.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.LightmapEditorSettings.PathTracerFilterMode">
      <summary>
        <para>The available filtering modes for the Progressive Path Tracer GI backend.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.LightmapEditorSettings.PathTracerFilterMode.Advanced">
      <summary>
        <para>Enables the advanced filtering mode for the Progressive Path Tracer GI backend.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.LightmapEditorSettings.PathTracerFilterMode.Auto">
      <summary>
        <para>The filtering is configured automatically.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.LightmapEditorSettings.PathTracerFilterMode.None">
      <summary>
        <para>Turn filtering off.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.LightmapEditorSettings.PathTracerSampling">
      <summary>
        <para>Available sampling strategies for baking lightmaps with the path tracing backend.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.LightmapEditorSettings.PathTracerSampling.Auto">
      <summary>
        <para>Auto will automatically select the sampling settings.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.LightmapEditorSettings.PathTracerSampling.Fixed">
      <summary>
        <para>Fixed sampling uses a fixed number of samples per texel. This can be used when the other strategies fail to use enough samples in some areas. It will typically be slow.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.LightmapParameters">
      <summary>
        <para>A collection of parameters that impact lightmap and realtime GI computations.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.antiAliasingSamples">
      <summary>
        <para>The maximum number of times to supersample a texel to reduce aliasing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.backFaceTolerance">
      <summary>
        <para>The percentage of rays shot from a ray origin that must hit front faces to be considered usable.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.bakedLightmapTag">
      <summary>
        <para>BakedLightmapTag is an integer that affects the assignment to baked lightmaps. Objects with different values for bakedLightmapTag are guaranteed to not be assigned to the same lightmap even if the other baking parameters are the same.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.blurRadius">
      <summary>
        <para>The radius (in texels) of the post-processing filter that blurs baked direct lighting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.clusterResolution">
      <summary>
        <para>Controls the resolution at which Enlighten stores and can transfer input light.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.directLightQuality">
      <summary>
        <para>The number of rays used for lights with an area. Allows for accurate soft shadowing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.irradianceBudget">
      <summary>
        <para>The amount of data used for realtime GI texels. Specifies how detailed view of the scene a texel has. Small values mean more averaged out lighting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.irradianceQuality">
      <summary>
        <para>The number of rays to cast for computing irradiance form factors.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.isTransparent">
      <summary>
        <para>If enabled, the object appears transparent during GlobalIllumination lighting calculations.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.modellingTolerance">
      <summary>
        <para>Maximum size of gaps that can be ignored for GI (multiplier on pixel size).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.resolution">
      <summary>
        <para>The texel resolution per meter used for realtime lightmaps. This value is multiplied by LightmapEditorSettings.resolution.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.stitchEdges">
      <summary>
        <para>Whether pairs of edges should be stitched together.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.systemTag">
      <summary>
        <para>System tag is an integer identifier. It lets you force an object into a different Enlighten system even though all the other parameters are the same.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.AOAntiAliasingSamples">
      <summary>
        <para>The maximum number of times to supersample a texel to reduce aliasing in AO.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.AOQuality">
      <summary>
        <para>The number of rays to cast for computing ambient occlusion.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Lightmapping">
      <summary>
        <para>Allows to control the lightmapping job.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Lightmapping.bakedGI">
      <summary>
        <para>Is baked GI enabled?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Lightmapping.bounceBoost">
      <summary>
        <para>Boost the albedo.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Lightmapping.buildProgress">
      <summary>
        <para>Returns the current lightmapping build progress or 0 if Lightmapping.isRunning is false.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Lightmapping.completed">
      <summary>
        <para>Delegate which is called when bake job is completed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Lightmapping.giWorkflowMode">
      <summary>
        <para>The lightmap baking workflow mode used. Iterative mode is default, but you can switch to on demand mode which bakes only when the user presses the bake button.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Lightmapping.indirectOutputScale">
      <summary>
        <para>Scale for indirect lighting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Lightmapping.isRunning">
      <summary>
        <para>Returns true when the bake job is running, false otherwise (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Lightmapping.lightingDataAsset">
      <summary>
        <para>The lighting data asset used by the active scene.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Lightmapping.realtimeGI">
      <summary>
        <para>Is realtime GI enabled?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.Bake">
      <summary>
        <para>Stars a synchronous bake job.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeAsync">
      <summary>
        <para>Starts an asynchronous bake job.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeLightProbesOnly">
      <summary>
        <para>Starts a synchronous bake job, but only bakes light probes.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeLightProbesOnlyAsync">
      <summary>
        <para>Starts an asynchronous bake job, but only bakes light probes.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeMultipleScenes(System.String[])">
      <summary>
        <para>Bakes an array of scenes.</para>
      </summary>
      <param name="paths">The path of the scenes that should be baked.</param>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeReflectionProbe(UnityEngine.ReflectionProbe,System.String)">
      <summary>
        <para>Starts a synchronous bake job for the probe.</para>
      </summary>
      <param name="probe">Target probe.</param>
      <param name="path">The location where cubemap will be saved.</param>
      <returns>
        <para>Returns true if baking was succesful.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeSelected">
      <summary>
        <para>Starts a synchronous bake job for the selected objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeSelectedAsync">
      <summary>
        <para>Starts an asynchronous bake job for the selected objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.Cancel">
      <summary>
        <para>Cancels the currently running asynchronous bake job.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.Clear">
      <summary>
        <para>Deletes all lightmap assets and makes all lights behave as if they weren't baked yet.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.ClearDiskCache">
      <summary>
        <para>Clears the cache used by lightmaps, reflection probes and default reflection.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.ClearLightingDataAsset">
      <summary>
        <para>Remove the lighting data asset used by the current scene.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.ForceStop">
      <summary>
        <para>Force the Progressive Path Tracer to stop baking and use the computed results as they are.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.GetTerrainGIChunks(UnityEngine.Terrain,System.Int32&amp;,System.Int32&amp;)">
      <summary>
        <para>Get how many chunks the terrain is divided into for GI baking.</para>
      </summary>
      <param name="terrain">The terrain.</param>
      <param name="numChunksX">Number of chunks in terrain width.</param>
      <param name="numChunksY">Number of chunks in terrain length.</param>
    </member>
    <member name="T:UnityEditor.Lightmapping.GIWorkflowMode">
      <summary>
        <para>Workflow mode for lightmap baking. Default is Iterative.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Lightmapping.GIWorkflowMode.Iterative">
      <summary>
        <para>Always run lightmapping, changes to the scene are detected automatically.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Lightmapping.GIWorkflowMode.Legacy">
      <summary>
        <para>Deprecated 4.x lightmapping support.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Lightmapping.GIWorkflowMode.OnDemand">
      <summary>
        <para>Run lightmapping only when the user presses the bake button.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Lightmapping.OnCompletedFunction">
      <summary>
        <para>Delegate used by Lightmapping.completed callback.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.Tetrahedralize(UnityEngine.Vector3[],System.Int32[]&amp;,UnityEngine.Vector3[]&amp;)">
      <summary>
        <para>Calculates a Delaunay Tetrahedralization of the 'positions' point set - the same way the lightmapper.</para>
      </summary>
      <param name="positions"></param>
      <param name="outIndices"></param>
      <param name="outPositions"></param>
    </member>
    <member name="T:UnityEditor.LODUtility">
      <summary>
        <para>LOD Utility Helpers.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.LODUtility.CalculateLODGroupBoundingBox(UnityEngine.LODGroup)">
      <summary>
        <para>Recalculate the bounding region for the given LODGroup.</para>
      </summary>
      <param name="group"></param>
    </member>
    <member name="T:UnityEditor.MacFullscreenMode">
      <summary>
        <para>Mac fullscreen mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MacFullscreenMode.FullscreenWindow">
      <summary>
        <para>Fullscreen window.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MacFullscreenMode.FullscreenWindowWithDockAndMenuBar">
      <summary>
        <para>Fullscreen window with Dock and Menu bar.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MaterialEditor">
      <summary>
        <para>The Unity Material Editor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialEditor.isVisible">
      <summary>
        <para>Is the current material expanded.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialEditor.kMiniTextureFieldLabelIndentLevel">
      <summary>
        <para>Useful for indenting shader properties that need the same indent as mini texture field.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ApplyMaterialPropertyDrawers(UnityEngine.Material)">
      <summary>
        <para>Apply initial MaterialPropertyDrawer values.</para>
      </summary>
      <param name="material"></param>
      <param name="targets"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ApplyMaterialPropertyDrawers(UnityEngine.Object[])">
      <summary>
        <para>Apply initial MaterialPropertyDrawer values.</para>
      </summary>
      <param name="material"></param>
      <param name="targets"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.Awake">
      <summary>
        <para>Called when the Editor is woken up.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ColorProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a color shader property.</para>
      </summary>
      <param name="label">Label for the property.</param>
      <param name="position"></param>
      <param name="prop"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ColorProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a color shader property.</para>
      </summary>
      <param name="label">Label for the property.</param>
      <param name="position"></param>
      <param name="prop"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.DefaultPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Default handling of preview area for materials.</para>
      </summary>
      <param name="r"></param>
      <param name="background"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.DefaultPreviewSettingsGUI">
      <summary>
        <para>Default toolbar for material preview area.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.DefaultShaderProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Handles UI for one shader property ignoring any custom drawers.</para>
      </summary>
      <param name="prop"></param>
      <param name="label"></param>
      <param name="position"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.DefaultShaderProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Handles UI for one shader property ignoring any custom drawers.</para>
      </summary>
      <param name="prop"></param>
      <param name="label"></param>
      <param name="position"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.DoubleSidedGIField">
      <summary>
        <para>Display UI for editing a material's Double Sided Global Illumination setting.
Returns true if the UI is indeed displayed i.e. the material supports the Double Sided Global Illumination setting.
+See Also: Material.doubleSidedGI.</para>
      </summary>
      <returns>
        <para>True if the UI is displayed, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.EmissionEnabledProperty">
      <summary>
        <para>This function will draw the UI for controlling whether emission is enabled or not on a material.</para>
      </summary>
      <returns>
        <para>Returns true if enabled, or false if disabled or mixed due to multi-editing.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.EnableInstancingField">
      <summary>
        <para>Display UI for editing material's render queue setting.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.EnableInstancingField(UnityEngine.Rect)">
      <summary>
        <para>Display UI for editing material's render queue setting within the specified rect.</para>
      </summary>
      <param name="r"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.FixupEmissiveFlag(UnityEngine.Color,UnityEngine.MaterialGlobalIlluminationFlags)">
      <summary>
        <para>Returns a properly set global illlumination flag based on the passed in flag and the given color.</para>
      </summary>
      <param name="col">Emission color.</param>
      <param name="flags">Current global illumination flag.</param>
      <returns>
        <para>The fixed up flag.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.FixupEmissiveFlag(UnityEngine.Material)">
      <summary>
        <para>Properly sets up the globalIllumination flag on the given Material depending on the current flag's state and the material's emission property.</para>
      </summary>
      <param name="mat">The material to be fixed up.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.FloatProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a float shader property.</para>
      </summary>
      <param name="label">Label for the property.</param>
      <param name="prop"></param>
      <param name="position"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.FloatProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a float shader property.</para>
      </summary>
      <param name="label">Label for the property.</param>
      <param name="prop"></param>
      <param name="position"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetDefaultPropertyHeight(UnityEditor.MaterialProperty)">
      <summary>
        <para>Calculate height needed for the property, ignoring custom drawers.</para>
      </summary>
      <param name="prop"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetFlexibleRectBetweenFieldAndRightEdge(UnityEngine.Rect)">
      <summary>
        <para>Utility method for GUI layouting ShaderGUI. Used e.g for the rect after a left aligned Color field.</para>
      </summary>
      <param name="r">Field Rect.</param>
      <returns>
        <para>A sub rect of the input Rect.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetFlexibleRectBetweenLabelAndField(UnityEngine.Rect)">
      <summary>
        <para>Utility method for GUI layouting ShaderGUI.</para>
      </summary>
      <param name="r">Field Rect.</param>
      <returns>
        <para>A sub rect of the input Rect.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetLeftAlignedFieldRect(UnityEngine.Rect)">
      <summary>
        <para>Utility method for GUI layouting ShaderGUI.</para>
      </summary>
      <param name="r">Field Rect.</param>
      <returns>
        <para>A sub rect of the input Rect.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetMaterialProperties(UnityEngine.Object[])">
      <summary>
        <para>Get shader property information of the passed materials.</para>
      </summary>
      <param name="mats"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetMaterialProperty(UnityEngine.Object[],System.String)">
      <summary>
        <para>Get information about a single shader property.</para>
      </summary>
      <param name="mats">Selected materials.</param>
      <param name="name">Property name.</param>
      <param name="propertyIndex">Property index.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetMaterialProperty(UnityEngine.Object[],System.Int32)">
      <summary>
        <para>Get information about a single shader property.</para>
      </summary>
      <param name="mats">Selected materials.</param>
      <param name="name">Property name.</param>
      <param name="propertyIndex">Property index.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetPropertyHeight(UnityEditor.MaterialProperty)">
      <summary>
        <para>Calculate height needed for the property.</para>
      </summary>
      <param name="prop"></param>
      <param name="label"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetPropertyHeight(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Calculate height needed for the property.</para>
      </summary>
      <param name="prop"></param>
      <param name="label"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetRectAfterLabelWidth(UnityEngine.Rect)">
      <summary>
        <para>Utility method for GUI layouting ShaderGUI. This is the rect after the label which can be used for multiple properties. The input rect can be fetched by calling: EditorGUILayout.GetControlRect.</para>
      </summary>
      <param name="r">Line Rect.</param>
      <returns>
        <para>A sub rect of the input Rect.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetRightAlignedFieldRect(UnityEngine.Rect)">
      <summary>
        <para>Utility method for GUI layouting ShaderGUI.</para>
      </summary>
      <param name="r">Field Rect.</param>
      <returns>
        <para>A sub rect of the input Rect.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetTextureOffset(System.String,System.Boolean&amp;,System.Boolean&amp;)">
      <summary>
        <para>Get the value of a given texture offset for a given texture property.</para>
      </summary>
      <param name="propertyName">Name of the texture property that you wish to examine the offset of.</param>
      <param name="hasMixedValueX">Does the x offset have multiple values?</param>
      <param name="hasMixedValueY">Does the y offset have multiple values?</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetTexturePropertyCustomArea(UnityEngine.Rect)">
      <summary>
        <para>Returns the free rect below the label and before the large thumb object field. Is used for e.g. tiling and offset properties.</para>
      </summary>
      <param name="position">The total rect of the texture property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetTextureScale(System.String,System.Boolean&amp;,System.Boolean&amp;)">
      <summary>
        <para>Get the value of a given texture scale for a given texture property.</para>
      </summary>
      <param name="propertyName">Name of the texture property that you wish to examine the scale of.</param>
      <param name="hasMixedValueX">Does the x scale have multiple values?</param>
      <param name="hasMixedValueY">Does the y scale have multiple values?</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.HasPreviewGUI">
      <summary>
        <para>Can this component be Previewed in its current state?</para>
      </summary>
      <returns>
        <para>True if this component can be Previewed in its current state.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.HelpBoxWithButton(UnityEngine.GUIContent,UnityEngine.GUIContent)">
      <summary>
        <para>Make a help box with a message and button. Returns true, if button was pressed.</para>
      </summary>
      <param name="messageContent">The message text.</param>
      <param name="buttonContent">The button text.</param>
      <returns>
        <para>Returns true, if button was pressed.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.LightmapEmissionFlagsProperty(System.Int32,System.Boolean)">
      <summary>
        <para>Draws the UI for setting the global illumination flag of a material.</para>
      </summary>
      <param name="indent">Level of indentation for the property.</param>
      <param name="enabled">True if emission is enabled for the material, false otherwise.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.LightmapEmissionProperty">
      <summary>
        <para>This function will draw the UI for the lightmap emission property. (None, Realtime, baked)

See Also: MaterialLightmapFlags.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.LightmapEmissionProperty">
      <summary>
        <para>This function will draw the UI for the lightmap emission property. (None, Realtime, baked)

See Also: MaterialLightmapFlags.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.LightmapEmissionProperty">
      <summary>
        <para>This function will draw the UI for the lightmap emission property. (None, Realtime, baked)

See Also: MaterialLightmapFlags.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.OnDisable">
      <summary>
        <para>Called when the editor is disabled, if overridden please call the base OnDisable() to ensure that the material inspector is set up properly.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.OnEnable">
      <summary>
        <para>Called when the editor is enabled, if overridden please call the base OnEnable() to ensure that the material inspector is set up properly.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.OnInspectorGUI">
      <summary>
        <para>Implement specific MaterialEditor GUI code here. If you want to simply extend the existing editor call the base OnInspectorGUI () before doing any custom GUI code.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Custom preview for Image component.</para>
      </summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.OnShaderChanged">
      <summary>
        <para>A callback that is invoked when a Material's Shader is changed in the Inspector.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.PropertiesChanged">
      <summary>
        <para>Whenever a material property is changed call this function. This will rebuild the inspector and validate the properties.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.PropertiesDefaultGUI(UnityEditor.MaterialProperty[])">
      <summary>
        <para>Default rendering of shader properties.</para>
      </summary>
      <param name="props">Array of material properties.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.PropertiesGUI">
      <summary>
        <para>Render the standard material properties. This method will either render properties using a IShaderGUI instance if found otherwise it uses PropertiesDefaultGUI.</para>
      </summary>
      <returns>
        <para>Returns true if any value was changed.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.RangeProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a range slider for a range shader property.</para>
      </summary>
      <param name="label">Label for the property.</param>
      <param name="prop">The property to edit.</param>
      <param name="position">Position and size of the range slider control.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.RangeProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a range slider for a range shader property.</para>
      </summary>
      <param name="label">Label for the property.</param>
      <param name="prop">The property to edit.</param>
      <param name="position">Position and size of the range slider control.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.RegisterPropertyChangeUndo(System.String)">
      <summary>
        <para>Call this when you change a material property. It will add an undo for the action.</para>
      </summary>
      <param name="label">Undo Label.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.RenderQueueField">
      <summary>
        <para>Display UI for editing material's render queue setting.</para>
      </summary>
      <param name="r"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.RenderQueueField(UnityEngine.Rect)">
      <summary>
        <para>Display UI for editing material's render queue setting.</para>
      </summary>
      <param name="r"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.RequiresConstantRepaint">
      <summary>
        <para>Does this edit require to be repainted constantly in its current state?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.SetDefaultGUIWidths">
      <summary>
        <para>Set EditorGUIUtility.fieldWidth and labelWidth to the default values that PropertiesGUI uses.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.SetShader(UnityEngine.Shader)">
      <summary>
        <para>Set the shader of the material.</para>
      </summary>
      <param name="shader">Shader to set.</param>
      <param name="registerUndo">Should undo be registered.</param>
      <param name="newShader"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.SetShader(UnityEngine.Shader,System.Boolean)">
      <summary>
        <para>Set the shader of the material.</para>
      </summary>
      <param name="shader">Shader to set.</param>
      <param name="registerUndo">Should undo be registered.</param>
      <param name="newShader"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.SetTextureOffset(System.String,UnityEngine.Vector2,System.Int32)">
      <summary>
        <para>Set the offset of a given texture property.</para>
      </summary>
      <param name="propertyName">Name of the texture property that you wish to modify the offset of.</param>
      <param name="value">Scale to set.</param>
      <param name="coord">Set the x or y component of the offset (0 for x, 1 for y).</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.SetTextureScale(System.String,UnityEngine.Vector2,System.Int32)">
      <summary>
        <para>Set the scale of a given texture property.</para>
      </summary>
      <param name="propertyName">Name of the texture property that you wish to modify the scale of.</param>
      <param name="value">Scale to set.</param>
      <param name="coord">Set the x or y component of the scale (0 for x, 1 for y).</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ShaderProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Handes UI for one shader property.</para>
      </summary>
      <param name="prop"></param>
      <param name="label"></param>
      <param name="position"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ShaderProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Handes UI for one shader property.</para>
      </summary>
      <param name="prop"></param>
      <param name="label"></param>
      <param name="position"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureCompatibilityWarning(UnityEditor.MaterialProperty)">
      <summary>
        <para>Checks if particular property has incorrect type of texture specified by the material, displays appropriate warning and suggests the user to automatically fix the problem.</para>
      </summary>
      <param name="prop">The texture property to check and display warning for, if necessary.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a texture shader property.</para>
      </summary>
      <param name="label">Label for the field.</param>
      <param name="scaleOffset">Draw scale / offset.</param>
      <param name="prop"></param>
      <param name="position"></param>
      <param name="tooltip"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEditor.MaterialProperty,System.String,System.Boolean)">
      <summary>
        <para>Draw a property field for a texture shader property.</para>
      </summary>
      <param name="label">Label for the field.</param>
      <param name="scaleOffset">Draw scale / offset.</param>
      <param name="prop"></param>
      <param name="position"></param>
      <param name="tooltip"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a texture shader property.</para>
      </summary>
      <param name="label">Label for the field.</param>
      <param name="scaleOffset">Draw scale / offset.</param>
      <param name="prop"></param>
      <param name="position"></param>
      <param name="tooltip"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String,System.Boolean)">
      <summary>
        <para>Draw a property field for a texture shader property.</para>
      </summary>
      <param name="label">Label for the field.</param>
      <param name="scaleOffset">Draw scale / offset.</param>
      <param name="prop"></param>
      <param name="position"></param>
      <param name="tooltip"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String,System.String,System.Boolean)">
      <summary>
        <para>Draw a property field for a texture shader property.</para>
      </summary>
      <param name="label">Label for the field.</param>
      <param name="scaleOffset">Draw scale / offset.</param>
      <param name="prop"></param>
      <param name="position"></param>
      <param name="tooltip"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TexturePropertyMiniThumbnail(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String,System.String)">
      <summary>
        <para>Draw a property field for a texture shader property that only takes up a single line height.</para>
      </summary>
      <param name="position">Rect that this control should be rendered in.</param>
      <param name="label">Label for the field.</param>
      <param name="prop"></param>
      <param name="tooltip"></param>
      <returns>
        <para>Returns total height used by this control.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TexturePropertySingleLine(UnityEngine.GUIContent,UnityEditor.MaterialProperty)">
      <summary>
        <para>Method for showing a texture property control with additional inlined properites.</para>
      </summary>
      <param name="label">The label used for the texture property.</param>
      <param name="textureProp">The texture property.</param>
      <param name="extraProperty1">First optional property inlined after the texture property.</param>
      <param name="extraProperty2">Second optional property inlined after the extraProperty1.</param>
      <returns>
        <para>Returns the Rect used.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TexturePropertySingleLine(UnityEngine.GUIContent,UnityEditor.MaterialProperty,UnityEditor.MaterialProperty)">
      <summary>
        <para>Method for showing a texture property control with additional inlined properites.</para>
      </summary>
      <param name="label">The label used for the texture property.</param>
      <param name="textureProp">The texture property.</param>
      <param name="extraProperty1">First optional property inlined after the texture property.</param>
      <param name="extraProperty2">Second optional property inlined after the extraProperty1.</param>
      <returns>
        <para>Returns the Rect used.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TexturePropertySingleLine(UnityEngine.GUIContent,UnityEditor.MaterialProperty,UnityEditor.MaterialProperty,UnityEditor.MaterialProperty)">
      <summary>
        <para>Method for showing a texture property control with additional inlined properites.</para>
      </summary>
      <param name="label">The label used for the texture property.</param>
      <param name="textureProp">The texture property.</param>
      <param name="extraProperty1">First optional property inlined after the texture property.</param>
      <param name="extraProperty2">Second optional property inlined after the extraProperty1.</param>
      <returns>
        <para>Returns the Rect used.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TexturePropertyTwoLines(UnityEngine.GUIContent,UnityEditor.MaterialProperty,UnityEditor.MaterialProperty,UnityEngine.GUIContent,UnityEditor.MaterialProperty)">
      <summary>
        <para>Method for showing a compact layout of properties.</para>
      </summary>
      <param name="label">The label used for the texture property.</param>
      <param name="textureProp">The texture property.</param>
      <param name="extraProperty1">First extra property inlined after the texture property.</param>
      <param name="label2">Label for the second extra property (on a new line and indented).</param>
      <param name="extraProperty2">Second property on a new line below the texture.</param>
      <returns>
        <para>Returns the Rect used.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TexturePropertyWithHDRColor(UnityEngine.GUIContent,UnityEditor.MaterialProperty,UnityEditor.MaterialProperty,UnityEditor.ColorPickerHDRConfig,System.Boolean)">
      <summary>
        <para>Method for showing a texture property control with a HDR color field and its color brightness float field.</para>
      </summary>
      <param name="label">The label used for the texture property.</param>
      <param name="textureProp">The texture property.</param>
      <param name="colorProperty">The color property (will be treated as a HDR color).</param>
      <param name="hdrConfig">The HDR color configuration used by the HDR Color Picker.</param>
      <param name="showAlpha">If false then the alpha channel information will be hidden in the GUI.</param>
      <returns>
        <para>Return the Rect used.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureScaleOffsetProperty(UnityEngine.Rect,UnityEditor.MaterialProperty)">
      <summary>
        <para>Draws tiling and offset properties for a texture.</para>
      </summary>
      <param name="position">Rect to draw this control in.</param>
      <param name="property">Property to draw.</param>
      <param name="partOfTexturePropertyControl">If this control should be rendered under large texture property control use 'true'. If this control should be shown seperately use 'false'.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureScaleOffsetProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.Boolean)">
      <summary>
        <para>Draws tiling and offset properties for a texture.</para>
      </summary>
      <param name="position">Rect to draw this control in.</param>
      <param name="property">Property to draw.</param>
      <param name="partOfTexturePropertyControl">If this control should be rendered under large texture property control use 'true'. If this control should be shown seperately use 'false'.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureScaleOffsetProperty(UnityEngine.Rect,UnityEngine.Vector4)">
      <summary>
        <para>TODO.</para>
      </summary>
      <param name="position"></param>
      <param name="scaleOffset"></param>
      <param name="partOfTexturePropertyControl"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureScaleOffsetProperty(UnityEngine.Rect,UnityEngine.Vector4,System.Boolean)">
      <summary>
        <para>TODO.</para>
      </summary>
      <param name="position"></param>
      <param name="scaleOffset"></param>
      <param name="partOfTexturePropertyControl"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.VectorProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a vector shader property.</para>
      </summary>
      <param name="label">Label for the field.</param>
      <param name="prop"></param>
      <param name="position"></param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.VectorProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a vector shader property.</para>
      </summary>
      <param name="label">Label for the field.</param>
      <param name="prop"></param>
      <param name="position"></param>
    </member>
    <member name="T:UnityEditor.MaterialProperty">
      <summary>
        <para>Describes information and value of a single shader property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.colorValue">
      <summary>
        <para>Color value of the property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.displayName">
      <summary>
        <para>Display name of the property (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.flags">
      <summary>
        <para>Flags that control how property is displayed (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.floatValue">
      <summary>
        <para>Float vaue of the property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.hasMixedValue">
      <summary>
        <para>Does this property have multiple different values? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.name">
      <summary>
        <para>Name of the property (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.rangeLimits">
      <summary>
        <para>Min/max limits of a ranged float property (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.targets">
      <summary>
        <para>Material objects being edited by this property (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.textureDimension">
      <summary>
        <para>Texture dimension (2D, Cubemap etc.) of the property (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.textureValue">
      <summary>
        <para>Texture value of the property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.type">
      <summary>
        <para>Type of the property (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.vectorValue">
      <summary>
        <para>Vector value of the property.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MaterialProperty.PropFlags">
      <summary>
        <para>Flags that control how a MaterialProperty is displayed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty.PropFlags.HDR">
      <summary>
        <para>Signifies that values of this property contain High Dynamic Range (HDR) data.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty.PropFlags.HideInInspector">
      <summary>
        <para>Do not show the property in the inspector.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty.PropFlags.None">
      <summary>
        <para>No flags are set.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty.PropFlags.Normal">
      <summary>
        <para>Signifies that values of this property contain Normal (normalized vector) data.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty.PropFlags.NoScaleOffset">
      <summary>
        <para>Do not show UV scale/offset fields next to a texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty.PropFlags.PerRendererData">
      <summary>
        <para>Texture value for this property will be queried from renderer's MaterialPropertyBlock, instead of from the material. This corresponds to the "[PerRendererData]" attribute in front of a property in the shader code.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MaterialProperty.PropType">
      <summary>
        <para>Material property type.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty.PropType.Color">
      <summary>
        <para>Color property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty.PropType.Float">
      <summary>
        <para>Float property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty.PropType.Range">
      <summary>
        <para>Ranged float (with min/max values) property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty.PropType.Texture">
      <summary>
        <para>Texture property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty.PropType.Vector">
      <summary>
        <para>Vector property.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MaterialPropertyDrawer">
      <summary>
        <para>Base class to derive custom material property drawers from.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialPropertyDrawer.Apply(UnityEditor.MaterialProperty)">
      <summary>
        <para>Apply extra initial values to the material.</para>
      </summary>
      <param name="prop">The MaterialProperty to apply values for.</param>
    </member>
    <member name="M:UnityEditor.MaterialPropertyDrawer.GetPropertyHeight(UnityEditor.MaterialProperty,System.String,UnityEditor.MaterialEditor)">
      <summary>
        <para>Override this method to specify how tall the GUI for this property is in pixels.</para>
      </summary>
      <param name="prop">The MaterialProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
      <param name="editor">Current material editor.</param>
    </member>
    <member name="M:UnityEditor.MaterialPropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String,UnityEditor.MaterialEditor)">
      <summary>
        <para>Override this method to make your own GUI for the property.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the property GUI.</param>
      <param name="prop">The MaterialProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
      <param name="editor">Current material editor.</param>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.Connection">
      <summary>
        <para>A pair of from and to indices describing what thing keeps what other thing alive.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.Connection.from">
      <summary>
        <para>Index into a virtual list of all GC handles, followed by all native objects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.Connection.to">
      <summary>
        <para>Index into a virtual list of all GC handles, followed by all native objects.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.FieldDescription">
      <summary>
        <para>Description of a field of a managed type.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.FieldDescription.isStatic">
      <summary>
        <para>Is this field static?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.FieldDescription.name">
      <summary>
        <para>Name of this field.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.FieldDescription.offset">
      <summary>
        <para>Offset of this field.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.FieldDescription.typeIndex">
      <summary>
        <para>The typeindex into PackedMemorySnapshot.typeDescriptions of the type this field belongs to.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.MemorySection">
      <summary>
        <para>A dump of a piece of memory from the player that's being profiled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.MemorySection.bytes">
      <summary>
        <para>The actual bytes of the memory dump.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.MemorySection.startAddress">
      <summary>
        <para>The start address of this piece of memory.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.MemorySnapshot">
      <summary>
        <para>MemorySnapshot is a profiling tool to help diagnose memory usage.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.MemoryProfiler.MemorySnapshot.OnSnapshotReceived(System.Action`1&lt;UnityEditor.MemoryProfiler.PackedMemorySnapshot&gt;)">
      <summary>
        <para>Event that will be fired when a new memory snapshot comes in through the profiler connection. Its argument will be a PackedMemorySnapshot.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEditor.MemoryProfiler.MemorySnapshot.RequestNewSnapshot">
      <summary>
        <para>Requests a new snapshot from the currently connected target of the profiler. Currently only il2cpp-based players are able to provide memory snapshots.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.PackedGCHandle">
      <summary>
        <para>A description of a GC handle used by the virtual machine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedGCHandle.target">
      <summary>
        <para>The address of the managed object that the GC handle is referencing.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.PackedMemorySnapshot">
      <summary>
        <para>PackedMemorySnapshot is a compact representation of a memory snapshot that a player has sent through the profiler connection.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedMemorySnapshot.connections">
      <summary>
        <para>Connections is an array of from,to pairs that describe which things are keeping which other things alive.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedMemorySnapshot.gcHandles">
      <summary>
        <para>All GC handles in use in the memorysnapshot.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedMemorySnapshot.managedHeapSections">
      <summary>
        <para>Array of actual managed heap memory sections.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedMemorySnapshot.nativeObjects">
      <summary>
        <para>All native C++ objects that were loaded at time of the snapshot.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedMemorySnapshot.nativeTypes">
      <summary>
        <para>Descriptions of all the C++ unity types the profiled player knows about.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedMemorySnapshot.typeDescriptions">
      <summary>
        <para>Descriptions of all the managed types that were known to the virtual machine when the snapshot was taken.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedMemorySnapshot.virtualMachineInformation">
      <summary>
        <para>Information about the virtual machine running executing the managade code inside the player.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.PackedNativeType">
      <summary>
        <para>A description of a C++ unity type.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeType.name">
      <summary>
        <para>Name of this C++ unity type.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeType.nativeBaseTypeArrayIndex">
      <summary>
        <para>The index used to obtain the native C++ base class description from the PackedMemorySnapshot.nativeTypes array.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject">
      <summary>
        <para>Description of a C++ unity object in memory.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.hideFlags">
      <summary>
        <para>The hideFlags this native object has.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.instanceId">
      <summary>
        <para>InstanceId of this object.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.isDontDestroyOnLoad">
      <summary>
        <para>Has this object has been marked as DontDestroyOnLoad?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.isManager">
      <summary>
        <para>Is this native object an internal Unity manager object?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.isPersistent">
      <summary>
        <para>Is this object persistent? (Assets are persistent, objects stored in scenes are persistent,  dynamically created objects are not)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.name">
      <summary>
        <para>Name of this object.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.nativeObjectAddress">
      <summary>
        <para>The memory address of the native C++ object. This matches the "m_CachedPtr" field of UnityEngine.Object.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.nativeTypeArrayIndex">
      <summary>
        <para>The index used to obtain the native C++ type description from the PackedMemorySnapshot.nativeTypes array.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.size">
      <summary>
        <para>Size in bytes of this object.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.TypeDescription">
      <summary>
        <para>Description of a managed type.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.arrayRank">
      <summary>
        <para>If this is an arrayType, this will return the rank of the array. (1 for a 1-dimensional array, 2 for a 2-dimensional array, etc)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.assembly">
      <summary>
        <para>Name of the assembly this type was loaded from.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.baseOrElementTypeIndex">
      <summary>
        <para>The base type for this type, pointed to by an index into PackedMemorySnapshot.typeDescriptions.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.fields">
      <summary>
        <para>An array containing descriptions of all fields of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.isArray">
      <summary>
        <para>Is this type an array?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.isValueType">
      <summary>
        <para>Is this type a value type? (if it's not a value type, it's a reference type)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.name">
      <summary>
        <para>Name of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.size">
      <summary>
        <para>Size in bytes of an instance of this type. If this type is an arraytype, this describes the amount of bytes a single element in the array will take up.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.staticFieldBytes">
      <summary>
        <para>The actual contents of the bytes that store this types static fields, at the point of time when the snapshot was taken.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.typeIndex">
      <summary>
        <para>The typeIndex of this type.  This index is an index into the PackedMemorySnapshot.typeDescriptions array.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.TypeDescription.typeInfoAddress">
      <summary>
        <para>The address in memory that contains the description of this type inside the virtual machine. This can be used to match managed objects in the heap to their corresponding TypeDescription,  as the first pointer of a managed object points to its type description.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MemoryProfiler.VirtualMachineInformation">
      <summary>
        <para>Information about a virtual machine that provided a memory snapshot.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.VirtualMachineInformation.allocationGranularity">
      <summary>
        <para>Allocation granularity in bytes used by the virtual machine allocator.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.VirtualMachineInformation.arrayBoundsOffsetInHeader">
      <summary>
        <para>Offset in bytes inside the object header of an array object where the bounds of the array is stored.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.VirtualMachineInformation.arrayHeaderSize">
      <summary>
        <para>Size in bytes of the header of an array object.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.VirtualMachineInformation.arraySizeOffsetInHeader">
      <summary>
        <para>Offset in bytes inside the object header of an array object where the size of the array is stored.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.VirtualMachineInformation.heapFormatVersion">
      <summary>
        <para>A version number that will change when the object layout inside the managed heap will change.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.VirtualMachineInformation.objectHeaderSize">
      <summary>
        <para>Size in bytes of the header of each managed object.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MemoryProfiler.VirtualMachineInformation.pointerSize">
      <summary>
        <para>Size in bytes of a pointer.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Menu">
      <summary>
        <para>Menu class to manipulate the menu item.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Menu.#ctor">
      <summary>
        <para>Default constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Menu.GetChecked(System.String)">
      <summary>
        <para>Get the check status of the given menu.</para>
      </summary>
      <param name="menuPath"></param>
    </member>
    <member name="M:UnityEditor.Menu.SetChecked(System.String,System.Boolean)">
      <summary>
        <para>Set the check status of the given menu.</para>
      </summary>
      <param name="menuPath"></param>
      <param name="isChecked"></param>
    </member>
    <member name="T:UnityEditor.MenuCommand">
      <summary>
        <para>Used to extract the context for a MenuItem.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MenuCommand.context">
      <summary>
        <para>Context is the object that is the target of a menu command.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MenuCommand.userData">
      <summary>
        <para>An integer for passing custom information to a menu item.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MenuCommand.#ctor(UnityEngine.Object,System.Int32)">
      <summary>
        <para>Creates a new MenuCommand object.</para>
      </summary>
      <param name="inContext"></param>
      <param name="inUserData"></param>
    </member>
    <member name="M:UnityEditor.MenuCommand.#ctor(UnityEngine.Object)">
      <summary>
        <para>Creates a new MenuCommand object.</para>
      </summary>
      <param name="inContext"></param>
    </member>
    <member name="T:UnityEditor.MenuItem">
      <summary>
        <para>The MenuItem attribute allows you to add menu items to the main menu and inspector context menus.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MenuItem.#ctor(System.String)">
      <summary>
        <para>Creates a menu item and invokes the static function following it, when the menu item is selected.</para>
      </summary>
      <param name="itemName">The itemName is the menu item represented like a pathname.
        For example the menu item could be "GameObject/Do Something".</param>
      <param name="isValidateFunction">If isValidateFunction is true, this is a validation
        function and will be called before invoking the menu function with the same itemName.</param>
      <param name="priority">The order by which the menu items are displayed.</param>
    </member>
    <member name="M:UnityEditor.MenuItem.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Creates a menu item and invokes the static function following it, when the menu item is selected.</para>
      </summary>
      <param name="itemName">The itemName is the menu item represented like a pathname.
        For example the menu item could be "GameObject/Do Something".</param>
      <param name="isValidateFunction">If isValidateFunction is true, this is a validation
        function and will be called before invoking the menu function with the same itemName.</param>
      <param name="priority">The order by which the menu items are displayed.</param>
    </member>
    <member name="M:UnityEditor.MenuItem.#ctor(System.String,System.Boolean,System.Int32)">
      <summary>
        <para>Creates a menu item and invokes the static function following it, when the menu item is selected.</para>
      </summary>
      <param name="itemName">The itemName is the menu item represented like a pathname.
        For example the menu item could be "GameObject/Do Something".</param>
      <param name="isValidateFunction">If isValidateFunction is true, this is a validation
        function and will be called before invoking the menu function with the same itemName.</param>
      <param name="priority">The order by which the menu items are displayed.</param>
    </member>
    <member name="T:UnityEditor.MeshUtility">
      <summary>
        <para>Various utilities for mesh manipulation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MeshUtility.GetMeshCompression(UnityEngine.Mesh)">
      <summary>
        <para>Returns the mesh compression setting for a Mesh.</para>
      </summary>
      <param name="mesh">The mesh to get information on.</param>
    </member>
    <member name="M:UnityEditor.MeshUtility.Optimize(UnityEngine.Mesh)">
      <summary>
        <para>Optimizes the mesh for GPU access.</para>
      </summary>
      <param name="mesh"></param>
    </member>
    <member name="M:UnityEditor.MeshUtility.SetMeshCompression(UnityEngine.Mesh,UnityEditor.ModelImporterMeshCompression)">
      <summary>
        <para>Change the mesh compression setting for a mesh.</para>
      </summary>
      <param name="mesh">The mesh to set the compression mode for.</param>
      <param name="compression">The compression mode to set.</param>
    </member>
    <member name="M:UnityEditor.MeshUtility.SetPerTriangleUV2(UnityEngine.Mesh,UnityEngine.Vector2[])">
      <summary>
        <para>Will insert per-triangle uv2 in mesh and handle vertex splitting etc.</para>
      </summary>
      <param name="src"></param>
      <param name="triUV"></param>
    </member>
    <member name="T:UnityEditor.MessageType">
      <summary>
        <para>User message types.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MessageType.Error">
      <summary>
        <para>Error message.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MessageType.Info">
      <summary>
        <para>Info message.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MessageType.None">
      <summary>
        <para>Neutral message.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MessageType.Warning">
      <summary>
        <para>Warning message.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MobileTextureSubtarget">
      <summary>
        <para>Compressed texture format for target build platform.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.ASTC">
      <summary>
        <para>ASTC texture compression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.ATC">
      <summary>
        <para>ATI texture compression. Available on devices running Adreno GPU, including HTC Nexus One, Droid Incredible, EVO, and others.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.DXT">
      <summary>
        <para>S3 texture compression, nonspecific to DXT variant. Supported on devices running Nvidia Tegra2 platform, including Motorala Xoom, Motorola Atrix, Droid Bionic, and others.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.ETC">
      <summary>
        <para>ETC1 texture compression (or RGBA16 for textures with alpha), supported by all devices.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.ETC2">
      <summary>
        <para>ETC2 texture compression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.Generic">
      <summary>
        <para>Don't override texture compression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.PVRTC">
      <summary>
        <para>PowerVR texture compression. Available in devices running PowerVR SGX530/540 GPU, such as Motorola DROID series; Samsung Galaxy S, Nexus S, and Galaxy Tab; and others.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporter">
      <summary>
        <para>Model importer lets you modify import settings from editor scripts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.addCollider">
      <summary>
        <para>Add to imported meshes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationCompression">
      <summary>
        <para>Animation compression setting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationPositionError">
      <summary>
        <para>Allowed error of animation position compression.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationRotationError">
      <summary>
        <para>Allowed error of animation rotation compression.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationScaleError">
      <summary>
        <para>Allowed error of animation scale compression.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationType">
      <summary>
        <para>Animator generation mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationWrapMode">
      <summary>
        <para>The default wrap mode for the generated animation clips.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.bakeIK">
      <summary>
        <para>Bake Inverse Kinematics (IK) when importing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.clipAnimations">
      <summary>
        <para>Animation clips to split animation into. See Also: ModelImporterClipAnimation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.defaultClipAnimations">
      <summary>
        <para>Generate a list of all default animation clip based on TakeInfo.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.extraExposedTransformPaths">
      <summary>
        <para>Animation optimization setting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.fileScale">
      <summary>
        <para>File scale factor (if available) or default one. (Read-only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.generateAnimations">
      <summary>
        <para>Animation generation options.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.generateMaterials">
      <summary>
        <para>Material generation options.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.generateSecondaryUV">
      <summary>
        <para>Generate secondary UV set for lightmapping.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.globalScale">
      <summary>
        <para>Global scale factor for importing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.humanDescription">
      <summary>
        <para>The human description that is used to generate an Avatar during the import process.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.humanoidOversampling">
      <summary>
        <para>Controls how much oversampling is used when importing humanoid animations for retargeting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.importAnimation">
      <summary>
        <para>Import animation from file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.importBlendShapes">
      <summary>
        <para>Controls import of BlendShapes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.importedTakeInfos">
      <summary>
        <para>Generates the list of all imported take.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.importMaterials">
      <summary>
        <para>Import materials from file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.importNormals">
      <summary>
        <para>Vertex normal import options.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.importTangents">
      <summary>
        <para>Vertex tangent import options.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.isBakeIKSupported">
      <summary>
        <para>Is Bake Inverse Kinematics (IK) supported by this importer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.isFileScaleUsed">
      <summary>
        <para>Is FileScale was used when importing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.isReadable">
      <summary>
        <para>Are mesh vertices and indices accessible from script?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.isTangentImportSupported">
      <summary>
        <para>Is import of tangents supported by this importer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.isUseFileUnitsSupported">
      <summary>
        <para>Is useFileUnits supported for this asset.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.keepQuads">
      <summary>
        <para>If this is true, any quad faces that exist in the mesh data before it is imported are kept as quads instead of being split into two triangles, for the purposes of tessellation. Set this to false to disable this behavior.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.materialName">
      <summary>
        <para>Material naming setting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.materialSearch">
      <summary>
        <para>Existing material search setting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.meshCompression">
      <summary>
        <para>Mesh compression setting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.motionNodeName">
      <summary>
        <para>The path of the transform used to generation the motion of the animation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.normalImportMode">
      <summary>
        <para>Normals import mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.normalSmoothingAngle">
      <summary>
        <para>Smoothing angle (in degrees) for calculating normals.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.optimizeGameObjects">
      <summary>
        <para>Animation optimization setting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.optimizeMesh">
      <summary>
        <para>Vertex optimization setting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.referencedClips">
      <summary>
        <para>Generates the list of all imported Animations.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.resampleCurves">
      <summary>
        <para>If set to false, the importer will not resample curves when possible.
Read more about.

Notes:

- Some unsupported FBX features (such as PreRotation or PostRotation on transforms) will override this setting. In these situations, animation curves will still be resampled even if the setting is disabled. For best results, avoid using PreRotation, PostRotation and GetRotationPivot.

- This option was introduced in Version 5.3. Prior to this version, Unity's import behaviour was as if this option was always enabled. Therefore enabling the option gives the same behaviour as pre-5.3 animation import.
</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.secondaryUVAngleDistortion">
      <summary>
        <para>Threshold for angle distortion (in degrees) when generating secondary UV.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.secondaryUVAreaDistortion">
      <summary>
        <para>Threshold for area distortion when generating secondary UV.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.secondaryUVHardAngle">
      <summary>
        <para>Hard angle (in degrees) for generating secondary UV.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.secondaryUVPackMargin">
      <summary>
        <para>Margin to be left between charts when packing secondary UV.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.sourceAvatar">
      <summary>
        <para>Imports the HumanDescription from the given Avatar.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.splitTangentsAcrossSeams">
      <summary>
        <para>Should tangents be split across UV seams.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.swapUVChannels">
      <summary>
        <para>Swap primary and secondary UV channels when importing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.tangentImportMode">
      <summary>
        <para>Tangents import mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.transformPaths">
      <summary>
        <para>Generates the list of all imported Transforms.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.useFileUnits">
      <summary>
        <para>Detect file units and import as 1FileUnit=1UnityUnit, otherwise it will import as 1cm=1UnityUnit.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.weldVertices">
      <summary>
        <para>Combine vertices that share the same position in space.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ModelImporter.CreateDefaultMaskForClip(UnityEditor.ModelImporterClipAnimation)">
      <summary>
        <para>Creates a mask that matches the model hierarchy, and applies it to the provided ModelImporterClipAnimation.</para>
      </summary>
      <param name="clip">Clip to which the mask will be applied.</param>
    </member>
    <member name="T:UnityEditor.ModelImporterAnimationCompression">
      <summary>
        <para>Animation compression options for ModelImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationCompression.KeyframeReduction">
      <summary>
        <para>Perform keyframe reduction.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationCompression.KeyframeReductionAndCompression">
      <summary>
        <para>Perform keyframe reduction and compression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationCompression.Off">
      <summary>
        <para>No animation compression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationCompression.Optimal">
      <summary>
        <para>Perform keyframe reduction and choose the best animation curve representation at runtime to reduce memory footprint (default).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterAnimationType">
      <summary>
        <para>Animation mode for ModelImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationType.Generic">
      <summary>
        <para>Generate a generic animator.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationType.Human">
      <summary>
        <para>Generate a human animator.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationType.Legacy">
      <summary>
        <para>Generate a legacy animation type.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationType.None">
      <summary>
        <para>Generate no animation data.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterClipAnimation">
      <summary>
        <para>Animation clips to split animation into.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.additiveReferencePoseFrame">
      <summary>
        <para>The additive reference pose frame.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.curves">
      <summary>
        <para>Additionnal curves that will be that will be added during the import process.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.cycleOffset">
      <summary>
        <para>Offset to the cycle of a looping animation, if a different time in it is desired to be the start.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.events">
      <summary>
        <para>AnimationEvents that will be added during the import process.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.firstFrame">
      <summary>
        <para>First frame of the clip.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.hasAdditiveReferencePose">
      <summary>
        <para>Enable to defines an additive reference pose.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.heightFromFeet">
      <summary>
        <para>Keeps the feet aligned with the root transform position.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.heightOffset">
      <summary>
        <para>Offset to the vertical root position.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.keepOriginalOrientation">
      <summary>
        <para>Keeps the vertical position as it is authored in the source file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.keepOriginalPositionXZ">
      <summary>
        <para>Keeps the vertical position as it is authored in the source file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.keepOriginalPositionY">
      <summary>
        <para>Keeps the vertical position as it is authored in the source file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.lastFrame">
      <summary>
        <para>Last frame of the clip.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.lockRootHeightY">
      <summary>
        <para>Enable to make vertical root motion be baked into the movement of the bones. Disable to make vertical root motion be stored as root motion.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.lockRootPositionXZ">
      <summary>
        <para>Enable to make horizontal root motion be baked into the movement of the bones. Disable to make horizontal root motion be stored as root motion.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.lockRootRotation">
      <summary>
        <para>Enable to make root rotation be baked into the movement of the bones. Disable to make root rotation be stored as root motion.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.loop">
      <summary>
        <para>Is the clip a looping animation?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.loopPose">
      <summary>
        <para>Enable to make the motion loop seamlessly.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.loopTime">
      <summary>
        <para>Enable to make the clip loop.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.maskNeedsUpdating">
      <summary>
        <para>Returns true when the source AvatarMask has changed. This only happens when  ModelImporterClipAnimation.maskType is set to ClipAnimationMaskType.CopyFromOther
To force a reload of the mask, simply set  ModelImporterClipAnimation.maskSource to the desired AvatarMask.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.maskSource">
      <summary>
        <para>The AvatarMask used to mask transforms during the import process.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.maskType">
      <summary>
        <para>Define mask type.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.mirror">
      <summary>
        <para>Mirror left and right in this clip.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.name">
      <summary>
        <para>Clip name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.rotationOffset">
      <summary>
        <para>Offset in degrees to the root rotation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.takeName">
      <summary>
        <para>Take name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.wrapMode">
      <summary>
        <para>The wrap mode of the animation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ModelImporterClipAnimation.ConfigureClipFromMask(UnityEngine.AvatarMask)">
      <summary>
        <para>Copy the mask settings from an AvatarMask to the clip configuration.</para>
      </summary>
      <param name="mask">AvatarMask from which the mask settings will be imported.</param>
    </member>
    <member name="M:UnityEditor.ModelImporterClipAnimation.ConfigureMaskFromClip(UnityEngine.AvatarMask&amp;)">
      <summary>
        <para>Copy the current masking settings from the clip to an AvatarMask.</para>
      </summary>
      <param name="mask">AvatarMask to which the masking values will be saved.</param>
    </member>
    <member name="T:UnityEditor.ModelImporterGenerateAnimations">
      <summary>
        <para>Animation generation options for ModelImporter. These options relate to the legacy Animation system, they should only be used when ModelImporter.animationType==ModelImporterAnimationType.Legacy.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.GenerateAnimations">
      <summary>
        <para>Default animation import mode (All animations are stored in the root object).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.InNodes">
      <summary>
        <para>Generate animations in the objects that animate.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.InOriginalRoots">
      <summary>
        <para>Generate animations in the root objects of the animation package.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.InRoot">
      <summary>
        <para>Generate animations in the transform root objects.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.None">
      <summary>
        <para>Do not generate animations.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterGenerateMaterials">
      <summary>
        <para>Material generation options for ModelImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateMaterials.None">
      <summary>
        <para>Do not generate materials.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateMaterials.PerSourceMaterial">
      <summary>
        <para>Generate a material for each material in the source asset.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateMaterials.PerTexture">
      <summary>
        <para>Generate a material for each texture used.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterHumanoidOversampling">
      <summary>
        <para>Humanoid Oversampling available multipliers.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterHumanoidOversampling.X1">
      <summary>
        <para>Default Humanoid Oversampling multiplier = 1 which is equivalent to no oversampling.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterHumanoidOversampling.X2">
      <summary>
        <para>Humanoid Oversampling samples at 2 times the sampling rate found in the imported file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterHumanoidOversampling.X4">
      <summary>
        <para>Humanoid Oversampling samples at 4 times the sampling rate found in the imported file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterHumanoidOversampling.X8">
      <summary>
        <para>Humanoid Oversampling samples at 8 times the sampling rate found in the imported file.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterMaterialName">
      <summary>
        <para>Material naming options for ModelImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialName.BasedOnMaterialName">
      <summary>
        <para>Use a material name of the form &lt;materialName&gt;.mat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialName.BasedOnModelNameAndMaterialName">
      <summary>
        <para>Use material names in the form &lt;modelFileName&gt;-&lt;materialName&gt;.mat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialName.BasedOnTextureName">
      <summary>
        <para>Use material names in the form &lt;textureName&gt;.mat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialName.BasedOnTextureName_Or_ModelNameAndMaterialName">
      <summary>
        <para>&lt;textureName&gt;.mat or &lt;modelFileName&gt;-&lt;materialName&gt;.mat material name.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterMaterialSearch">
      <summary>
        <para>Material search options for ModelImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialSearch.Everywhere">
      <summary>
        <para>Search in all project.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialSearch.Local">
      <summary>
        <para>Search in local Materials folder.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialSearch.RecursiveUp">
      <summary>
        <para>Recursive-up search in Materials folders.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterMeshCompression">
      <summary>
        <para>Mesh compression options for ModelImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMeshCompression.High">
      <summary>
        <para>High amount of mesh compression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMeshCompression.Low">
      <summary>
        <para>Low amount of mesh compression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMeshCompression.Medium">
      <summary>
        <para>Medium amount of mesh compression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMeshCompression.Off">
      <summary>
        <para>No mesh compression (default).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterNormals">
      <summary>
        <para>Vertex normal generation options for ModelImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterNormals.Calculate">
      <summary>
        <para>Calculate vertex normals.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterNormals.Import">
      <summary>
        <para>Import vertex normals from model file (default).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterNormals.None">
      <summary>
        <para>Do not import vertex normals.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterTangents">
      <summary>
        <para>Vertex tangent generation options for ModelImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterTangents.CalculateLegacy">
      <summary>
        <para>Calculate tangents with legacy algorithm.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterTangents.CalculateLegacyWithSplitTangents">
      <summary>
        <para>Calculate tangents with legacy algorithm, with splits across UV charts.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterTangents.CalculateMikk">
      <summary>
        <para>Calculate tangents using MikkTSpace (default).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterTangents.Import">
      <summary>
        <para>Import vertex tangents from model file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterTangents.None">
      <summary>
        <para>Do not import vertex tangents.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterTangentSpaceMode">
      <summary>
        <para>Tangent space generation options for ModelImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterTangentSpaceMode.Calculate">
      <summary>
        <para>Calculate tangents.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterTangentSpaceMode.Import">
      <summary>
        <para>Import normals/tangents from file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterTangentSpaceMode.None">
      <summary>
        <para>Strip normals/tangents.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MonoScript">
      <summary>
        <para>Representation of Script assets.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MonoScript.FromMonoBehaviour(UnityEngine.MonoBehaviour)">
      <summary>
        <para>Returns the MonoScript object containing specified MonoBehaviour.</para>
      </summary>
      <param name="behaviour">The MonoBehaviour whose MonoScript should be returned.</param>
    </member>
    <member name="M:UnityEditor.MonoScript.FromScriptableObject(UnityEngine.ScriptableObject)">
      <summary>
        <para>Returns the MonoScript object containing specified ScriptableObject.</para>
      </summary>
      <param name="scriptableObject">The ScriptableObject whose MonoScript should be returned.</param>
    </member>
    <member name="M:UnityEditor.MonoScript.GetClass">
      <summary>
        <para>Returns the System.Type object of the class implemented by this script.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MouseCursor">
      <summary>
        <para>Custom mouse cursor shapes used with EditorGUIUtility.AddCursorRect.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Arrow">
      <summary>
        <para>Normal pointer arrow.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ArrowMinus">
      <summary>
        <para>Arrow with the minus symbol next to it.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ArrowPlus">
      <summary>
        <para>Arrow with the plus symbol next to it.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.CustomCursor">
      <summary>
        <para>The current user defined cursor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.FPS">
      <summary>
        <para>Cursor with an eye and stylized arrow keys for FPS navigation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Link">
      <summary>
        <para>Arrow with a Link badge (for assigning pointers).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.MoveArrow">
      <summary>
        <para>Arrow with the move symbol next to it for the sceneview.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Orbit">
      <summary>
        <para>Cursor with an eye for orbit.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Pan">
      <summary>
        <para>Cursor with a dragging hand for pan.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ResizeHorizontal">
      <summary>
        <para>Horizontal resize arrows.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ResizeUpLeft">
      <summary>
        <para>Resize up-Left for window edges.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ResizeUpRight">
      <summary>
        <para>Resize up-right for window edges.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ResizeVertical">
      <summary>
        <para>Vertical resize arrows.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.RotateArrow">
      <summary>
        <para>Arrow with the rotate symbol next to it for the sceneview.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ScaleArrow">
      <summary>
        <para>Arrow with the scale symbol next to it for the sceneview.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.SlideArrow">
      <summary>
        <para>Arrow with small arrows for indicating sliding at number fields.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.SplitResizeLeftRight">
      <summary>
        <para>Left-Right resize arrows for window splitters.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.SplitResizeUpDown">
      <summary>
        <para>Up-Down resize arrows for window splitters.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Text">
      <summary>
        <para>Text cursor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Zoom">
      <summary>
        <para>Cursor with a magnifying glass for zoom.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MovieImporter">
      <summary>
        <para>AssetImporter for importing MovieTextures.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MovieImporter.duration">
      <summary>
        <para>Duration of the Movie to be imported in seconds.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MovieImporter.linearTexture">
      <summary>
        <para>Is the movie texture storing non-color data?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MovieImporter.quality">
      <summary>
        <para>Quality setting to use when importing the movie. This is a float value from 0 to 1.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Networking.PlayerConnection.ConnectedPlayer">
      <summary>
        <para>Information of the connected player.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Networking.PlayerConnection.ConnectedPlayer.PlayerId">
      <summary>
        <para>The Id of the player connected.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Networking.PlayerConnection.EditorConnection">
      <summary>
        <para>Handles the connection from the Editor to the Player.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Networking.PlayerConnection.EditorConnection.ConnectedPlayers">
      <summary>
        <para>A list of the connected players.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Networking.PlayerConnection.EditorConnection.Initialize">
      <summary>
        <para>Initializes the EditorConnection.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Networking.PlayerConnection.EditorConnection.Register(System.Guid,UnityEngine.Events.UnityAction`1&lt;UnityEngine.Networking.PlayerConnection.MessageEventArgs&gt;)">
      <summary>
        <para>Registers a callback on a certain message ID.</para>
      </summary>
      <param name="messageId">The message ID that invokes the callback when received by the Editor.</param>
      <param name="callback">Action that is executed when a message with ID messageId is received by the Editor.
The callback includes the data that is sent from the Player, and the Player's ID.
The Player ID is used to distinguish between multiple Players connected to the same Editor.</param>
    </member>
    <member name="M:UnityEditor.Networking.PlayerConnection.EditorConnection.RegisterConnection(UnityEngine.Events.UnityAction`1&lt;System.Int32&gt;)">
      <summary>
        <para>Registers a callback, executed when a new Player connects to the Editor.</para>
      </summary>
      <param name="callback">Action called when a new Player connects, with the Player ID of the Player.</param>
    </member>
    <member name="M:UnityEditor.Networking.PlayerConnection.EditorConnection.RegisterDisconnection(UnityEngine.Events.UnityAction`1&lt;System.Int32&gt;)">
      <summary>
        <para>Registers a callback on a Player when that Player disconnects.</para>
      </summary>
      <param name="callback">The Action that is called when the Player with the given Player ID disconnects.</param>
    </member>
    <member name="M:UnityEditor.Networking.PlayerConnection.EditorConnection.Send(System.Guid,System.Byte[],System.Int32)">
      <summary>
        <para>Sends data to multiple or single Player(s).</para>
      </summary>
      <param name="messageId">Type ID of the message to send to the Player(s).</param>
      <param name="playerId">If set, the message will only send to the Player with this ID.</param>
      <param name="data"></param>
    </member>
    <member name="M:UnityEditor.Networking.PlayerConnection.EditorConnection.Send(System.Guid,System.Byte[])">
      <summary>
        <para>Sends data to multiple or single Player(s).</para>
      </summary>
      <param name="messageId">Type ID of the message to send to the Player(s).</param>
      <param name="playerId">If set, the message will only send to the Player with this ID.</param>
      <param name="data"></param>
    </member>
    <member name="M:UnityEditor.Networking.PlayerConnection.EditorConnection.Unregister(System.Guid,UnityEngine.Events.UnityAction`1&lt;UnityEngine.Networking.PlayerConnection.MessageEventArgs&gt;)">
      <summary>
        <para>Deregisters a registered callback.</para>
      </summary>
      <param name="messageId">Message ID associated with the callback that you wish to deregister.</param>
      <param name="callback">The Action callback you wish to deregister.</param>
    </member>
    <member name="T:UnityEditor.ObjectNames">
      <summary>
        <para>Helper class for constructing displayable names for objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectNames.GetClassName(UnityEngine.Object)">
      <summary>
        <para>Class name of an object.</para>
      </summary>
      <param name="obj"></param>
    </member>
    <member name="M:UnityEditor.ObjectNames.GetDragAndDropTitle(UnityEngine.Object)">
      <summary>
        <para>Drag and drop title for an object.</para>
      </summary>
      <param name="obj"></param>
    </member>
    <member name="M:UnityEditor.ObjectNames.GetInspectorTitle(UnityEngine.Object)">
      <summary>
        <para>Inspector title for an object.</para>
      </summary>
      <param name="obj"></param>
    </member>
    <member name="M:UnityEditor.ObjectNames.GetUniqueName(System.String[],System.String)">
      <summary>
        <para>Make a unique name using the provided name as a base.

If the target name is in the provided list of existing names, a unique name is generated by appending the next available numerical increment.</para>
      </summary>
      <param name="existingNames">A list of pre-existing names.</param>
      <param name="name">Desired name to be used as is, or as a base.</param>
      <returns>
        <para>A name not found in the list of pre-existing names.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ObjectNames.NicifyVariableName(System.String)">
      <summary>
        <para>Make a displayable name for a variable.</para>
      </summary>
      <param name="name"></param>
    </member>
    <member name="M:UnityEditor.ObjectNames.SetNameSmart(UnityEngine.Object,System.String)">
      <summary>
        <para>Sets the name of an Object.</para>
      </summary>
      <param name="obj"></param>
      <param name="name"></param>
    </member>
    <member name="T:UnityEditor.ObjectPreview">
      <summary>
        <para>Base Class to derive from when creating Custom Previews.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ObjectPreview.target">
      <summary>
        <para>The object currently being previewed.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectPreview.DrawPreview(UnityEngine.Rect)">
      <summary>
        <para>This is the first entry point for Preview Drawing.</para>
      </summary>
      <param name="previewArea">The available area to draw the preview.</param>
    </member>
    <member name="M:UnityEditor.ObjectPreview.GetInfoString">
      <summary>
        <para>Implement this method to show object information on top of the object preview.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectPreview.GetPreviewTitle">
      <summary>
        <para>Override this method if you want to change the label of the Preview area.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectPreview.HasPreviewGUI">
      <summary>
        <para>Can this component be Previewed in its current state?</para>
      </summary>
      <returns>
        <para>True if this component can be Previewed in its current state.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ObjectPreview.Initialize(UnityEngine.Object[])">
      <summary>
        <para>Called when the Preview gets created with the objects being previewed.</para>
      </summary>
      <param name="targets">The objects being previewed.</param>
    </member>
    <member name="M:UnityEditor.ObjectPreview.MoveNextTarget">
      <summary>
        <para>Called to iterate through the targets, this will be used when previewing more than one target.</para>
      </summary>
      <returns>
        <para>True if there is another target available.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ObjectPreview.OnInteractivePreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Implement to create your own interactive custom preview. Interactive custom previews are used in the preview area of the inspector and the object selector.</para>
      </summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
    </member>
    <member name="M:UnityEditor.ObjectPreview.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Implement to create your own custom preview for the preview area of the inspector, primary editor headers and the object selector.</para>
      </summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
    </member>
    <member name="M:UnityEditor.ObjectPreview.OnPreviewSettings">
      <summary>
        <para>Override this method if you want to show custom controls in the preview header.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectPreview.ResetTarget">
      <summary>
        <para>Called to Reset the target before iterating through them.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PhysicsDebugWindow">
      <summary>
        <para>Displays the Physics Debug Visualization options.

The Physics Debug Visualization is only displayed if this window is visible.

See Also: PhysicsVisualizationSettings.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PhysicsVisualizationSettings">
      <summary>
        <para>This class contains the settings controlling the Physics Debug Visualization.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PhysicsVisualizationSettings.baseAlpha">
      <summary>
        <para>Alpha amount used for transparency blending.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PhysicsVisualizationSettings.colorVariance">
      <summary>
        <para>Used to disinguish neighboring Colliders.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PhysicsVisualizationSettings.devOptions">
      <summary>
        <para>Shows extra options used to develop and debug the physics visualization.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PhysicsVisualizationSettings.dirtyCount">
      <summary>
        <para>Dirty marker used for refreshing the GUI.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PhysicsVisualizationSettings.enableMouseSelect">
      <summary>
        <para>Enables the mouse-over highlighting and mouse selection modes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PhysicsVisualizationSettings.filterWorkflow">
      <summary>
        <para>See PhysicsVisualizationSettings.FilterWorkflow.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PhysicsVisualizationSettings.forceOverdraw">
      <summary>
        <para>Forcing the drawing of Colliders on top of any other geometry, regardless of depth.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PhysicsVisualizationSettings.kinematicColor">
      <summary>
        <para>Color for kinematic Rigidbodies.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PhysicsVisualizationSettings.rigidbodyColor">
      <summary>
        <para>Color for Rigidbodies, primarily active ones.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PhysicsVisualizationSettings.showCollisionGeometry">
      <summary>
        <para>Should the PhysicsDebugWindow display the collision geometry.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PhysicsVisualizationSettings.sleepingBodyColor">
      <summary>
        <para>Color for Rigidbodies that are controlled by the physics simulator, but are not currently being simulated.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PhysicsVisualizationSettings.staticColor">
      <summary>
        <para>Color for Colliders that do not have a Rigidbody component.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PhysicsVisualizationSettings.terrainTilesMax">
      <summary>
        <para>Maximum number of mesh tiles available to draw all Terrain Colliders.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PhysicsVisualizationSettings.triggerColor">
      <summary>
        <para>Color for Colliders that are Triggers.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PhysicsVisualizationSettings.useSceneCam">
      <summary>
        <para>Controls whether the SceneView or the GameView camera is used. Not shown in the UI.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PhysicsVisualizationSettings.viewDistance">
      <summary>
        <para>Colliders within this distance will be displayed.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.ClearMouseHighlight">
      <summary>
        <para>Clears the highlighted Collider.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.DeinitDebugDraw">
      <summary>
        <para>Deinitializes the physics debug visualization system and tracking of changes Colliders.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PhysicsVisualizationSettings.FilterWorkflow">
      <summary>
        <para>Decides whether the Workflow in the Physics Debug window should be inclusive
 (&lt;a href="PhysicsVisualizationSettings.FilterWorkflow.ShowSelectedItems.html"&gt;ShowSelectedItems&lt;a&gt;) or exclusive (&lt;a href="PhysicsVisualizationSettings.FilterWorkflow.HideSelectedItems.html"&gt;HideSelectedItems&lt;a&gt;).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PhysicsVisualizationSettings.FilterWorkflow.HideSelectedItems">
      <summary>
        <para>With HideSelectedItems you can hide selected filter items in order to easily discard uninteresting Collider properties thereby making overview and navigation easier.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PhysicsVisualizationSettings.FilterWorkflow.ShowSelectedItems">
      <summary>
        <para>With ShowSelectedItems and the Select None button is it easy to monitor very specific Colliders.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.GetShowBoxColliders(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow)">
      <summary>
        <para>Should BoxColliders be shown.</para>
      </summary>
      <param name="filterWorkflow"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.GetShowCapsuleColliders(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow)">
      <summary>
        <para>Should CapsuleColliders be shown.</para>
      </summary>
      <param name="filterWorkflow"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.GetShowCollisionLayer(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow,System.Int32)">
      <summary>
        <para>Should the given layer for the given filterWorkflow be considered by the display filter.</para>
      </summary>
      <param name="filterWorkflow"></param>
      <param name="layer"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.GetShowCollisionLayerMask(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow)">
      <summary>
        <para>Should the mask representing the layers for the given filterWorkflow be considered by the display filter.</para>
      </summary>
      <param name="filterWorkflow"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.GetShowKinematicBodies(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow)">
      <summary>
        <para>Should the kinematic Rigidbodies for the given filterWorkflow be considered by the display filter.</para>
      </summary>
      <param name="filterWorkflow"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.GetShowMeshColliders(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow,UnityEditor.PhysicsVisualizationSettings/MeshColliderType)">
      <summary>
        <para>Should MeshColliders be shown.</para>
      </summary>
      <param name="filterWorkflow"></param>
      <param name="colliderType"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.GetShowRigidbodies(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow)">
      <summary>
        <para>Should any Rigidbodies for the given filterWorkflow be considered by the display filter.</para>
      </summary>
      <param name="filterWorkflow"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.GetShowSleepingBodies(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow)">
      <summary>
        <para>Should the sleeping Rigidbodies for the given filterWorkflow be considered by the display filter.</para>
      </summary>
      <param name="filterWorkflow"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.GetShowSphereColliders(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow)">
      <summary>
        <para>Should SphereColliders be shown.</para>
      </summary>
      <param name="filterWorkflow"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.GetShowStaticColliders(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow)">
      <summary>
        <para>Should the Colliders without a Rigidbody component be considered by the display filter for the given filterWorkflow.</para>
      </summary>
      <param name="filterWorkflow"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.GetShowTerrainColliders(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow)">
      <summary>
        <para>Should TerrainColliders be shown.</para>
      </summary>
      <param name="filterWorkflow"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.GetShowTriggers(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow)">
      <summary>
        <para>Should the triggers for the given filterWorkflow be considered by the display filter.</para>
      </summary>
      <param name="filterWorkflow"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.HasMouseHighlight">
      <summary>
        <para>Returns true if there currently is any kind of physics object highlighted.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.InitDebugDraw">
      <summary>
        <para>Initializes the physics debug visualization system. The system must be initialized for any physics objects to be visualized. It is normally initialized by the PhysicsDebugWindow.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PhysicsVisualizationSettings.MeshColliderType">
      <summary>
        <para>Is a MeshCollider convex.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PhysicsVisualizationSettings.MeshColliderType.Convex">
      <summary>
        <para>Corresponds to MeshCollider.convex is true.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PhysicsVisualizationSettings.MeshColliderType.NonConvex">
      <summary>
        <para>Corresponds to MeshCollider.convex is false.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.Reset">
      <summary>
        <para>Resets the visualization options to their default state.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.SetShowBoxColliders(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow,System.Boolean)">
      <summary>
        <para>Should BoxColliders be shown.</para>
      </summary>
      <param name="filterWorkflow"></param>
      <param name="show"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.SetShowCapsuleColliders(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow,System.Boolean)">
      <summary>
        <para>Should CapsuleColliders be shown.</para>
      </summary>
      <param name="filterWorkflow"></param>
      <param name="show"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.SetShowCollisionLayer(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow,System.Int32,System.Boolean)">
      <summary>
        <para>Should the given layer for the given filterWorkflow be considered by the display filter.</para>
      </summary>
      <param name="filterWorkflow"></param>
      <param name="layer"></param>
      <param name="show"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.SetShowCollisionLayerMask(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow,System.Int32)">
      <summary>
        <para>Should the mask representing the layers for the given filterWorkflow be considered by the display filter.</para>
      </summary>
      <param name="filterWorkflow"></param>
      <param name="mask"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.SetShowForAllFilters(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow,System.Boolean)">
      <summary>
        <para>Enables or disables all filtering items for the current filterWorkflow.</para>
      </summary>
      <param name="filterWorkflow"></param>
      <param name="selected"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.SetShowKinematicBodies(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow,System.Boolean)">
      <summary>
        <para>Should the kinematic Rigidbodies for the given filterWorkflow be considered by the display filter.</para>
      </summary>
      <param name="filterWorkflow"></param>
      <param name="show"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.SetShowMeshColliders(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow,UnityEditor.PhysicsVisualizationSettings/MeshColliderType,System.Boolean)">
      <summary>
        <para>Should MeshColliders be shown.</para>
      </summary>
      <param name="filterWorkflow"></param>
      <param name="colliderType"></param>
      <param name="show"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.SetShowRigidbodies(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow,System.Boolean)">
      <summary>
        <para>Should any Rigidbodies for the given filterWorkflow be considered by the display filter.</para>
      </summary>
      <param name="filterWorkflow"></param>
      <param name="show"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.SetShowSleepingBodies(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow,System.Boolean)">
      <summary>
        <para>Should the sleeping Rigidbodies for the given filterWorkflow be considered by the display filter.</para>
      </summary>
      <param name="filterWorkflow"></param>
      <param name="show"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.SetShowSphereColliders(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow,System.Boolean)">
      <summary>
        <para>Should SphereColliders be shown.</para>
      </summary>
      <param name="filterWorkflow"></param>
      <param name="show"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.SetShowStaticColliders(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow,System.Boolean)">
      <summary>
        <para>Should the Colliders without a Rigidbody component be considered by the display filter for the given filterWorkflow.</para>
      </summary>
      <param name="filterWorkflow"></param>
      <param name="show"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.SetShowTerrainColliders(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow,System.Boolean)">
      <summary>
        <para>Should TerrainColliders be shown.</para>
      </summary>
      <param name="filterWorkflow"></param>
      <param name="show"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.SetShowTriggers(UnityEditor.PhysicsVisualizationSettings/FilterWorkflow,System.Boolean)">
      <summary>
        <para>Should the triggers for the given filterWorkflow be considered by the display filter.</para>
      </summary>
      <param name="filterWorkflow"></param>
      <param name="show"></param>
    </member>
    <member name="M:UnityEditor.PhysicsVisualizationSettings.UpdateMouseHighlight(UnityEngine.Vector2)">
      <summary>
        <para>Updates the mouse-over highlight at the given mouse position in screen space.</para>
      </summary>
      <param name="pos"></param>
    </member>
    <member name="T:UnityEditor.PivotMode">
      <summary>
        <para>Where is the tool handle placed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PivotMode.Center">
      <summary>
        <para>The tool handle is at the graphical center of the selection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PivotMode.Pivot">
      <summary>
        <para>The tool handle is on the pivot point of the active object.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PivotRotation">
      <summary>
        <para>How is the tool handle oriented.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PivotRotation.Global">
      <summary>
        <para>The tool handle is aligned along the global axes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PivotRotation.Local">
      <summary>
        <para>The tool handle is oriented from the active object.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings">
      <summary>
        <para>Player Settings is where you define various parameters for the final game that you will build in Unity. Some of these values are used in the Resolution Dialog that launches when you open a standalone game.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.accelerometerFrequency">
      <summary>
        <para>Accelerometer update frequency.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.actionOnDotNetUnhandledException">
      <summary>
        <para>Sets the crash behavior on .NET unhandled exception.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.advancedLicense">
      <summary>
        <para>Is the advanced version being used?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToLandscapeLeft">
      <summary>
        <para>Is auto-rotation to landscape left supported?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToLandscapeRight">
      <summary>
        <para>Is auto-rotation to landscape right supported?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToPortrait">
      <summary>
        <para>Is auto-rotation to portrait supported?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToPortraitUpsideDown">
      <summary>
        <para>Is auto-rotation to portrait upside-down supported?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.allowFullscreenSwitch">
      <summary>
        <para>If enabled, allows the user to switch between full screen and windowed mode using OS specific keyboard short cuts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.aotOptions">
      <summary>
        <para>Additional AOT compilation options. Shared by AOT platforms.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.apiCompatibilityLevel">
      <summary>
        <para>Deprecated. Use PlayerSettings.GetApiCompatibilityLevel and PlayerSettings.SetApiCompatibilityLevel instead.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.applicationIdentifier">
      <summary>
        <para>The application identifier for the currently selected build target.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.bakeCollisionMeshes">
      <summary>
        <para>Pre bake collision meshes on player build.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.bundleVersion">
      <summary>
        <para>Application bundle version shared between iOS &amp; Android platforms.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.captureSingleScreen">
      <summary>
        <para>Defines if fullscreen games should darken secondary displays.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.cloudProjectId">
      <summary>
        <para>A unique cloud project identifier. It is unique for every project (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.colorSpace">
      <summary>
        <para>Set the rendering color space for the current project.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.companyName">
      <summary>
        <para>The name of your company.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.cursorHotspot">
      <summary>
        <para>Default cursor's click position in pixels from the top left corner of the cursor image.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.d3d11FullscreenMode">
      <summary>
        <para>Define how to handle fullscreen mode in Windows standalones (Direct3D 11 mode).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.d3d9FullscreenMode">
      <summary>
        <para>Define how to handle fullscreen mode in Windows standalones (Direct3D 9 mode).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultCursor">
      <summary>
        <para>The default cursor for your application.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultInterfaceOrientation">
      <summary>
        <para>Default screen orientation for mobiles.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultIsFullScreen">
      <summary>
        <para>If enabled, the game will default to fullscreen mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultScreenHeight">
      <summary>
        <para>Default vertical dimension of stand-alone player window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultScreenWidth">
      <summary>
        <para>Default horizontal dimension of stand-alone player window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultWebScreenHeight">
      <summary>
        <para>Default vertical dimension of web player window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultWebScreenWidth">
      <summary>
        <para>Default horizontal dimension of web player window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.displayResolutionDialog">
      <summary>
        <para>Defines the behaviour of the Resolution Dialog on product launch.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.enableCrashReportAPI">
      <summary>
        <para>Enables CrashReport API.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.enableInternalProfiler">
      <summary>
        <para>Enables internal profiler.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.firstStreamedLevelWithResources">
      <summary>
        <para>First level to have access to all Resources.Load assets in Streamed Web Players.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.forceSingleInstance">
      <summary>
        <para>Restrict standalone players to a single concurrent running instance.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.gpuSkinning">
      <summary>
        <para>Enable GPU skinning on capable platforms.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.graphicsJobMode">
      <summary>
        <para>Selects the graphics job mode to use on platforms that support both Native and Legacy graphics jobs.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.graphicsJobs">
      <summary>
        <para>Enable graphics jobs (multi threaded rendering).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iPhoneBundleIdentifier">
      <summary>
        <para>The bundle identifier of the iPhone application.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.keyaliasPass">
      <summary>
        <para>Password for the key used for signing an Android application.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.keystorePass">
      <summary>
        <para>Password used for interacting with the Android Keystore.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.locationUsageDescription">
      <summary>
        <para>Describes the reason for access to the user's location data.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.logObjCUncaughtExceptions">
      <summary>
        <para>Are ObjC uncaught exceptions logged?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.macFullscreenMode">
      <summary>
        <para>Define how to handle fullscreen mode in macOS standalones.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.muteOtherAudioSources">
      <summary>
        <para>Stops or allows audio from other applications to play in the background while your Unity application is running.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.productName">
      <summary>
        <para>The name of your product.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.protectGraphicsMemory">
      <summary>
        <para>Protect graphics memory.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.renderingPath">
      <summary>
        <para>Which rendering path is enabled?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.resizableWindow">
      <summary>
        <para>Use resizable window in standalone player builds.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.resolutionDialogBanner">
      <summary>
        <para>The image to display in the Resolution Dialog window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.runInBackground">
      <summary>
        <para>If enabled, your game will continue to run after lost focus.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.showUnitySplashScreen">
      <summary>
        <para>Should the builtin Unity splash screen be shown?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.singlePassStereoRendering">
      <summary>
        <para>Should Unity support single-pass stereo rendering?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.splashScreenStyle">
      <summary>
        <para>The style to use for the builtin Unity splash screen.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.statusBarHidden">
      <summary>
        <para>Should status bar be hidden. Shared between iOS &amp; Android platforms.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.stereoRenderingPath">
      <summary>
        <para>Active stereo rendering path</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.stereoscopic3D">
      <summary>
        <para>Should player render in stereoscopic 3d on supported hardware?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.stripEngineCode">
      <summary>
        <para>Remove unused Engine code from your build (IL2CPP-only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.strippingLevel">
      <summary>
        <para>Managed code stripping level.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.stripUnusedMeshComponents">
      <summary>
        <para>Should unused Mesh components be excluded from game build?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.use32BitDisplayBuffer">
      <summary>
        <para>32-bit Display Buffer is used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.useAnimatedAutorotation">
      <summary>
        <para>Let the OS autorotate the screen as the device orientation changes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.useDirect3D11">
      <summary>
        <para>Should Direct3D 11 be used when available?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.useHDRDisplay">
      <summary>
        <para>Switch display to HDR mode (if available).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.useMacAppStoreValidation">
      <summary>
        <para>Enable receipt validation for the Mac App Store.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.usePlayerLog">
      <summary>
        <para>Write a log file with debugging information.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.virtualRealitySplashScreen">
      <summary>
        <para>Virtual Reality specific splash screen.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.virtualRealitySupported">
      <summary>
        <para>Enable virtual reality support.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.visibleInBackground">
      <summary>
        <para>On Windows, show the application in the background if Fullscreen Windowed mode is used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxEnableAvatar">
      <summary>
        <para>Xbox 360 Avatars.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.Android">
      <summary>
        <para>Android specific player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Android.androidIsGame">
      <summary>
        <para>Publish the build as a game rather than a regular application. This option affects devices running Android 5.0 Lollipop and later</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Android.androidTVCompatibility">
      <summary>
        <para>Provide a build that is Android TV compatible.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Android.bundleVersionCode">
      <summary>
        <para>Android bundle version code.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Android.disableDepthAndStencilBuffers">
      <summary>
        <para>Disable Depth and Stencil Buffers.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Android.forceInternetPermission">
      <summary>
        <para>Force internet permission flag.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Android.forceSDCardPermission">
      <summary>
        <para>Force SD card permission.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Android.keyaliasName">
      <summary>
        <para>Android key alias name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Android.keyaliasPass">
      <summary>
        <para>Android key alias password.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Android.keystoreName">
      <summary>
        <para>Android keystore name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Android.keystorePass">
      <summary>
        <para>Android keystore password.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Android.licenseVerification">
      <summary>
        <para>License verification flag.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Android.minSdkVersion">
      <summary>
        <para>The minimum API level required for your application to run.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Android.preferredInstallLocation">
      <summary>
        <para>Preferred application install location.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Android.showActivityIndicatorOnLoading">
      <summary>
        <para>Application should show ActivityIndicator when loading.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Android.splashScreenScale">
      <summary>
        <para>Android splash screen scale mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Android.targetDevice">
      <summary>
        <para>Android target device.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Android.targetSdkVersion">
      <summary>
        <para>The target API level of your application.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Android.use24BitDepthBuffer">
      <summary>
        <para>24-bit Depth Buffer is used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Android.useAPKExpansionFiles">
      <summary>
        <para>Use APK Expansion Files.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.Facebook">
      <summary>
        <para>Facebook specific Player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Facebook.sdkVersion">
      <summary>
        <para>Version of Facebook SDK to use for this project.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetApiCompatibilityLevel(UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Gets .NET API compatibility level for specified BuildTargetGroup.</para>
      </summary>
      <param name="buildTargetGroup"></param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetApplicationIdentifier(UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Get the application identifier for the specified platform.</para>
      </summary>
      <param name="targetGroup"></param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetGraphicsAPIs(UnityEditor.BuildTarget)">
      <summary>
        <para>Get graphics APIs to be used on a build platform.</para>
      </summary>
      <param name="platform">Platform to get APIs for.</param>
      <returns>
        <para>Array of graphics APIs.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetIconsForTargetGroup(UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Returns the list of assigned icons for the specified platform.</para>
      </summary>
      <param name="platform"></param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetIconSizesForTargetGroup(UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Returns a list of icon sizes for the specified platform.</para>
      </summary>
      <param name="platform"></param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetPropertyBool(System.String,UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Returns a PlayerSettings named bool property (with an optional build target it should apply to).</para>
      </summary>
      <param name="name">Name of the property.</param>
      <param name="target">BuildTarget for which the property should apply (use default value BuildTargetGroup.Unknown to apply to all targets).</param>
      <returns>
        <para>The current value of the property.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetPropertyInt(System.String,UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Returns a PlayerSettings named int property (with an optional build target it should apply to).</para>
      </summary>
      <param name="name">Name of the property.</param>
      <param name="target">BuildTarget for which the property should apply (use default value BuildTargetGroup.Unknown to apply to all targets).</param>
      <returns>
        <para>The current value of the property.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetPropertyOptionalBool(System.String,System.Boolean&amp;,UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Searches for property and assigns it's value to given variable.</para>
      </summary>
      <param name="name">Name of the property.</param>
      <param name="value">Variable, to which to store the value of the property, if set.</param>
      <param name="target">An optional build target group, to which the property applies.</param>
      <returns>
        <para>True if property was set and it's value assigned to given variable.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetPropertyOptionalInt(System.String,System.Int32&amp;,UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Searches for property and assigns it's value to given variable.</para>
      </summary>
      <param name="name">Name of the property.</param>
      <param name="value">Variable, to which to store the value of the property, if set.</param>
      <param name="target">An optional build target group, to which the property applies.</param>
      <returns>
        <para>True if property was set and it's value assigned to given variable.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetPropertyOptionalString(System.String,System.String&amp;,UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Searches for property and assigns it's value to given variable.</para>
      </summary>
      <param name="name">Name of the property.</param>
      <param name="value">Variable, to which to store the value of the property, if set.</param>
      <param name="target">An optional build target group, to which the property applies.</param>
      <returns>
        <para>True if property was set and it's value assigned to given variable.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetPropertyString(System.String,UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Returns a PlayerSettings named string property (with an optional build target it should apply to).</para>
      </summary>
      <param name="name">Name of the property.</param>
      <param name="target">BuildTarget for which the property should apply (use default value BuildTargetGroup.Unknown to apply to all targets).</param>
      <returns>
        <para>The current value of the property.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetScriptingDefineSymbolsForGroup(UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Get user-specified symbols for script compilation for the given build target group.</para>
      </summary>
      <param name="targetGroup"></param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetStackTraceLogType(UnityEngine.LogType)">
      <summary>
        <para>Get stack trace logging options.</para>
      </summary>
      <param name="logType"></param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetUseDefaultGraphicsAPIs(UnityEditor.BuildTarget)">
      <summary>
        <para>Is a build platform using automatic graphics API choice?</para>
      </summary>
      <param name="platform">Platform to get the flag for.</param>
      <returns>
        <para>Should best available graphics API be used.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PlayerSettings.HasAspectRatio(UnityEditor.AspectRatio)">
      <summary>
        <para>Returns whether or not the specified aspect ratio is enabled.</para>
      </summary>
      <param name="aspectRatio"></param>
    </member>
    <member name="T:UnityEditor.PlayerSettings.iOS">
      <summary>
        <para>iOS specific player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.allowHTTPDownload">
      <summary>
        <para>Should insecure HTTP downloads be allowed?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.appInBackgroundBehavior">
      <summary>
        <para>Application behavior when entering background.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.appleDeveloperTeamID">
      <summary>
        <para>Set this property with your Apple Developer Team ID. You can find this on the Apple Developer website under &lt;a href="https:developer.apple.comaccount#membership"&gt; Account &gt; Membership &lt;/a&gt; . This sets the Team ID for the generated Xcode project, allowing developers to use the Build and Run functionality. An Apple Developer Team ID must be set here for automatic signing of your app.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.appleEnableAutomaticSigning">
      <summary>
        <para>Set this property to true for Xcode to attempt to automatically sign your app based on your appleDeveloperTeamID.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.applicationDisplayName">
      <summary>
        <para>iOS application display name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.backgroundModes">
      <summary>
        <para>Supported background execution modes (when appInBackgroundBehavior is set to iOSAppInBackgroundBehavior.Custom).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.buildNumber">
      <summary>
        <para>The build number of the bundle</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.cameraUsageDescription">
      <summary>
        <para>Describes the reason for access to the user's camera.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.exitOnSuspend">
      <summary>
        <para>Application should exit when suspended to background.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.forceHardShadowsOnMetal">
      <summary>
        <para>Should hard shadows be enforced when running on (mobile) Metal.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.iOSManualProvisioningProfileID">
      <summary>
        <para>A provisioning profile Universally Unique Identifier (UUID) that Xcode will use to build your iOS app in Manual Signing mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.locationUsageDescription">
      <summary>
        <para>Describes the reason for access to the user's location data.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.microphoneUsageDescription">
      <summary>
        <para>Describes the reason for access to the user's microphone.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.overrideIPodMusic">
      <summary>
        <para>Determines iPod playing behavior.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.prerenderedIcon">
      <summary>
        <para>Icon is prerendered.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.requiresFullScreen">
      <summary>
        <para>RequiresFullScreen maps to Apple's plist build setting UIRequiresFullScreen, which is used to opt out of being eligible to participate in Slide Over and Split View for iOS 9.0 multitasking.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.requiresPersistentWiFi">
      <summary>
        <para>Application requires persistent WiFi.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.scriptCallOptimization">
      <summary>
        <para>Script calling optimization.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.sdkVersion">
      <summary>
        <para>Active iOS SDK version used for build.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.showActivityIndicatorOnLoading">
      <summary>
        <para>Application should show ActivityIndicator when loading.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.statusBarStyle">
      <summary>
        <para>Status bar style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.targetDevice">
      <summary>
        <para>Targeted device.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.targetOSVersion">
      <summary>
        <para>Deployment minimal version of iOS.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.targetOSVersionString">
      <summary>
        <para>Deployment minimal version of iOS.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.tvOSManualProvisioningProfileID">
      <summary>
        <para>A provisioning profile Universally Unique Identifier (UUID) that Xcode will use to build your tvOS app in Manual Signing mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iOS.useOnDemandResources">
      <summary>
        <para>Indicates whether application will use On Demand Resources (ODR) API.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.MTRendering">
      <summary>
        <para>Is multi-threaded rendering enabled?</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.N3DS">
      <summary>
        <para>Nintendo 3DS player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.N3DS.applicationId">
      <summary>
        <para>The unique ID of the application, issued by Nintendo.  (0x00300 -&gt; 0xf7fff)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.N3DS.compressStaticMem">
      <summary>
        <para>Specify true to enable static memory compression or false to disable it.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.N3DS.disableDepthAndStencilBuffers">
      <summary>
        <para>Disable depth/stencil buffers, to free up memory.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.N3DS.disableStereoscopicView">
      <summary>
        <para>Disable sterescopic (3D) view on the upper screen.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.N3DS.enableSharedListOpt">
      <summary>
        <para>Enable shared L/R command list, for increased performance with stereoscopic rendering.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.N3DS.enableVSync">
      <summary>
        <para>Enable vsync.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.N3DS.extSaveDataNumber">
      <summary>
        <para>Specify the expanded save data number using 20 bits.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.N3DS.logoStyle">
      <summary>
        <para>Application Logo Style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.N3DS.mediaSize">
      <summary>
        <para>Distribution media size.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.N3DS.productCode">
      <summary>
        <para>Specifies the product code, or the add-on content code.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.N3DS.region">
      <summary>
        <para>Specifies the title region settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.N3DS.stackSize">
      <summary>
        <para>Specify the stack size of the main thread, in bytes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.N3DS.targetPlatform">
      <summary>
        <para>The 3DS target platform.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.N3DS.title">
      <summary>
        <para>The title of the application.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.N3DS.useExtSaveData">
      <summary>
        <para>Specify true when using expanded save data.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.N3DS.LogoStyle">
      <summary>
        <para>Nintendo 3DS logo style specification.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.N3DS.LogoStyle.iQue">
      <summary>
        <para>For Chinese region titles.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.N3DS.LogoStyle.Distributed">
      <summary>
        <para>For titles for which Nintendo purchased the publishing license from the software manufacturer, etc.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.N3DS.LogoStyle.Licensed">
      <summary>
        <para>For all other titles.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.N3DS.LogoStyle.Nintendo">
      <summary>
        <para>For Nintendo first-party titles.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.N3DS.MediaSize">
      <summary>
        <para>Nintendo 3DS distribution media size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.N3DS.MediaSize.128MB">
      <summary>
        <para>128MB</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.N3DS.MediaSize.1GB">
      <summary>
        <para>1GB</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.N3DS.MediaSize.256MB">
      <summary>
        <para>256MB</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.N3DS.MediaSize.2GB">
      <summary>
        <para>2GB</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.N3DS.MediaSize.512MB">
      <summary>
        <para>512MB</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.N3DS.Region">
      <summary>
        <para>Nintendo 3DS Title region.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.N3DS.Region.All">
      <summary>
        <para>For all regions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.N3DS.Region.America">
      <summary>
        <para>For the American region.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.N3DS.Region.China">
      <summary>
        <para>For the Chinese region.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.N3DS.Region.Europe">
      <summary>
        <para>For the European region.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.N3DS.Region.Japan">
      <summary>
        <para>For the Japanese region.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.N3DS.Region.Korea">
      <summary>
        <para>For the Korean region.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.N3DS.Region.Taiwan">
      <summary>
        <para>For the Taiwanese region.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.N3DS.TargetPlatform">
      <summary>
        <para>Nintendo 3DS target platform.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.N3DS.TargetPlatform.NewNintendo3DS">
      <summary>
        <para>Target the New Nintendo 3DS platform.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.N3DS.TargetPlatform.Nintendo3DS">
      <summary>
        <para>Target the Nintendo 3DS platform.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.PS4.PS4AppCategory">
      <summary>
        <para>PS4 application category.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PS4.PS4AppCategory.Application">
      <summary>
        <para>Application.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.PS4.PS4EnterButtonAssignment">
      <summary>
        <para>PS4 enter button assignment.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PS4.PS4EnterButtonAssignment.CircleButton">
      <summary>
        <para>Circle button.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PS4.PS4EnterButtonAssignment.CrossButton">
      <summary>
        <para>Cross button.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment">
      <summary>
        <para>Remote Play key assignment.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment.None">
      <summary>
        <para>No Remote play key assignment.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment.PatternA">
      <summary>
        <para>Remote Play key layout configuration A.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment.PatternB">
      <summary>
        <para>Remote Play key layout configuration B.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment.PatternC">
      <summary>
        <para>Remote Play key layout configuration C.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment.PatternD">
      <summary>
        <para>Remote Play key layout configuration D.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment.PatternE">
      <summary>
        <para>Remote Play key layout configuration E.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment.PatternF">
      <summary>
        <para>Remote Play key layout configuration F.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment.PatternG">
      <summary>
        <para>Remote Play key layout configuration G.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment.PatternH">
      <summary>
        <para>Remote Play key layout configuration H.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.PSVita">
      <summary>
        <para>PS Vita specific player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.acquireBGM">
      <summary>
        <para>Aquire PS Vita background music.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.appVersion">
      <summary>
        <para>The PS Vita application version.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.category">
      <summary>
        <para>The package build category.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.contentID">
      <summary>
        <para>The applications content ID.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.drmType">
      <summary>
        <para>PS Vita DRM Type.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.enterButtonAssignment">
      <summary>
        <para>Specifies whether circle or cross will be used as the default enter button.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.healthWarning">
      <summary>
        <para>Specifies whether or not a health warning will be added to the software manual.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.infoBarColor">
      <summary>
        <para>Specifies the color of the PS Vita information bar, true = white, false = black.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.infoBarOnStartup">
      <summary>
        <para>Specifies whether or not to show the PS Vita information bar when the application starts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.keystoneFile">
      <summary>
        <para>Keystone file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.liveAreaBackroundPath">
      <summary>
        <para>PS Vita Live area background image.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.liveAreaGatePath">
      <summary>
        <para>PS Vita Live area gate image.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.liveAreaPath">
      <summary>
        <para>PS Vita Live area path.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.liveAreaTrialPath">
      <summary>
        <para>PS Vita Live area trial path.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.manualPath">
      <summary>
        <para>PS Vita sofware manual.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.masterVersion">
      <summary>
        <para>PS Vita content master version.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.mediaCapacity">
      <summary>
        <para>Should always = 01.00.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.memoryExpansionMode">
      <summary>
        <para>PS Vita memory expansion mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.npAgeRating">
      <summary>
        <para>PSN Age rating.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.npCommsPassphrase">
      <summary>
        <para>PS Vita NP Passphrase.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.npCommsSig">
      <summary>
        <para>PS Vita NP Signature.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.npCommunicationsID">
      <summary>
        <para>PS Vita NP Communications ID.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.npSupportGBMorGJP">
      <summary>
        <para>Support Game Boot Message or Game Joining Presence.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.npTitleDatPath">
      <summary>
        <para>PS Vita NP Title Data File.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.npTrophyPackPath">
      <summary>
        <para>Path specifying wher to copy a trophy pack from.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.packagePassword">
      <summary>
        <para>32 character password for use if you want to access the contents of a package.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.paramSfxPath">
      <summary>
        <para>Path specifying where to copy the package parameter file (param.sfx) from.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.parentalLevel">
      <summary>
        <para>PS Vita parental level.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.patchChangeInfoPath">
      <summary>
        <para>For cumlative patch packages.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.patchOriginalPackage">
      <summary>
        <para>For building cumulative patch packages.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.powerMode">
      <summary>
        <para>PS Vita power mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.saveDataQuota">
      <summary>
        <para>Save data quota.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.shortTitle">
      <summary>
        <para>The applications short title.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.storageType">
      <summary>
        <para>PS Vita media type.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.tvBootMode">
      <summary>
        <para>PS Vita TV boot mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.tvDisableEmu">
      <summary>
        <para>PS Vita TV Disable Emu flag.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.upgradable">
      <summary>
        <para>Indicates that this is an upgradable (trial) type application which can be converted to a full application by purchasing an upgrade.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.useLibLocation">
      <summary>
        <para>Support for the PS Vita location library was removed by SCE in SDK 3.570.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.PSVita.AllowTwitterDialog">
      <summary>
        <para>Support for the PS Vita twitter dialog was removed by SCE in SDK 3.570.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.PSVita.PSVitaAppCategory">
      <summary>
        <para>Application package category enum.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PSVita.PSVitaAppCategory.Application">
      <summary>
        <para>An application package.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PSVita.PSVitaAppCategory.ApplicationPatch">
      <summary>
        <para>Application patch package.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.PSVita.PSVitaDRMType">
      <summary>
        <para>DRM type enum.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PSVita.PSVitaDRMType.Free">
      <summary>
        <para>Free content.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PSVita.PSVitaDRMType.PaidFor">
      <summary>
        <para>Paid for content.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.PSVita.PSVitaEnterButtonAssignment">
      <summary>
        <para>Enter button assignment enum.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PSVita.PSVitaEnterButtonAssignment.CircleButton">
      <summary>
        <para>Circle button.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PSVita.PSVitaEnterButtonAssignment.CrossButton">
      <summary>
        <para>Cross button.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PSVita.PSVitaEnterButtonAssignment.Default">
      <summary>
        <para>Default.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.PSVita.PSVitaMemoryExpansionMode">
      <summary>
        <para>Memory expansion mode enum.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PSVita.PSVitaMemoryExpansionMode.ExpandBy109MB">
      <summary>
        <para>Enable 109MB memory expansion mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PSVita.PSVitaMemoryExpansionMode.ExpandBy29MB">
      <summary>
        <para>Enable 29MB memory expansion mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PSVita.PSVitaMemoryExpansionMode.ExpandBy77MB">
      <summary>
        <para>Enable 77MB memory expansion mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PSVita.PSVitaMemoryExpansionMode.None">
      <summary>
        <para>Memory expansion disabled.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.PSVita.PSVitaPowerMode">
      <summary>
        <para>Power mode enum.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PSVita.PSVitaPowerMode.ModeA">
      <summary>
        <para>Mode A - default.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PSVita.PSVitaPowerMode.ModeB">
      <summary>
        <para>Mode B - GPU High - No WLAN or COM.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PSVita.PSVitaPowerMode.ModeC">
      <summary>
        <para>Mode C - GPU High - No Camera, OLED Low brightness.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.PSVita.PSVitaTvBootMode">
      <summary>
        <para>PS Vita TV boot mode enum.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PSVita.PSVitaTvBootMode.Default">
      <summary>
        <para>Default (Managed by System Software) (SCEE or SCEA).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PSVita.PSVitaTvBootMode.PSVitaBootablePSVitaTvBootable">
      <summary>
        <para>PS Vita Bootable, PS Vita TV Bootable (SCEJ or SCE Asia).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.PSVita.PSVitaTvBootMode.PSVitaBootablePSVitaTvNotBootable">
      <summary>
        <para>PS Vita Bootable, PS Vita TV Not Bootable (SCEJ or SCE Asia).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.SamsungTV">
      <summary>
        <para>Samsung Smart TV specific Player Settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SamsungTV.deviceAddress">
      <summary>
        <para>The address used when accessing the device.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SamsungTV.productAuthor">
      <summary>
        <para>Author of the created product.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SamsungTV.productAuthorEmail">
      <summary>
        <para>Product author's e-mail.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SamsungTV.productCategory">
      <summary>
        <para>The category of the created product.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SamsungTV.productDescription">
      <summary>
        <para>The description of the created product.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SamsungTV.productLink">
      <summary>
        <para>The author's website link.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories">
      <summary>
        <para>Types of available product categories.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories.Education">
      <summary>
        <para>The education category.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories.Games">
      <summary>
        <para>The games category (default).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories.Information">
      <summary>
        <para>The information category.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories.Kids">
      <summary>
        <para>The kids category.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories.Lifestyle">
      <summary>
        <para>The lifestyle category.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories.Sports">
      <summary>
        <para>The sports category.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.SamsungTV.SamsungTVProductCategories.Videos">
      <summary>
        <para>The videos category.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetApiCompatibilityLevel(UnityEditor.BuildTargetGroup,UnityEditor.ApiCompatibilityLevel)">
      <summary>
        <para>Sets .NET API compatibility level for specified BuildTargetGroup.</para>
      </summary>
      <param name="buildTargetGroup"></param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetApplicationIdentifier(UnityEditor.BuildTargetGroup,System.String)">
      <summary>
        <para>Set the application identifier for the specified platform.</para>
      </summary>
      <param name="targetGroup"></param>
      <param name="identifier"></param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetAspectRatio(UnityEditor.AspectRatio,System.Boolean)">
      <summary>
        <para>Enables the specified aspect ratio.</para>
      </summary>
      <param name="aspectRatio"></param>
      <param name="enable"></param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetGraphicsAPIs(UnityEditor.BuildTarget,UnityEngine.Rendering.GraphicsDeviceType[])">
      <summary>
        <para>Set graphics APIs to be used on a build platform.</para>
      </summary>
      <param name="platform">Platform to set APIs for.</param>
      <param name="apis">Array of graphics APIs.</param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetIconsForTargetGroup(UnityEditor.BuildTargetGroup,UnityEngine.Texture2D[])">
      <summary>
        <para>Assign a list of icons for the specified platform.</para>
      </summary>
      <param name="platform"></param>
      <param name="icons"></param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetPropertyBool(System.String,System.Boolean,UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Sets a PlayerSettings named bool property.</para>
      </summary>
      <param name="name">Name of the property.</param>
      <param name="value">Value of the property (bool).</param>
      <param name="target">BuildTarget for which the property should apply (use default value BuildTargetGroup.Unknown to apply to all targets).</param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetPropertyInt(System.String,System.Int32,UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Sets a PlayerSettings named int property.</para>
      </summary>
      <param name="name">Name of the property.</param>
      <param name="value">Value of the property (int).</param>
      <param name="target">BuildTarget for which the property should apply (use default value BuildTargetGroup.Unknown to apply to all targets).</param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetPropertyString(System.String,System.String,UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Sets a PlayerSettings named string property.</para>
      </summary>
      <param name="name">Name of the property.</param>
      <param name="value">Value of the property (string).</param>
      <param name="target">BuildTarget for which the property should apply (use default value BuildTargetGroup.Unknown to apply to all targets).</param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetScriptingDefineSymbolsForGroup(UnityEditor.BuildTargetGroup,System.String)">
      <summary>
        <para>Set user-specified symbols for script compilation for the given build target group.</para>
      </summary>
      <param name="targetGroup"></param>
      <param name="defines"></param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetStackTraceLogType(UnityEngine.LogType,UnityEngine.StackTraceLogType)">
      <summary>
        <para>Set stack trace logging options.
Note: calling this function will implicitly call Application.SetStackTraceLogType.</para>
      </summary>
      <param name="logType"></param>
      <param name="stackTraceType"></param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetUseDefaultGraphicsAPIs(UnityEditor.BuildTarget,System.Boolean)">
      <summary>
        <para>Should a build platform use automatic graphics API choice.</para>
      </summary>
      <param name="platform">Platform to set the flag for.</param>
      <param name="automatic">Should best available graphics API be used?</param>
    </member>
    <member name="T:UnityEditor.PlayerSettings.SplashScreen">
      <summary>
        <para>Interface to splash screen player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SplashScreen.animationBackgroundZoom">
      <summary>
        <para>The target zoom (from 0 to 1) for the background when it reaches the end of the SplashScreen animation's total duration. Only used when animationMode is PlayerSettings.SplashScreen.AnimationMode.Custom|AnimationMode.Custom.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SplashScreen.animationLogoZoom">
      <summary>
        <para>The target zoom (from 0 to 1) for the logo when it reaches the end of the logo animation's total duration. Only used when animationMode is PlayerSettings.SplashScreen.AnimationMode.Custom|AnimationMode.Custom.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SplashScreen.animationMode">
      <summary>
        <para>The type of animation applied during the splash screen.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SplashScreen.background">
      <summary>
        <para>The background Sprite that is shown in landscape mode. Also shown in portrait mode if backgroundPortrait is null.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SplashScreen.backgroundColor">
      <summary>
        <para>The background color shown if no background Sprite is assigned. Default is a dark blue RGB(34.44,54).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SplashScreen.backgroundPortrait">
      <summary>
        <para>The background Sprite that is shown in portrait mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SplashScreen.drawMode">
      <summary>
        <para>Determines how the Unity logo should be drawn, if it is enabled. If no Unity logo exists in [logos] then the draw mode defaults to PlayerSettings.SplashScreen.DrawMode.UnityLogoBelow|DrawMode.UnityLogoBelow.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SplashScreen.logos">
      <summary>
        <para>The collection of logos that is shown during the splash screen. Logos are drawn in ascending order, starting from index 0, followed by 1, etc etc.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SplashScreen.overlayOpacity">
      <summary>
        <para>In order to increase contrast between the background and the logos, an overlay color modifier is applied. The overlay opacity is the strength of this effect. Note: Reducing the value below 0.5 requires a Plus/Pro license.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SplashScreen.show">
      <summary>
        <para>Set this to true to display the Splash Screen be shown when the application is launched. Set it to false to disable the Splash Screen. Note: Disabling the Splash Screen requires a Plus/Pro license.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SplashScreen.showUnityLogo">
      <summary>
        <para>Set this to true to show the Unity logo during the Splash Screen. Set it to false to disable the Unity logo. Note: Disabling the Unity logo requires a Plus/Pro license.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SplashScreen.unityLogoStyle">
      <summary>
        <para>The style to use for the Unity logo during the Splash Screen.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.SplashScreen.AnimationMode">
      <summary>
        <para>The type of animation applied during the Splash Screen.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.SplashScreen.AnimationMode.Custom">
      <summary>
        <para>Animates the Splash Screen using custom values from PlayerSettings.SplashScreen.animationBackgroundZoom and PlayerSettings.SplashScreen.animationLogoZoom.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.SplashScreen.AnimationMode.Dolly">
      <summary>
        <para>Animates the Splash Screen with a simulated dolly effect.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.SplashScreen.AnimationMode.Static">
      <summary>
        <para>No animation is applied to the Splash Screen logo or background.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.SplashScreen.DrawMode">
      <summary>
        <para>Determines how the Unity logo should be drawn, if it is enabled.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.SplashScreen.DrawMode.AllSequential">
      <summary>
        <para>The Unity logo is shown sequentially providing it exists in the PlayerSettings.SplashScreen.logos collection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.SplashScreen.DrawMode.UnityLogoBelow">
      <summary>
        <para>The Unity logo is drawn in the lower portion of the screen for the duration of the Splash Screen, while the PlayerSettings.SplashScreen.logos are shown in the centre.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.SplashScreen.UnityLogoStyle">
      <summary>
        <para>The style to use for the Unity logo during the Splash Screen.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.SplashScreen.UnityLogoStyle.DarkOnLight">
      <summary>
        <para>A dark Unity logo with a light background.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.SplashScreen.UnityLogoStyle.LightOnDark">
      <summary>
        <para>A white Unity logo with a dark background.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.SplashScreenLogo">
      <summary>
        <para>A single logo that is shown during the Splash Screen. Controls the Sprite that is displayed and its duration.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SplashScreenLogo.duration">
      <summary>
        <para>The total time in seconds for which the logo is shown. The minimum duration is 2 seconds.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SplashScreenLogo.logo">
      <summary>
        <para>The Sprite that is shown during this logo. If this is null, then no logo will be displayed for the duration.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.SplashScreenLogo.unityLogo">
      <summary>
        <para>The Unity logo Sprite.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SplashScreenLogo.Create(System.Single,UnityEngine.Sprite)">
      <summary>
        <para>Creates a new Splash Screen logo with the provided duration and logo Sprite.</para>
      </summary>
      <param name="duration">The total time in seconds that the logo will be shown. Note minimum time is 2 seconds.</param>
      <param name="logo">The logo Sprite to display.</param>
      <returns>
        <para>The new logo.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SplashScreenLogo.CreateWithUnityLogo(System.Single)">
      <summary>
        <para>Creates a new Splash Screen logo with the provided duration and the unity logo.</para>
      </summary>
      <param name="duration">The total time in seconds that the logo will be shown. Note minimum time is 2 seconds.</param>
      <returns>
        <para>The new logo.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.PlayerSettings.Tizen">
      <summary>
        <para>Tizen specific player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Tizen.deploymentTarget">
      <summary>
        <para>Currently chosen Tizen deployment target.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Tizen.deploymentTargetType">
      <summary>
        <para>Choose a type of Tizen target to deploy to. Options are Device or Emulator.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Tizen.minOSVersion">
      <summary>
        <para>Minimum Tizen OS version that this application is compatible with.
        IMPORTANT: For example: if you choose Tizen 2.4 your application will only run on devices with Tizen 2.4 or later.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Tizen.productDescription">
      <summary>
        <para>Description of your project to be displayed in the Tizen Store.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Tizen.productURL">
      <summary>
        <para>URL of your project to be displayed in the Tizen Store.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Tizen.showActivityIndicatorOnLoading">
      <summary>
        <para>Set or Get the style of application loading indicator. The available styles are TizenShowActivityIndicatorOnLoading.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.Tizen.signingProfileName">
      <summary>
        <para>Name of the security profile to code sign Tizen applications with.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.TizenCapability">
      <summary>
        <para>Tizen application capabilities.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.AccountRead">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.AccountWrite">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.AlarmGet">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.AlarmSet">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.AppManagerLaunch">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.Bluetooth">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.CalendarRead">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.CalendarWrite">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.Call">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.CallHistoryRead">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.CallHistoryWrite">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.Camera">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.ContactRead">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.ContactWrite">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.ContentWrite">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.DataSharing">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.Display">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.Download">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.Email">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.ExternalStorage">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.ExternalStorageAppData">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.Haptic">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.Internet">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.KeyManager">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.LED">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.Location">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.MediaStorage">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.MessageRead">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.MessageWrite">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.NetworkGet">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.NetworkProfile">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.NetworkSet">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.NFC">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.NFCCardEmulation">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.Notification">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.PackageManagerInfo">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.Power">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.Push">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.Recorder">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.Shortcut">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.SystemSettings">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.Telephony">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.VolumeSet">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.WifiDirect">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.TizenCapability.WindowPrioritySet">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.tvOS">
      <summary>
        <para>tvOS specific player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.tvOS.buildNumber">
      <summary>
        <para>The build number of the bundle</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.tvOS.requireExtendedGameController">
      <summary>
        <para>Application requires extended game controller.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.tvOS.sdkVersion">
      <summary>
        <para>Active tvOS SDK version used for build.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.tvOS.targetOSVersion">
      <summary>
        <para>Deployment minimal version of tvOS.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.tvOS.targetOSVersionString">
      <summary>
        <para>Deployment minimal version of tvOS.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.VRCardboard">
      <summary>
        <para>Google Cardboard-specific Player Settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.VRCardboard.depthFormat">
      <summary>
        <para>Set the requested depth format for the Depth and Stencil Buffers. Options are 16bit Depth, 24bit Depth and 24bit Depth + 8bit Stencil.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.VRDaydream">
      <summary>
        <para>Google VR-specific Player Settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.VRDaydream.daydreamIcon">
      <summary>
        <para>Foreground image for the Daydream Launcher Home Screen.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.VRDaydream.daydreamIconBackground">
      <summary>
        <para>Background image for the Daydream Launcher Home Screen.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.VRDaydream.depthFormat">
      <summary>
        <para>Set the requested depth format for the Depth and Stencil Buffers. Options are 16bit Depth, 24bit Depth and 24bit Depth + 8bit Stencil.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.WebGL">
      <summary>
        <para>WebGL specific player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.WebGL.compressionFormat">
      <summary>
        <para>CompressionFormat defines the compression type that the WebGL resources are encoded to.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.WebGL.dataCaching">
      <summary>
        <para>Enables automatic caching of asset data.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.WebGL.debugSymbols">
      <summary>
        <para>Enables generation of debug symbols file in the build output directory.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.WebGL.exceptionSupport">
      <summary>
        <para>Exception support for WebGL builds.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.WebGL.memorySize">
      <summary>
        <para>Memory size for WebGL builds in MB.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.WebGL.nameFilesAsHashes">
      <summary>
        <para>Enables using MD5 hash of the uncompressed file contents as a filename for each file in the build.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.WebGL.template">
      <summary>
        <para>Path to the WebGL template asset.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.WSA">
      <summary>
        <para>Windows Store Apps specific player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.WSA.compilationOverrides">
      <summary>
        <para>Specify how to compile C# files when building to Windows Store Apps.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.WSA.enableIndependentInputSource">
      <summary>
        <para>Enable/Disable independent input source feature.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.WSA.enableLowLatencyPresentationAPI">
      <summary>
        <para>Enable/Disable low latency presentation API.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.WSA.inputSource">
      <summary>
        <para>Where Unity gets input from.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.WSA.Declarations">
      <summary>
        <para>Windows Store Apps declarations.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.WSA.Declarations.fileTypeAssociations">
      <summary>
        <para>Set information for file type associations.

For more information - https:msdn.microsoft.comlibrarywindowsappshh779671https:msdn.microsoft.comlibrarywindowsappshh779671.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.WSA.Declarations.protocolName">
      <summary>
        <para>
          Registers this application to be a default handler for specified URI scheme name.

          For example: if you specify myunitygame, your application can be run from other applications via the URI scheme myunitygame:. You can also test this using the Windows "Run" dialog box (invoked with Windows + R key).

          For more information https:msdn.microsoft.comlibrarywindowsappshh779670https:msdn.microsoft.comlibrarywindowsappshh779670.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.WSA.GetVisualAssetsImage(UnityEditor.PlayerSettings/WSAImageType,UnityEditor.PlayerSettings/WSAImageScale)">
      <summary>
        <para>Get path for image, that will be populated to the Visual Studio solution and the package manifest.</para>
      </summary>
      <param name="type"></param>
      <param name="scale"></param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.WSA.SetVisualAssetsImage(System.String,UnityEditor.PlayerSettings/WSAImageType,UnityEditor.PlayerSettings/WSAImageScale)">
      <summary>
        <para>Set path for image, that will be populated to the Visual Studio solution and the package manifest.</para>
      </summary>
      <param name="image"></param>
      <param name="type"></param>
      <param name="scale"></param>
    </member>
    <member name="T:UnityEditor.PlayerSettings.WSACompilationOverrides">
      <summary>
        <para>Compilation overrides for C# files.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.WSACompilationOverrides.None">
      <summary>
        <para>C# files are compiled using Mono compiler.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.WSACompilationOverrides.UseNetCore">
      <summary>
        <para>C# files are compiled using Microsoft compiler and .NET Core, you can use Windows Runtime API, but classes implemented in C# files aren't accessible from JS or Boo languages.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.WSACompilationOverrides.UseNetCorePartially">
      <summary>
        <para>C# files not located in Plugins, Standard Assets, Pro Standard Assets folders are compiled using Microsoft compiler and .NET Core, all other C# files are compiled using Mono compiler. The advantage is that classes implemented in C# are accessible from JS and Boo languages.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.WSAFileTypeAssociations">
      <summary>
        <para>Describes File Type Association declaration.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.WSAFileTypeAssociations.name">
      <summary>
        <para>Localizable string that will be displayed to the user as associated file handler.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.WSAFileTypeAssociations.supportedFileTypes">
      <summary>
        <para>Supported file types for this association.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.WSAImageScale">
      <summary>
        <para>Various image scales, supported by Windows Store Apps.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.WSAImageType">
      <summary>
        <para>Image types, supported by Windows Store Apps.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.WSAInputSource">
      <summary>
        <para>Where Unity takes input from (subscripbes to events).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.WSAInputSource.CoreWindow">
      <summary>
        <para>Subscribe to CoreWindow events.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.WSAInputSource.IndependentInputSource">
      <summary>
        <para>Create Independent Input Source and receive input from it.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.WSAInputSource.SwapChainPanel">
      <summary>
        <para>Subscribe to SwapChainPanel events.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings.WSASupportedFileType">
      <summary>
        <para>Describes supported file type for File Type Association declaration.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.WSASupportedFileType.contentType">
      <summary>
        <para>The 'Content Type' value for the file type's MIME content type. For example: 'image/jpeg'. Can also be left blank.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings.WSASupportedFileType.fileType">
      <summary>
        <para>File type extension. For ex., .myUnityGame</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PluginImporter">
      <summary>
        <para>Represents plugin importer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PluginImporter.isNativePlugin">
      <summary>
        <para>Is plugin native or managed? Note: C++ libraries with CLR support are treated as native plugins, because Unity cannot load such libraries. You can still access them via P/Invoke.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.ClearSettings">
      <summary>
        <para>Clear all plugin settings and set the compatability with Any Platform to true.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetAllImporters">
      <summary>
        <para>Returns all plugin importers for all platforms.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetCompatibleWithAnyPlatform">
      <summary>
        <para>Is plugin comptabile with any platform.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetCompatibleWithEditor">
      <summary>
        <para>Is plugin compatible with editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetCompatibleWithPlatform(UnityEditor.BuildTarget)">
      <summary>
        <para>Is plugin compatible with specified platform.</para>
      </summary>
      <param name="platform">Target platform.</param>
      <param name="platformName"></param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetCompatibleWithPlatform(System.String)">
      <summary>
        <para>Is plugin compatible with specified platform.</para>
      </summary>
      <param name="platform">Target platform.</param>
      <param name="platformName"></param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetEditorData(System.String)">
      <summary>
        <para>Returns editor specific data for specified key.</para>
      </summary>
      <param name="key">Key value for data.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetExcludeEditorFromAnyPlatform">
      <summary>
        <para>Is Editor excluded when Any Platform is set to true.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetExcludeFromAnyPlatform(System.String)">
      <summary>
        <para>Is platform excluded when Any Platform set to true.</para>
      </summary>
      <param name="platform">Target platform.</param>
      <param name="platformName"></param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetExcludeFromAnyPlatform(UnityEditor.BuildTarget)">
      <summary>
        <para>Is platform excluded when Any Platform set to true.</para>
      </summary>
      <param name="platform">Target platform.</param>
      <param name="platformName"></param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetImporters(UnityEditor.BuildTarget)">
      <summary>
        <para>Returns all plugin importers for specfied platform.</para>
      </summary>
      <param name="platform">Target platform.</param>
      <param name="platformName">Name of the target platform.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetImporters(System.String)">
      <summary>
        <para>Returns all plugin importers for specfied platform.</para>
      </summary>
      <param name="platform">Target platform.</param>
      <param name="platformName">Name of the target platform.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetIsOverridable">
      <summary>
        <para>Identifies whether or not this plugin will be overridden if a plugin of the same name is placed in your project folder.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetPlatformData(UnityEditor.BuildTarget,System.String)">
      <summary>
        <para>Get platform specific data.</para>
      </summary>
      <param name="platform">Target platform.</param>
      <param name="key">Key value for data.</param>
      <param name="platformName"></param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetPlatformData(System.String,System.String)">
      <summary>
        <para>Get platform specific data.</para>
      </summary>
      <param name="platform">Target platform.</param>
      <param name="key">Key value for data.</param>
      <param name="platformName"></param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetCompatibleWithAnyPlatform(System.Boolean)">
      <summary>
        <para>Set compatiblity with any platform.</para>
      </summary>
      <param name="enable">Is plugin compatible with any platform.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetCompatibleWithEditor(System.Boolean)">
      <summary>
        <para>Set compatiblity with any editor.</para>
      </summary>
      <param name="enable">Is plugin compatible with editor.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetCompatibleWithPlatform(UnityEditor.BuildTarget,System.Boolean)">
      <summary>
        <para>Set compatiblity with specified platform.</para>
      </summary>
      <param name="platform">Target platform.</param>
      <param name="enable">Is plugin compatible with specified platform.</param>
      <param name="platformName">Target platform.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetCompatibleWithPlatform(System.String,System.Boolean)">
      <summary>
        <para>Set compatiblity with specified platform.</para>
      </summary>
      <param name="platform">Target platform.</param>
      <param name="enable">Is plugin compatible with specified platform.</param>
      <param name="platformName">Target platform.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetEditorData(System.String,System.String)">
      <summary>
        <para>Set editor specific data.</para>
      </summary>
      <param name="key">Key value for data.</param>
      <param name="value">Data.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetExcludeEditorFromAnyPlatform(System.Boolean)">
      <summary>
        <para>Exclude Editor from compatible platforms when Any Platform is set to true.</para>
      </summary>
      <param name="excludedFromAny"></param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetExcludeFromAnyPlatform(System.String,System.Boolean)">
      <summary>
        <para>Exclude platform from compatible platforms when Any Platform is set to true.</para>
      </summary>
      <param name="platformName">Target platform.</param>
      <param name="excludedFromAny"></param>
      <param name="platform"></param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetExcludeFromAnyPlatform(UnityEditor.BuildTarget,System.Boolean)">
      <summary>
        <para>Exclude platform from compatible platforms when Any Platform is set to true.</para>
      </summary>
      <param name="platformName">Target platform.</param>
      <param name="excludedFromAny"></param>
      <param name="platform"></param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetPlatformData(UnityEditor.BuildTarget,System.String,System.String)">
      <summary>
        <para>Set platform specific data.</para>
      </summary>
      <param name="platform">Target platform.</param>
      <param name="key">Key value for data.</param>
      <param name="value">Data.</param>
      <param name="platformName"></param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetPlatformData(System.String,System.String,System.String)">
      <summary>
        <para>Set platform specific data.</para>
      </summary>
      <param name="platform">Target platform.</param>
      <param name="key">Key value for data.</param>
      <param name="value">Data.</param>
      <param name="platformName"></param>
    </member>
    <member name="M:UnityEditor.PluginImporter.ShouldIncludeInBuild">
      <summary>
        <para>Identifies whether or not this plugin should be included in the current build target.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PopupWindow">
      <summary>
        <para>Class used to display popup windows that inherit from PopupWindowContent.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PopupWindow.Show(UnityEngine.Rect,UnityEditor.PopupWindowContent)">
      <summary>
        <para>Show a popup with the given PopupWindowContent.</para>
      </summary>
      <param name="activatorRect">The rect of the button that opens the popup.</param>
      <param name="windowContent">The content to show in the popup window.</param>
    </member>
    <member name="T:UnityEditor.PopupWindowContent">
      <summary>
        <para>Class used to implement content for a popup window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PopupWindowContent.editorWindow">
      <summary>
        <para>The EditorWindow that contains the popup content.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PopupWindowContent.GetWindowSize">
      <summary>
        <para>The size of the popup window.</para>
      </summary>
      <returns>
        <para>The size of the Popup window.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PopupWindowContent.OnClose">
      <summary>
        <para>Callback when the popup window is closed.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PopupWindowContent.OnGUI(UnityEngine.Rect)">
      <summary>
        <para>Callback for drawing GUI controls for the popup window.</para>
      </summary>
      <param name="rect">The rectangle to draw the GUI inside.</param>
    </member>
    <member name="M:UnityEditor.PopupWindowContent.OnOpen">
      <summary>
        <para>Callback when the popup window is opened.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PrefabType">
      <summary>
        <para>The type of a prefab object as returned by PrefabUtility.GetPrefabType.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.DisconnectedModelPrefabInstance">
      <summary>
        <para>The object is an instance of an imported 3D model, but the connection is broken.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.DisconnectedPrefabInstance">
      <summary>
        <para>The object is an instance of a user created prefab, but the connection is broken.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.MissingPrefabInstance">
      <summary>
        <para>The object was an instance of a prefab, but the original prefab could not be found.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.ModelPrefab">
      <summary>
        <para>The object is an imported 3D model asset.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.ModelPrefabInstance">
      <summary>
        <para>The object is an instance of an imported 3D model.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.None">
      <summary>
        <para>The object is not a prefab nor an instance of a prefab.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.Prefab">
      <summary>
        <para>The object is a user created prefab asset.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.PrefabInstance">
      <summary>
        <para>The object is an instance of a user created prefab.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PrefabUtility">
      <summary>
        <para>Utility class for any prefab related operations.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabUtility.prefabInstanceUpdated">
      <summary>
        <para>Called after prefab instances in the scene have been updated.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.ConnectGameObjectToPrefab(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>Connects the source prefab to the game object.</para>
      </summary>
      <param name="go"></param>
      <param name="sourcePrefab"></param>
    </member>
    <member name="M:UnityEditor.PrefabUtility.CreateEmptyPrefab(System.String)">
      <summary>
        <para>Creates an empty prefab at given path.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEditor.PrefabUtility.CreatePrefab(System.String,UnityEngine.GameObject)">
      <summary>
        <para>Creates a prefab from a game object hierarchy.</para>
      </summary>
      <param name="path"></param>
      <param name="go"></param>
      <param name="options"></param>
    </member>
    <member name="M:UnityEditor.PrefabUtility.CreatePrefab(System.String,UnityEngine.GameObject,UnityEditor.ReplacePrefabOptions)">
      <summary>
        <para>Creates a prefab from a game object hierarchy.</para>
      </summary>
      <param name="path"></param>
      <param name="go"></param>
      <param name="options"></param>
    </member>
    <member name="M:UnityEditor.PrefabUtility.DisconnectPrefabInstance(UnityEngine.Object)">
      <summary>
        <para>Disconnects the prefab instance from its parent prefab.</para>
      </summary>
      <param name="targetObject"></param>
    </member>
    <member name="M:UnityEditor.PrefabUtility.FindPrefabRoot(UnityEngine.GameObject)">
      <summary>
        <para>Helper function to find the prefab root of an object (used for picking niceness).</para>
      </summary>
      <param name="source">The object to check.</param>
      <returns>
        <para>The prefab root.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PrefabUtility.FindRootGameObjectWithSameParentPrefab(UnityEngine.GameObject)">
      <summary>
        <para>Returns the topmost game object that has the same prefab parent as target.</para>
      </summary>
      <param name="destinationScene">Scene to instantiate the prefab in.</param>
      <param name="target"></param>
      <returns>
        <para>The GameObject at the root of the prefab.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PrefabUtility.FindValidUploadPrefabInstanceRoot(UnityEngine.GameObject)">
      <summary>
        <para>Returns root game object of the prefab instance if that root prefab instance is a parent of the prefab.</para>
      </summary>
      <param name="target">GameObject to process.</param>
      <returns>
        <para>Return the root game object of the prefab asset.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PrefabUtility.GetPrefabObject(UnityEngine.Object)">
      <summary>
        <para>Retrieves the enclosing prefab for any object contained within.</para>
      </summary>
      <param name="targetObject">An object contained within a prefab object.</param>
      <returns>
        <para>The prefab the object is contained in.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PrefabUtility.GetPrefabParent(UnityEngine.Object)">
      <summary>
        <para>Returns the parent asset object of source, or null if it can't be found.</para>
      </summary>
      <param name="source"></param>
    </member>
    <member name="M:UnityEditor.PrefabUtility.GetPrefabType(UnityEngine.Object)">
      <summary>
        <para>Given an object, returns its prefab type (None, if it's not a prefab).</para>
      </summary>
      <param name="target"></param>
    </member>
    <member name="M:UnityEditor.PrefabUtility.GetPropertyModifications(UnityEngine.Object)">
      <summary>
        <para>Extract all modifications that are applied to the prefab instance compared to the parent prefab.</para>
      </summary>
      <param name="targetPrefab"></param>
    </member>
    <member name="M:UnityEditor.PrefabUtility.InstantiateAttachedAsset(UnityEngine.Object)">
      <summary>
        <para>Instantiate an asset that is referenced by a prefab and use it on the prefab instance.</para>
      </summary>
      <param name="targetObject"></param>
    </member>
    <member name="M:UnityEditor.PrefabUtility.InstantiatePrefab(UnityEngine.Object)">
      <summary>
        <para>Instantiates the given prefab in a given scene.</para>
      </summary>
      <param name="target">Prefab asset to instantiate.</param>
      <param name="destinationScene">Scene to instantiate the prefab in.</param>
      <returns>
        <para>The GameObject at the root of the prefab.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PrefabUtility.InstantiatePrefab(UnityEngine.Object,UnityEngine.SceneManagement.Scene)">
      <summary>
        <para>Instantiates the given prefab in a given scene.</para>
      </summary>
      <param name="target">Prefab asset to instantiate.</param>
      <param name="destinationScene">Scene to instantiate the prefab in.</param>
      <returns>
        <para>The GameObject at the root of the prefab.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PrefabUtility.MergeAllPrefabInstances(UnityEngine.Object)">
      <summary>
        <para>Force re-merging all prefab instances of this prefab.</para>
      </summary>
      <param name="targetObject"></param>
    </member>
    <member name="T:UnityEditor.PrefabUtility.PrefabInstanceUpdated">
      <summary>
        <para>Delegate for method that is called after prefab instances in the scene have been updated.</para>
      </summary>
      <param name="instance"></param>
    </member>
    <member name="M:UnityEditor.PrefabUtility.ReconnectToLastPrefab(UnityEngine.GameObject)">
      <summary>
        <para>Connects the game object to the prefab that it was last connected to.</para>
      </summary>
      <param name="go"></param>
    </member>
    <member name="M:UnityEditor.PrefabUtility.RecordPrefabInstancePropertyModifications(UnityEngine.Object)">
      <summary>
        <para>Causes modifications made to the Prefab instance to be recorded.</para>
      </summary>
      <param name="targetObject">Object to process.</param>
    </member>
    <member name="M:UnityEditor.PrefabUtility.ReplacePrefab(UnityEngine.GameObject,UnityEngine.Object)">
      <summary>
        <para>Replaces the targetPrefab with a copy of the game object hierarchy go.</para>
      </summary>
      <param name="go"></param>
      <param name="targetPrefab"></param>
      <param name="options"></param>
    </member>
    <member name="M:UnityEditor.PrefabUtility.ReplacePrefab(UnityEngine.GameObject,UnityEngine.Object,UnityEditor.ReplacePrefabOptions)">
      <summary>
        <para>Replaces the targetPrefab with a copy of the game object hierarchy go.</para>
      </summary>
      <param name="go"></param>
      <param name="targetPrefab"></param>
      <param name="options"></param>
    </member>
    <member name="M:UnityEditor.PrefabUtility.ResetToPrefabState(UnityEngine.Object)">
      <summary>
        <para>Resets the properties of the component or game object to the parent prefab state.</para>
      </summary>
      <param name="obj"></param>
    </member>
    <member name="M:UnityEditor.PrefabUtility.RevertPrefabInstance(UnityEngine.GameObject)">
      <summary>
        <para>Resets the properties of all objects in the prefab, including child game objects and components that were added to the prefab instance.</para>
      </summary>
      <param name="go"></param>
    </member>
    <member name="M:UnityEditor.PrefabUtility.SetPropertyModifications(UnityEngine.Object,UnityEditor.PropertyModification[])">
      <summary>
        <para>Assigns all modifications that are applied to the prefab instance compared to the parent prefab.</para>
      </summary>
      <param name="targetPrefab"></param>
      <param name="modifications"></param>
    </member>
    <member name="T:UnityEditor.PreferenceItem">
      <summary>
        <para>The PreferenceItem attribute allows you to add preferences sections to the Preferences Window.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PreferenceItem.#ctor(System.String)">
      <summary>
        <para>Creates a section in the Preferences Window called name and invokes the static function following it for the section's GUI.</para>
      </summary>
      <param name="name"></param>
    </member>
    <member name="T:UnityEditor.PropertyDrawer">
      <summary>
        <para>Base class to derive custom property drawers from. Use this to create custom drawers for your own Serializable classes or for script variables with custom PropertyAttributes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PropertyDrawer.attribute">
      <summary>
        <para>The PropertyAttribute for the property. Not applicable for custom class drawers. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PropertyDrawer.fieldInfo">
      <summary>
        <para>The reflection FieldInfo for the member this property represents. (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PropertyDrawer.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Override this method to specify how tall the GUI for this field is in pixels.</para>
      </summary>
      <param name="property">The SerializedProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
      <returns>
        <para>The height in pixels.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Override this method to make your own GUI for the property.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the property GUI.</param>
      <param name="property">The SerializedProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
    </member>
    <member name="T:UnityEditor.PropertyModification">
      <summary>
        <para>Defines a single modified property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PropertyModification.objectReference">
      <summary>
        <para>The value being applied when it is a object reference (which can not be represented as a string).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PropertyModification.propertyPath">
      <summary>
        <para>Property path of the property being modified (Matches as SerializedProperty.propertyPath).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PropertyModification.target">
      <summary>
        <para>Object that will be modified.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PropertyModification.value">
      <summary>
        <para>The value being applied.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PS4BuildSubtarget">
      <summary>
        <para>Type of build to generate.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PS4BuildSubtarget.Package">
      <summary>
        <para>Package build for installation on either a dev or test kit.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PS4BuildSubtarget.PCHosted">
      <summary>
        <para>Build hosted on a PC, for file serving to a dev or test kit.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PSP2BuildSubtarget">
      <summary>
        <para>Target PS Vita build type.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PSP2BuildSubtarget.Package">
      <summary>
        <para>For building a PS Vita package that can be installed on a PS Vita memory card.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PSP2BuildSubtarget.PCHosted">
      <summary>
        <para>For general development, creates a build stored on the host PC which the Vita reads from.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Purchasing.PurchasingSettings">
      <summary>
        <para>Editor API for the Unity Services editor feature. Normally Purchasing is enabled from the Services window, but if writing your own editor extension, this API can be used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Purchasing.PurchasingSettings.enabled">
      <summary>
        <para>This Boolean field will cause the Purchasing feature in Unity to be enabled if true, or disabled if false.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.RemoveAssetOptions">
      <summary>
        <para>Options for removing assets</para>
      </summary>
    </member>
    <member name="F:UnityEditor.RemoveAssetOptions.DeleteAssets">
      <summary>
        <para>Delete the asset without moving it to the trash.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.RemoveAssetOptions.MoveAssetToTrash">
      <summary>
        <para>The asset should be moved to trash.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Rendering.AlbedoSwatchInfo">
      <summary>
        <para>Contains the custom albedo swatch data.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.AlbedoSwatchInfo.color">
      <summary>
        <para>Color of the albedo swatch that is shown in the physically based rendering validator user interface.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.AlbedoSwatchInfo.maxLuminance">
      <summary>
        <para>The maximum luminance value used to validate the albedo for the physically based rendering albedo validator.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.AlbedoSwatchInfo.minLuminance">
      <summary>
        <para>The minimum luminance value used to validate the albedo for the physically based rendering albedo validator.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.AlbedoSwatchInfo.name">
      <summary>
        <para>Name of the albedo swatch to show in the physically based renderer validator user interface.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Rendering.EditorGraphicsSettings">
      <summary>
        <para>Editor-specific script interface for.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Rendering.EditorGraphicsSettings.albedoSwatches">
      <summary>
        <para>Will return an array of Rendering.AlbedoSwatchInfo.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Rendering.EditorGraphicsSettings.GetShaderSettingsForPlatform(UnityEditor.BuildTargetGroup,UnityEngine.Rendering.ShaderHardwareTier)">
      <summary>
        <para>Will return PlatformShaderSettings for given platform and shader hardware tier.</para>
      </summary>
      <param name="target"></param>
      <param name="tier"></param>
    </member>
    <member name="M:UnityEditor.Rendering.EditorGraphicsSettings.GetTierSettings(UnityEditor.BuildTargetGroup,UnityEngine.Rendering.ShaderHardwareTier)">
      <summary>
        <para>Will return TierSettings for given platform and shader hardware tier.</para>
      </summary>
      <param name="target"></param>
      <param name="tier"></param>
    </member>
    <member name="M:UnityEditor.Rendering.EditorGraphicsSettings.SetShaderSettingsForPlatform(UnityEditor.BuildTargetGroup,UnityEngine.Rendering.ShaderHardwareTier,UnityEditor.Rendering.PlatformShaderSettings)">
      <summary>
        <para>Allows you to set the PlatformShaderSettings for the specified platform and shader hardware tier.</para>
      </summary>
      <param name="target"></param>
      <param name="tier"></param>
      <param name="settings"></param>
    </member>
    <member name="M:UnityEditor.Rendering.EditorGraphicsSettings.SetTierSettings(UnityEditor.BuildTargetGroup,UnityEngine.Rendering.ShaderHardwareTier,UnityEditor.Rendering.TierSettings)">
      <summary>
        <para>Allows you to set the PlatformShaderSettings for the specified platform and shader hardware tier.</para>
      </summary>
      <param name="target"></param>
      <param name="tier"></param>
      <param name="settings"></param>
    </member>
    <member name="T:UnityEditor.Rendering.PlatformShaderSettings">
      <summary>
        <para>Used to set up shader settings, per-platform and per-shader-hardware-tier.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.PlatformShaderSettings.cascadedShadowMaps">
      <summary>
        <para>Allows you to specify whether cascaded shadow maps should be used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.PlatformShaderSettings.reflectionProbeBlending">
      <summary>
        <para>Allows you to specify whether Reflection Probes Blending should be enabled.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.PlatformShaderSettings.reflectionProbeBoxProjection">
      <summary>
        <para>Allows you to specify whether Reflection Probes Box Projection should be used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.PlatformShaderSettings.standardShaderQuality">
      <summary>
        <para>Allows you to select Standard Shader Quality.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Rendering.ShaderQuality">
      <summary>
        <para>Shader quality preset.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.ShaderQuality.High">
      <summary>
        <para>High quality shader preset.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.ShaderQuality.Low">
      <summary>
        <para>Low quality shader preset.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.ShaderQuality.Medium">
      <summary>
        <para>Medium quality shader preset.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Rendering.TierSettings">
      <summary>
        <para>Used to set up per-platorm per-shader-hardware-tier graphics settings.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.TierSettings.cascadedShadowMaps">
      <summary>
        <para>Allows you to specify whether cascaded shadow maps should be used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.TierSettings.detailNormalMap">
      <summary>
        <para>Allows you to specify whether Detail Normal Map should be sampled if assigned.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.TierSettings.enableLPPV">
      <summary>
        <para>Allows you to specify whether Light Probe Proxy Volume should be used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.TierSettings.hdr">
      <summary>
        <para>Setting this field to true enables HDR rendering for this tier. Setting it to false disables HDR rendering for this tier.
See Also:</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.TierSettings.hdrMode">
      <summary>
        <para>The CameraHDRMode to use for this tier.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.TierSettings.realtimeGICPUUsage">
      <summary>
        <para>The RealtimeGICPUUsage to use for this tier.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.TierSettings.reflectionProbeBlending">
      <summary>
        <para>Allows you to specify whether Reflection Probes Blending should be enabled.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.TierSettings.reflectionProbeBoxProjection">
      <summary>
        <para>Allows you to specify whether Reflection Probes Box Projection should be used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.TierSettings.renderingPath">
      <summary>
        <para>The rendering path that should be used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.TierSettings.semitransparentShadows">
      <summary>
        <para>Allows you to specify whether Semitransparent Shadows should be enabled.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Rendering.TierSettings.standardShaderQuality">
      <summary>
        <para>Allows you to select Standard Shader Quality.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ReplacePrefabOptions">
      <summary>
        <para>Flags for the PrefabUtility.ReplacePrefab function.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ReplacePrefabOptions.ConnectToPrefab">
      <summary>
        <para>Connects the passed objects to the prefab after uploading the prefab.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ReplacePrefabOptions.Default">
      <summary>
        <para>Replaces prefabs by matching pre-existing connections to the prefab.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ReplacePrefabOptions.ReplaceNameBased">
      <summary>
        <para>Replaces the prefab using name based lookup in the transform hierarchy.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ResolutionDialogSetting">
      <summary>
        <para>Resolution dialog setting.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ResolutionDialogSetting.Disabled">
      <summary>
        <para>Never show the resolution dialog.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ResolutionDialogSetting.Enabled">
      <summary>
        <para>Show the resolution dialog on first launch.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ResolutionDialogSetting.HiddenByDefault">
      <summary>
        <para>Hide the resolution dialog on first launch.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SceneAsset">
      <summary>
        <para>SceneAsset is used to reference scene objects in the Editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SceneAsset.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SceneManagement.EditorSceneManager">
      <summary>
        <para>Scene management in the Editor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SceneManagement.EditorSceneManager.loadedSceneCount">
      <summary>
        <para>The number of loaded Scenes.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.SceneManagement.EditorSceneManager.newSceneCreated(UnityEditor.SceneManagement.EditorSceneManager/NewSceneCreatedCallback)">
      <summary>
        <para>This event is called after a new Scene has been created.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="P:UnityEditor.SceneManagement.EditorSceneManager.preventCrossSceneReferences">
      <summary>
        <para>Controls whether cross-Scene references are allowed in the Editor.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.SceneManagement.EditorSceneManager.sceneClosed(UnityEditor.SceneManagement.EditorSceneManager/SceneClosedCallback)">
      <summary>
        <para>This event is called after a Scene has been closed in the editor.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEditor.SceneManagement.EditorSceneManager.sceneClosing(UnityEditor.SceneManagement.EditorSceneManager/SceneClosingCallback)">
      <summary>
        <para>This event is called before closing an open Scene after you have requested that the Scene is closed.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEditor.SceneManagement.EditorSceneManager.sceneOpened(UnityEditor.SceneManagement.EditorSceneManager/SceneOpenedCallback)">
      <summary>
        <para>This event is called after a Scene has been opened in the editor.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEditor.SceneManagement.EditorSceneManager.sceneOpening(UnityEditor.SceneManagement.EditorSceneManager/SceneOpeningCallback)">
      <summary>
        <para>This event is called before opening an existing Scene.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEditor.SceneManagement.EditorSceneManager.sceneSaved(UnityEditor.SceneManagement.EditorSceneManager/SceneSavedCallback)">
      <summary>
        <para>This event is called after a Scene has been saved.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEditor.SceneManagement.EditorSceneManager.sceneSaving(UnityEditor.SceneManagement.EditorSceneManager/SceneSavingCallback)">
      <summary>
        <para>This event is called before a Scene is saved disk after you have requested the Scene to be saved.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.CloseScene(UnityEngine.SceneManagement.Scene,System.Boolean)">
      <summary>
        <para>Close the Scene. If removeScene flag is true, the closed Scene will also be removed from EditorSceneManager.</para>
      </summary>
      <param name="scene">The Scene to be closed/removed.</param>
      <param name="removeScene">Bool flag to indicate if the Scene should be removed after closing.</param>
      <returns>
        <para>Returns true if the Scene is closed/removed.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.DetectCrossSceneReferences(UnityEngine.SceneManagement.Scene)">
      <summary>
        <para>Detects cross-scene references in a Scene.</para>
      </summary>
      <param name="scene">Scene to check for cross-scene references.</param>
      <returns>
        <para>Was any cross-scene references found.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.EnsureUntitledSceneHasBeenSaved(System.String)">
      <summary>
        <para>Shows a save dialog if an Untitled scene exists in the current scene manager setup.</para>
      </summary>
      <param name="dialogContent">Text shown in the save dialog.</param>
      <returns>
        <para>True if the scene is saved or if there is no Untitled scene.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.GetSceneManagerSetup">
      <summary>
        <para>Returns the current setup of the SceneManager.</para>
      </summary>
      <returns>
        <para>An array of SceneSetup classes - one item for each Scene.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.MarkAllScenesDirty">
      <summary>
        <para>Mark all the loaded Scenes as modified.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.MarkSceneDirty(UnityEngine.SceneManagement.Scene)">
      <summary>
        <para>Mark the specified Scene as modified.</para>
      </summary>
      <param name="scene">The Scene to be marked as modified.</param>
      <returns>
        <para>Whether the Scene was successfully marked as dirty.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.MoveSceneAfter(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.Scene)">
      <summary>
        <para>Allows you to reorder the Scenes currently open in the Hierarchy window. Moves the source Scene so it comes after the destination Scene.</para>
      </summary>
      <param name="src">The Scene to move.</param>
      <param name="dst">The Scene which should come directly before the source Scene in the hierarchy.</param>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.MoveSceneBefore(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.Scene)">
      <summary>
        <para>Allows you to reorder the Scenes currently open in the Hierarchy window. Moves the source Scene so it comes before the destination Scene.</para>
      </summary>
      <param name="src">The Scene to move.</param>
      <param name="dst">The Scene which should come directly after the source Scene in the hierarchy.</param>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.NewScene(UnityEditor.SceneManagement.NewSceneSetup,UnityEditor.SceneManagement.NewSceneMode)">
      <summary>
        <para>Create a new Scene.</para>
      </summary>
      <param name="setup">Whether the new Scene should use the default set of GameObjects.</param>
      <param name="mode">Whether to keep existing Scenes open.</param>
      <returns>
        <para>A reference to the new Scene.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.SceneManagement.EditorSceneManager.NewSceneCreatedCallback">
      <summary>
        <para>Callbacks of this type which have been added to the newSceneCreated event are called after a new Scene has been created.</para>
      </summary>
      <param name="scene">The Scene that was created.</param>
      <param name="setup">The setup mode used when creating the Scene.</param>
      <param name="mode">The mode used for creating the Scene.</param>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.OpenScene(System.String,UnityEditor.SceneManagement.OpenSceneMode)">
      <summary>
        <para>Open a Scene in the Editor.</para>
      </summary>
      <param name="scenePath">The path of the Scene. This should be relative to the Project folder; for example, "AssetsMyScenesMyScene.unity".</param>
      <param name="mode">Allows you to select how to open the specified Scene, and whether to keep existing Scenes in the Hierarchy. See SceneManagement.OpenSceneMode for more information about the options.</param>
      <returns>
        <para>A reference to the opened Scene.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.RestoreSceneManagerSetup(UnityEditor.SceneManagement.SceneSetup[])">
      <summary>
        <para>Restore the setup of the SceneManager.</para>
      </summary>
      <param name="value">In this array, at least one Scene should be loaded, and there must be one active Scene.</param>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo">
      <summary>
        <para>Asks you if you want to save the modified Scene or Scenes.</para>
      </summary>
      <returns>
        <para>This returns true if you chose to save the Scene or Scenes, and returns false if you pressed Cancel.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.SaveModifiedScenesIfUserWantsTo(UnityEngine.SceneManagement.Scene[])">
      <summary>
        <para>Asks whether the modfied input Scenes should be saved.</para>
      </summary>
      <param name="scenes">Scenes that should be saved if they are modified.</param>
      <returns>
        <para>Your choice of whether to save or not save the Scenes.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.SaveOpenScenes">
      <summary>
        <para>Save all open Scenes.</para>
      </summary>
      <returns>
        <para>Returns true if all open Scenes are successfully saved.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.SaveScene(UnityEngine.SceneManagement.Scene,System.String,System.Boolean)">
      <summary>
        <para>Save a Scene.</para>
      </summary>
      <param name="scene">The Scene to be saved.</param>
      <param name="dstScenePath">The file path to save the Scene to. If the path is empty, the current open Scene is overwritten. If it has not yet been saved at all, a save dialog is shown.</param>
      <param name="saveAsCopy">If set to true, the Scene is saved without changing the current Scene, and without clearing the unsaved changes marker.</param>
      <returns>
        <para>True if the save succeeded, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.SceneManagement.EditorSceneManager.SaveScenes(UnityEngine.SceneManagement.Scene[])">
      <summary>
        <para>Save a list of Scenes.</para>
      </summary>
      <param name="scenes">List of Scenes that should be saved.</param>
      <returns>
        <para>True if the save succeeded. Otherwise false.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.SceneManagement.EditorSceneManager.SceneClosedCallback">
      <summary>
        <para>Callbacks of this type which have been added to the sceneClosed event are called immediately after the Scene has been closed.</para>
      </summary>
      <param name="scene">The Scene that was closed.</param>
    </member>
    <member name="T:UnityEditor.SceneManagement.EditorSceneManager.SceneClosingCallback">
      <summary>
        <para>Callbacks of this type which have been added to the sceneClosing event are called just before a Scene is closed.</para>
      </summary>
      <param name="scene">The Scene that is going to be closed.</param>
      <param name="removingScene">Whether or not the Scene is also going to be removed from the Scene Manager after closing. If true the Scene is removed after closing.</param>
    </member>
    <member name="T:UnityEditor.SceneManagement.EditorSceneManager.SceneOpenedCallback">
      <summary>
        <para>Callbacks of this type which have been added to the sceneOpened event are called after a Scene has been opened.</para>
      </summary>
      <param name="scene">The Scene that was opened.</param>
      <param name="mode">The mode used to open the Scene.</param>
    </member>
    <member name="T:UnityEditor.SceneManagement.EditorSceneManager.SceneOpeningCallback">
      <summary>
        <para>Callbacks of this type which have been added to the sceneOpening event are called just before opening a Scene.</para>
      </summary>
      <param name="path">Path of the Scene to be opened. This is relative to the Project path.</param>
      <param name="mode">Mode that is used when opening the Scene.</param>
    </member>
    <member name="T:UnityEditor.SceneManagement.EditorSceneManager.SceneSavedCallback">
      <summary>
        <para>Callbacks of this type which have been added to the sceneSaved event are called after a Scene has been saved.</para>
      </summary>
      <param name="scene">The Scene that was saved.</param>
    </member>
    <member name="T:UnityEditor.SceneManagement.EditorSceneManager.SceneSavingCallback">
      <summary>
        <para>Callbacks of this type which have been added to the sceneSaving event are called just before the Scene is saved.</para>
      </summary>
      <param name="scene">The Scene to be saved.</param>
      <param name="path">The path to which the Scene is saved.</param>
    </member>
    <member name="T:UnityEditor.SceneManagement.NewSceneMode">
      <summary>
        <para>Used when creating a new scene in the Editor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SceneManagement.NewSceneMode.Additive">
      <summary>
        <para>The newly created scene is added to the current open scenes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SceneManagement.NewSceneMode.Single">
      <summary>
        <para>All current open scenes are closed and the newly created scene are opened.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SceneManagement.NewSceneSetup">
      <summary>
        <para>Used when creating a new scene in the Editor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SceneManagement.NewSceneSetup.DefaultGameObjects">
      <summary>
        <para>Adds default game objects to the new scene (a light and camera).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SceneManagement.NewSceneSetup.EmptyScene">
      <summary>
        <para>No game objects are added to the new scene.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SceneManagement.OpenSceneMode">
      <summary>
        <para>Used when opening a scene in the Editor to specify how a scene should be opened.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SceneManagement.OpenSceneMode.Additive">
      <summary>
        <para>Adds a scene to the current open scenes and loads it.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SceneManagement.OpenSceneMode.AdditiveWithoutLoading">
      <summary>
        <para>Adds a scene to the current open scenes without loading it. It will show up as 'unloaded' in the Hierarchy Window.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SceneManagement.OpenSceneMode.Single">
      <summary>
        <para>Closes all current open scenes and loads a scene.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SceneManagement.SceneSetup">
      <summary>
        <para>The setup information for a scene in the SceneManager.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SceneManagement.SceneSetup.isActive">
      <summary>
        <para>If the scene is active.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SceneManagement.SceneSetup.isLoaded">
      <summary>
        <para>If the scene is loaded.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SceneManagement.SceneSetup.path">
      <summary>
        <para>Path of the scene. Should be relative to the project folder. Like: "AssetsMyScenesMyScene.unity".</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ScriptableWizard">
      <summary>
        <para>Derive from this class to create an editor wizard.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ScriptableWizard.createButtonName">
      <summary>
        <para>Allows you to set the text shown on the create button of the wizard.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ScriptableWizard.errorString">
      <summary>
        <para>Allows you to set the error text of the wizard.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ScriptableWizard.helpString">
      <summary>
        <para>Allows you to set the help text of the wizard.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ScriptableWizard.isValid">
      <summary>
        <para>Allows you to enable and disable the wizard create button, so that the user can not click it.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ScriptableWizard.otherButtonName">
      <summary>
        <para>Allows you to set the text shown on the optional other button of the wizard. Leave this parameter out to leave the button out.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard(System.String)">
      <summary>
        <para>Creates a wizard.</para>
      </summary>
      <param name="title">The title shown at the top of the wizard window.</param>
      <returns>
        <para>The wizard.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard(System.String,System.String)">
      <summary>
        <para>Creates a wizard.</para>
      </summary>
      <param name="title">The title shown at the top of the wizard window.</param>
      <param name="createButtonName">The text shown on the create button.</param>
      <param name="otherButtonName">The text shown on the optional other button. Leave this parameter out to leave the button out.</param>
      <returns>
        <para>The wizard.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard(System.String,System.String,System.String)">
      <summary>
        <para>Creates a wizard.</para>
      </summary>
      <param name="title">The title shown at the top of the wizard window.</param>
      <param name="createButtonName">The text shown on the create button.</param>
      <param name="otherButtonName">The text shown on the optional other button. Leave this parameter out to leave the button out.</param>
      <returns>
        <para>The wizard.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard(System.String,System.Type,System.String,System.String)">
      <summary>
        <para>Creates a wizard.</para>
      </summary>
      <param name="title">The title shown at the top of the wizard window.</param>
      <param name="klass">The class implementing the wizard. It has to derive from ScriptableWizard.</param>
      <param name="createButtonName">The text shown on the create button.</param>
      <param name="otherButtonName">The text shown on the optional other button. Leave this parameter out to leave the button out.</param>
      <returns>
        <para>The wizard.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DrawWizardGUI">
      <summary>
        <para>Will be called for drawing contents when the ScriptableWizard needs to update its GUI.</para>
      </summary>
      <returns>
        <para>Returns true if any property has been modified.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.ScriptCallOptimizationLevel">
      <summary>
        <para>Script call optimization level.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ScriptCallOptimizationLevel.FastButNoExceptions">
      <summary>
        <para>Script method call overhead decreased at the expense of limited compatibility.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ScriptCallOptimizationLevel.SlowAndSafe">
      <summary>
        <para>Default setting.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ScriptCompiler">
      <summary>
        <para>Represents different C# compilers that can be used to compile C# scripts.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ScriptCompiler.Mono">
      <summary>
        <para>Mono C# Compiler.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ScriptCompiler.Roslyn">
      <summary>
        <para>Roslyn C# Compiler.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ScriptingImplementation">
      <summary>
        <para>Scripting implementation (backend).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ScriptingImplementation.IL2CPP">
      <summary>
        <para>Unity's .NET runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ScriptingImplementation.Mono2x">
      <summary>
        <para>The standard Mono 2.6 runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ScriptingImplementation.WinRTDotNET">
      <summary>
        <para>Microsoft's .NET runtime.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Selection">
      <summary>
        <para>Access to the selection in the editor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.activeContext">
      <summary>
        <para>Returns the current context object, as was set via SetActiveObjectWithContext.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.activeGameObject">
      <summary>
        <para>Returns the active game object. (The one shown in the inspector).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.activeInstanceID">
      <summary>
        <para>Returns the instanceID of the actual object selection. Includes prefabs, non-modifyable objects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.activeObject">
      <summary>
        <para>Returns the actual object selection. Includes prefabs, non-modifyable objects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.activeTransform">
      <summary>
        <para>Returns the active transform. (The one shown in the inspector).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.assetGUIDs">
      <summary>
        <para>Returns the guids of the selected assets.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.gameObjects">
      <summary>
        <para>Returns the actual game object selection. Includes prefabs, non-modifyable objects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.instanceIDs">
      <summary>
        <para>The actual unfiltered selection from the Scene returned as instance ids instead of objects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.objects">
      <summary>
        <para>The actual unfiltered selection from the Scene.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Selection.selectionChanged">
      <summary>
        <para>Delegate callback triggered when currently active/selected item has changed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.transforms">
      <summary>
        <para>Returns the top level selection, excluding prefabs.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Selection.Contains(System.Int32)">
      <summary>
        <para>Returns whether an object is contained in the current selection.</para>
      </summary>
      <param name="instanceID"></param>
      <param name="obj"></param>
    </member>
    <member name="M:UnityEditor.Selection.Contains(UnityEngine.Object)">
      <summary>
        <para>Returns whether an object is contained in the current selection.</para>
      </summary>
      <param name="instanceID"></param>
      <param name="obj"></param>
    </member>
    <member name="M:UnityEditor.Selection.GetFiltered(System.Type,UnityEditor.SelectionMode)">
      <summary>
        <para>Returns the current selection filtered by type and mode.</para>
      </summary>
      <param name="type">Only objects of this type will be retrieved.</param>
      <param name="mode">Further options to refine the selection.</param>
    </member>
    <member name="M:UnityEditor.Selection.GetTransforms(UnityEditor.SelectionMode)">
      <summary>
        <para>Allows for fine grained control of the selection type using the SelectionMode bitmask.</para>
      </summary>
      <param name="mode">Options for refining the selection.</param>
    </member>
    <member name="M:UnityEditor.Selection.SetActiveObjectWithContext(UnityEngine.Object,UnityEngine.Object)">
      <summary>
        <para>Selects an object with a context.</para>
      </summary>
      <param name="obj">Object being selected (will be equal activeObject).</param>
      <param name="context">Context object.</param>
    </member>
    <member name="T:UnityEditor.SelectionMode">
      <summary>
        <para>SelectionMode can be used to tweak the selection returned by Selection.GetTransforms.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.Assets">
      <summary>
        <para>Only return objects that are assets in the Asset directory.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.Deep">
      <summary>
        <para>Return the selection and all child transforms of the selection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.DeepAssets">
      <summary>
        <para>If the selection contains folders, also include all assets and subfolders within that folder in the file hierarchy.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.Editable">
      <summary>
        <para>Excludes any objects which shall not be modified.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.ExcludePrefab">
      <summary>
        <para>Excludes any prefabs from the selection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.TopLevel">
      <summary>
        <para>Only return the topmost selected transform. A selected child of another selected transform will be filtered out.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.Unfiltered">
      <summary>
        <para>Return the whole selection.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SemanticMergeMode">
      <summary>
        <para>Behavior of semantic merge.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SemanticMergeMode.Off">
      <summary>
        <para>Disable use of semantic merging.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SerializedObject">
      <summary>
        <para>SerializedObject and SerializedProperty are classes for editing properties on objects in a completely generic way that automatically handles undo and styling UI for prefabs.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedObject.context">
      <summary>
        <para>The context used to store and resolve ExposedReference types. This is set by the SerializedObject constructor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedObject.isEditingMultipleObjects">
      <summary>
        <para>Does the serialized object represents multiple objects due to multi-object editing? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedObject.maxArraySizeForMultiEditing">
      <summary>
        <para>Defines the maximum size beyond which arrays cannot be edited when multiple objects are selected.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedObject.targetObject">
      <summary>
        <para>The inspected object (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedObject.targetObjects">
      <summary>
        <para>The inspected objects (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.ApplyModifiedProperties">
      <summary>
        <para>Apply property modifications.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.ApplyModifiedPropertiesWithoutUndo">
      <summary>
        <para>Applies property modifications without registering an undo operation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.CopyFromSerializedProperty(UnityEditor.SerializedProperty)">
      <summary>
        <para>Copies a value from a SerializedProperty to the same serialized property on this serialized object.</para>
      </summary>
      <param name="prop"></param>
    </member>
    <member name="M:UnityEditor.SerializedObject.#ctor(UnityEngine.Object)">
      <summary>
        <para>Create SerializedObject for inspected object.</para>
      </summary>
      <param name="obj"></param>
    </member>
    <member name="M:UnityEditor.SerializedObject.#ctor(UnityEngine.Object[])">
      <summary>
        <para>Create SerializedObject for inspected object.</para>
      </summary>
      <param name="objs"></param>
    </member>
    <member name="M:UnityEditor.SerializedObject.#ctor(UnityEngine.Object,UnityEngine.Object)">
      <summary>
        <para>Create SerializedObject for inspected object by specifying a context to be used to store and resolve ExposedReference types.</para>
      </summary>
      <param name="obj"></param>
      <param name="context"></param>
    </member>
    <member name="M:UnityEditor.SerializedObject.#ctor(UnityEngine.Object[],UnityEngine.Object)">
      <summary>
        <para>Create SerializedObject for inspected object by specifying a context to be used to store and resolve ExposedReference types.</para>
      </summary>
      <param name="objs"></param>
      <param name="context"></param>
    </member>
    <member name="M:UnityEditor.SerializedObject.FindProperty(System.String)">
      <summary>
        <para>Find serialized property by name.</para>
      </summary>
      <param name="propertyPath"></param>
    </member>
    <member name="M:UnityEditor.SerializedObject.GetIterator">
      <summary>
        <para>Get the first serialized property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.SetIsDifferentCacheDirty">
      <summary>
        <para>Update hasMultipleDifferentValues cache on the next Update() call.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.Update">
      <summary>
        <para>Update serialized object's representation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.UpdateIfDirtyOrScript">
      <summary>
        <para>This has been made obsolete. See SerializedObject.UpdateIfRequiredOrScript instead.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.UpdateIfRequiredOrScript">
      <summary>
        <para>Update serialized object's representation, only if the object has been modified since the last call to Update or if it is a script.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SerializedProperty">
      <summary>
        <para>SerializedProperty and SerializedObject are classes for editing properties on objects in a completely generic way that automatically handles undo and styling UI for prefabs.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.animationCurveValue">
      <summary>
        <para>Value of a animation curve property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.arrayElementType">
      <summary>
        <para>Type name of the element in an array property. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.arraySize">
      <summary>
        <para>The number of elements in the array. If the SerializedObject contains multiple objects it will return the smallest number of elements. So it is always possible to iterate through the SerializedObject and only get properties found in all objects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.boolValue">
      <summary>
        <para>Value of a boolean property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.boundsValue">
      <summary>
        <para>Value of bounds property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.colorValue">
      <summary>
        <para>Value of a color property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.depth">
      <summary>
        <para>Nesting depth of the property. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.displayName">
      <summary>
        <para>Nice display name of the property. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.doubleValue">
      <summary>
        <para>Value of a float property as a double.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.editable">
      <summary>
        <para>Is this property editable? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.enumDisplayNames">
      <summary>
        <para>Display-friendly names of enumeration of an enum property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.enumNames">
      <summary>
        <para>Names of enumeration of an enum property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.enumValueIndex">
      <summary>
        <para>Enum index of an enum property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.exposedReferenceValue">
      <summary>
        <para>A reference to another Object in the Scene. This reference is resolved in the context of the SerializedObject containing the SerializedProperty.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.floatValue">
      <summary>
        <para>Value of a float property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.hasChildren">
      <summary>
        <para>Does it have child properties? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.hasMultipleDifferentValues">
      <summary>
        <para>Does this property represent multiple different values due to multi-object editing? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.hasVisibleChildren">
      <summary>
        <para>Does it have visible child properties? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.intValue">
      <summary>
        <para>Value of an integer property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.isArray">
      <summary>
        <para>Is this property an array? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.isExpanded">
      <summary>
        <para>Is this property expanded in the inspector?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.isInstantiatedPrefab">
      <summary>
        <para>Is property part of a prefab instance? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.longValue">
      <summary>
        <para>Value of a integer property as a long.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.name">
      <summary>
        <para>Name of the property. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.objectReferenceValue">
      <summary>
        <para>Value of an object reference property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.prefabOverride">
      <summary>
        <para>Is property's value different from the prefab it belongs to?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.propertyPath">
      <summary>
        <para>Full path of the property. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.propertyType">
      <summary>
        <para>Type of this property (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.quaternionValue">
      <summary>
        <para>Value of a quaternion property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.rectValue">
      <summary>
        <para>Value of a rectangle property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.serializedObject">
      <summary>
        <para>SerializedObject this property belongs to (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.stringValue">
      <summary>
        <para>Value of a string property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.tooltip">
      <summary>
        <para>Tooltip of the property. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.type">
      <summary>
        <para>Type name of the property. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.vector2Value">
      <summary>
        <para>Value of a 2D vector property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.vector3Value">
      <summary>
        <para>Value of a 3D vector property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.vector4Value">
      <summary>
        <para>Value of a 4D vector property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.ClearArray">
      <summary>
        <para>Remove all elements from the array.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.Copy">
      <summary>
        <para>Returns a copy of the SerializedProperty iterator in its current state. This is useful if you want to keep a reference to the current property but continue with the iteration.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.CountInProperty">
      <summary>
        <para>Count visible children of this property, including this property itself.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.CountRemaining">
      <summary>
        <para>Count remaining visible properties.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.DeleteArrayElementAtIndex(System.Int32)">
      <summary>
        <para>Delete the element at the specified index in the array.</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEditor.SerializedProperty.DeleteCommand">
      <summary>
        <para>Deletes the serialized property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.DuplicateCommand">
      <summary>
        <para>Duplicates the serialized property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.EqualContents(UnityEditor.SerializedProperty,UnityEditor.SerializedProperty)">
      <summary>
        <para>See if contained serialized properties are equal.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
    </member>
    <member name="M:UnityEditor.SerializedProperty.FindPropertyRelative(System.String)">
      <summary>
        <para>Retrieves the SerializedProperty at a relative path to the current property.</para>
      </summary>
      <param name="relativePropertyPath"></param>
    </member>
    <member name="M:UnityEditor.SerializedProperty.GetArrayElementAtIndex(System.Int32)">
      <summary>
        <para>Returns the element at the specified index in the array.</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEditor.SerializedProperty.GetEndProperty()">
      <summary>
        <para>Retrieves the SerializedProperty that defines the end range of this property.</para>
      </summary>
      <param name="includeInvisible"></param>
    </member>
    <member name="M:UnityEditor.SerializedProperty.GetEndProperty(System.Boolean)">
      <summary>
        <para>Retrieves the SerializedProperty that defines the end range of this property.</para>
      </summary>
      <param name="includeInvisible"></param>
    </member>
    <member name="M:UnityEditor.SerializedProperty.GetEnumerator">
      <summary>
        <para>Retrieves an iterator that allows you to iterator over the current nexting of a serialized property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.InsertArrayElementAtIndex(System.Int32)">
      <summary>
        <para>Insert an empty element at the specified index in the array.</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEditor.SerializedProperty.MoveArrayElement(System.Int32,System.Int32)">
      <summary>
        <para>Move an array element from srcIndex to dstIndex.</para>
      </summary>
      <param name="srcIndex"></param>
      <param name="dstIndex"></param>
    </member>
    <member name="M:UnityEditor.SerializedProperty.Next(System.Boolean)">
      <summary>
        <para>Move to next property.</para>
      </summary>
      <param name="enterChildren"></param>
    </member>
    <member name="M:UnityEditor.SerializedProperty.NextVisible(System.Boolean)">
      <summary>
        <para>Move to next visible property.</para>
      </summary>
      <param name="enterChildren"></param>
    </member>
    <member name="M:UnityEditor.SerializedProperty.Reset">
      <summary>
        <para>Move to first property of the object.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SerializedPropertyType">
      <summary>
        <para>Type of a SerializedProperty.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.AnimationCurve">
      <summary>
        <para>AnimationCurve property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.ArraySize">
      <summary>
        <para>Array size property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Boolean">
      <summary>
        <para>Boolean property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Bounds">
      <summary>
        <para>Bounds property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Character">
      <summary>
        <para>Character property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Color">
      <summary>
        <para>Color property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Enum">
      <summary>
        <para>Enumeration property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.ExposedReference">
      <summary>
        <para>A reference to another Object in the Scene. This is done via an ExposedReference type and resolves to a reference to an Object that exists in the context of the SerializedObject containing the SerializedProperty.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Float">
      <summary>
        <para>Float property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Gradient">
      <summary>
        <para>Gradient property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Integer">
      <summary>
        <para>Integer property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.LayerMask">
      <summary>
        <para>LayerMask property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.ObjectReference">
      <summary>
        <para>Reference to another object.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Quaternion">
      <summary>
        <para>Quaternion property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Rect">
      <summary>
        <para>Rectangle property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.String">
      <summary>
        <para>String property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Vector2">
      <summary>
        <para>2D vector property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Vector3">
      <summary>
        <para>3D vector property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Vector4">
      <summary>
        <para>4D vector property.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SessionState">
      <summary>
        <para>SessionState is a Key-Value Store intended for storing and retrieving Editor session state that should survive assembly reloading.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SessionState.EraseBool(System.String)">
      <summary>
        <para>Erase a Boolean entry in the key-value store.</para>
      </summary>
      <param name="key"></param>
    </member>
    <member name="M:UnityEditor.SessionState.EraseFloat(System.String)">
      <summary>
        <para>Erase a Float entry in the key-value store.</para>
      </summary>
      <param name="key"></param>
    </member>
    <member name="M:UnityEditor.SessionState.EraseInt(System.String)">
      <summary>
        <para>Erase an Integer entry in the key-value store.</para>
      </summary>
      <param name="key"></param>
    </member>
    <member name="M:UnityEditor.SessionState.EraseIntArray(System.String)">
      <summary>
        <para>Erase an Integer array entry in the key-value store.</para>
      </summary>
      <param name="key"></param>
    </member>
    <member name="M:UnityEditor.SessionState.EraseString(System.String)">
      <summary>
        <para>Erase a String entry in the key-value store.</para>
      </summary>
      <param name="key"></param>
    </member>
    <member name="M:UnityEditor.SessionState.EraseVector3(System.String)">
      <summary>
        <para>Erase a Vector3 entry in the key-value store.</para>
      </summary>
      <param name="key"></param>
    </member>
    <member name="M:UnityEditor.SessionState.GetBool(System.String,System.Boolean)">
      <summary>
        <para>Retrieve a Boolean value.</para>
      </summary>
      <param name="key"></param>
      <param name="defaultValue"></param>
    </member>
    <member name="M:UnityEditor.SessionState.GetFloat(System.String,System.Single)">
      <summary>
        <para>Retrieve a Float value.</para>
      </summary>
      <param name="key"></param>
      <param name="defaultValue"></param>
    </member>
    <member name="M:UnityEditor.SessionState.GetInt(System.String,System.Int32)">
      <summary>
        <para>Retrieve an Integer value.</para>
      </summary>
      <param name="key"></param>
      <param name="defaultValue"></param>
    </member>
    <member name="M:UnityEditor.SessionState.GetIntArray(System.String,System.Int32[])">
      <summary>
        <para>Retrieve an Integer array.</para>
      </summary>
      <param name="key"></param>
      <param name="defaultValue"></param>
    </member>
    <member name="M:UnityEditor.SessionState.GetString(System.String,System.String)">
      <summary>
        <para>Retrieve a String value.</para>
      </summary>
      <param name="key"></param>
      <param name="defaultValue"></param>
    </member>
    <member name="M:UnityEditor.SessionState.GetVector3(System.String,UnityEngine.Vector3)">
      <summary>
        <para>Retrieve a Vector3.</para>
      </summary>
      <param name="key"></param>
      <param name="defaultValue"></param>
    </member>
    <member name="M:UnityEditor.SessionState.SetBool(System.String,System.Boolean)">
      <summary>
        <para>Store a Boolean value.</para>
      </summary>
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEditor.SessionState.SetFloat(System.String,System.Single)">
      <summary>
        <para>Store a Float value.</para>
      </summary>
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEditor.SessionState.SetInt(System.String,System.Int32)">
      <summary>
        <para>Store an Integer value.</para>
      </summary>
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEditor.SessionState.SetIntArray(System.String,System.Int32[])">
      <summary>
        <para>Store an Integer array.</para>
      </summary>
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEditor.SessionState.SetString(System.String,System.String)">
      <summary>
        <para>Store a String value.</para>
      </summary>
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEditor.SessionState.SetVector3(System.String,UnityEngine.Vector3)">
      <summary>
        <para>Store a Vector3.</para>
      </summary>
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="T:UnityEditor.ShaderGUI">
      <summary>
        <para>Abstract class to derive from for defining custom GUI for shader properties and for extending the material preview.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ShaderGUI.AssignNewShaderToMaterial(UnityEngine.Material,UnityEngine.Shader,UnityEngine.Shader)">
      <summary>
        <para>This method is called when a new shader has been selected for a Material.</para>
      </summary>
      <param name="material">The material the newShader should be assigned to.</param>
      <param name="oldShader">Previous shader.</param>
      <param name="newShader">New shader to assign to the material.</param>
    </member>
    <member name="M:UnityEditor.ShaderGUI.FindProperty(System.String,UnityEditor.MaterialProperty[])">
      <summary>
        <para>Find shader properties.</para>
      </summary>
      <param name="propertyName">Name of the material property.</param>
      <param name="properties">The array of available properties.</param>
      <param name="propertyIsMandatory">If true then this method will throw an exception if a property with propertyName was not found.</param>
      <returns>
        <para>The material property found, otherwise null.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ShaderGUI.FindProperty(System.String,UnityEditor.MaterialProperty[],System.Boolean)">
      <summary>
        <para>Find shader properties.</para>
      </summary>
      <param name="propertyName">Name of the material property.</param>
      <param name="properties">The array of available properties.</param>
      <param name="propertyIsMandatory">If true then this method will throw an exception if a property with propertyName was not found.</param>
      <returns>
        <para>The material property found, otherwise null.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ShaderGUI.OnGUI(UnityEditor.MaterialEditor,UnityEditor.MaterialProperty[])">
      <summary>
        <para>To define a custom shader GUI use the methods of materialEditor to render controls for the properties array.</para>
      </summary>
      <param name="materialEditor">The MaterialEditor that are calling this OnGUI (the 'owner').</param>
      <param name="properties">Material properties of the current selected shader.</param>
    </member>
    <member name="M:UnityEditor.ShaderGUI.OnMaterialPreviewGUI(UnityEditor.MaterialEditor,UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Override for extending the rendering of the Preview area or completly replace the preview (by not calling base.OnMaterialPreviewGUI).</para>
      </summary>
      <param name="materialEditor">The MaterialEditor that are calling this method (the 'owner').</param>
      <param name="r">Preview rect.</param>
      <param name="background">Style for the background.</param>
    </member>
    <member name="M:UnityEditor.ShaderGUI.OnMaterialPreviewSettingsGUI(UnityEditor.MaterialEditor)">
      <summary>
        <para>Override for extending the functionality of the toolbar of the preview area or completly replace the toolbar by not calling base.OnMaterialPreviewSettingsGUI.</para>
      </summary>
      <param name="materialEditor">The MaterialEditor that are calling this method (the 'owner').</param>
    </member>
    <member name="T:UnityEditor.ShaderUtil">
      <summary>
        <para>Utility functions to assist with working with shaders from the editor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ShaderUtil.hardwareSupportsRectRenderTexture">
      <summary>
        <para>Does the current hardware support render textues.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetPropertyCount(UnityEngine.Shader)">
      <summary>
        <para>Get the number of properties in Shader s.</para>
      </summary>
      <param name="s">The shader to check against.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetPropertyDescription(UnityEngine.Shader,System.Int32)">
      <summary>
        <para>Get the description of the shader propery at index propertyIdx of Shader s.</para>
      </summary>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetPropertyName(UnityEngine.Shader,System.Int32)">
      <summary>
        <para>Get the name of the shader propery at index propertyIdx of Shader s.</para>
      </summary>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetPropertyType(UnityEngine.Shader,System.Int32)">
      <summary>
        <para>Get the ShaderProperyType of the shader propery at index propertyIdx of Shader s.</para>
      </summary>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetRangeLimits(UnityEngine.Shader,System.Int32,System.Int32)">
      <summary>
        <para>Get Limits for a range property at index propertyIdx of Shader s.</para>
      </summary>
      <param name="defminmax">Which value to get: 0 = default, 1 = min, 2 = max.</param>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetTexDim(UnityEngine.Shader,System.Int32)">
      <summary>
        <para>Gets texture dimension of a shader property.</para>
      </summary>
      <param name="s">The shader to get the property from.</param>
      <param name="propertyIdx">The property index to use.</param>
      <returns>
        <para>Texture dimension.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ShaderUtil.IsShaderPropertyHidden(UnityEngine.Shader,System.Int32)">
      <summary>
        <para>Is the shader propery at index propertyIdx of Shader s hidden?</para>
      </summary>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="T:UnityEditor.ShaderUtil.ShaderPropertyType">
      <summary>
        <para>Type of a given texture property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil.ShaderPropertyType.Color">
      <summary>
        <para>Color Property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil.ShaderPropertyType.Float">
      <summary>
        <para>Float Property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil.ShaderPropertyType.Range">
      <summary>
        <para>Range Property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil.ShaderPropertyType.TexEnv">
      <summary>
        <para>Texture Property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil.ShaderPropertyType.Vector">
      <summary>
        <para>Vector Property.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SketchUpImportCamera">
      <summary>
        <para>Structure to hold camera data extracted from a SketchUp file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.aspectRatio">
      <summary>
        <para>Aspect ratio of the camera.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.fieldOfView">
      <summary>
        <para>Field of view of the camera.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.isPerspective">
      <summary>
        <para>Indicate if the camera is using a perspective or orthogonal projection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.lookAt">
      <summary>
        <para>The position the camera is looking at.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.orthoSize">
      <summary>
        <para>The orthogonal projection size of the camera. This value only make sense if SketchUpImportCamera.isPerspective is false.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.position">
      <summary>
        <para>The position of the camera.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.up">
      <summary>
        <para>Up vector of the camera.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SketchUpImporter">
      <summary>
        <para>Derives from AssetImporter to handle importing of SketchUp files.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SketchUpImporter.latitude">
      <summary>
        <para>Retrieves the latitude Geo Coordinate imported from the SketchUp file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SketchUpImporter.longitude">
      <summary>
        <para>Retrieves the longitude Geo Coordinate imported from the SketchUp file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SketchUpImporter.northCorrection">
      <summary>
        <para>Retrieves the north correction value imported from the SketchUp file.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SketchUpImporter.GetDefaultCamera">
      <summary>
        <para>The default camera or the camera of the active scene which the SketchUp file was saved with.</para>
      </summary>
      <returns>
        <para>The default camera.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.SketchUpImporter.GetScenes">
      <summary>
        <para>The method returns an array of SketchUpImportScene which represents SketchUp scenes.</para>
      </summary>
      <returns>
        <para>Array of scenes extracted from a SketchUp file.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.SketchUpImportScene">
      <summary>
        <para>Structure to hold scene data extracted from a SketchUp file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportScene.camera">
      <summary>
        <para>The camera data of the SketchUp scene.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportScene.name">
      <summary>
        <para>The name of the SketchUp scene.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SpeedTreeImporter">
      <summary>
        <para>AssetImportor for importing SpeedTree model assets.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.alphaTestRef">
      <summary>
        <para>Gets and sets a default alpha test reference values.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.animateCrossFading">
      <summary>
        <para>Indicates if the cross-fade LOD transition, applied to the last mesh LOD and the billboard, should be animated.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.bestWindQuality">
      <summary>
        <para>Returns the best-possible wind quality on this asset (configured in SpeedTree modeler).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.billboardTransitionCrossFadeWidth">
      <summary>
        <para>Proportion of the last 3D mesh LOD region width which is used for cross-fading to billboard tree.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.castShadows">
      <summary>
        <para>Gets and sets an array of booleans to enable shadow casting for each LOD.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.enableBump">
      <summary>
        <para>Gets and sets an array of booleans to enable normal mapping for each LOD.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.enableHue">
      <summary>
        <para>Gets and sets an array of booleans to enable Hue variation effect for each LOD.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.enableSmoothLODTransition">
      <summary>
        <para>Enables smooth LOD transitions.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.fadeOutWidth">
      <summary>
        <para>Proportion of the billboard LOD region width which is used for fading out the billboard.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.hasBillboard">
      <summary>
        <para>Tells if there is a billboard LOD.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.hasImported">
      <summary>
        <para>Tells if the SPM file has been previously imported.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.hueVariation">
      <summary>
        <para>Gets and sets a default Hue variation color and amount (in alpha).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.mainColor">
      <summary>
        <para>Gets and sets a default main color.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.materialFolderPath">
      <summary>
        <para>Returns the folder path where generated materials will be placed in.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.receiveShadows">
      <summary>
        <para>Gets and sets an array of booleans to enable shadow receiving for each LOD.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.reflectionProbeUsages">
      <summary>
        <para>Gets and sets an array of Reflection Probe usages for each LOD.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.scaleFactor">
      <summary>
        <para>How much to scale the tree model compared to what is in the .spm file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.shininess">
      <summary>
        <para>Gets and sets a default Shininess value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.specColor">
      <summary>
        <para>Gets and sets a default specular color.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.useLightProbes">
      <summary>
        <para>Gets and sets an array of booleans to enable Light Probe lighting for each LOD.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.windQualities">
      <summary>
        <para>Gets and sets an array of integers of the wind qualities on each LOD. Values will be clampped by BestWindQuality internally.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpeedTreeImporter.windQualityNames">
      <summary>
        <para>Gets an array of name strings for wind quality value.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SpeedTreeImporter.#ctor">
      <summary>
        <para>Construct a new SpeedTreeImporter object.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SpeedTreeImporter.GenerateMaterials">
      <summary>
        <para>Generates all necessary materials under materialFolderPath. If Version Control is enabled please first check out the folder.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.LODHeights">
      <summary>
        <para>Gets and sets an array of floats of each LOD's screen height value.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SplashScreenStyle">
      <summary>
        <para>The style of builtin splash screen to use.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SplashScreenStyle.Dark">
      <summary>
        <para>Dark background with light logo and text.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SplashScreenStyle.Light">
      <summary>
        <para>White background with dark logo and text.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SpriteImportMode">
      <summary>
        <para>Texture importer modes for Sprite import.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteImportMode.Multiple">
      <summary>
        <para>Sprites are multiple image sections extracted from the texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteImportMode.None">
      <summary>
        <para>Graphic is not a Sprite.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteImportMode.Polygon">
      <summary>
        <para>Sprite has it own mesh outline defined.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteImportMode.Single">
      <summary>
        <para>Sprite is a single image section extracted automatically from the texture.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SpriteMetaData">
      <summary>
        <para>Editor data used in producing a Sprite.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.alignment">
      <summary>
        <para>Edge-relative alignment of the sprite graphic.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.border">
      <summary>
        <para>Edge border size for a sprite (in pixels).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.name">
      <summary>
        <para>Name of the Sprite.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.pivot">
      <summary>
        <para>The pivot point of the Sprite, relative to its bounding rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.rect">
      <summary>
        <para>Bounding rectangle of the sprite's graphic within the atlas image.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SpritePackerMode">
      <summary>
        <para>Sprite Packer mode for the current project.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpritePackerMode.AlwaysOn">
      <summary>
        <para>Always maintain an up-to-date sprite atlas cache.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpritePackerMode.BuildTimeOnly">
      <summary>
        <para>Updates sprite atlas cache when building player/bundles.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpritePackerMode.Disabled">
      <summary>
        <para>Doesn't pack sprites.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Sprites.AtlasSettings">
      <summary>
        <para>Describes the final atlas texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.allowsAlphaSplitting">
      <summary>
        <para>Marks this atlas so that it contains textures that have been flagged for Alpha splitting when needed (for example ETC1 compression for textures with transparency).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.anisoLevel">
      <summary>
        <para>Anisotropic filtering level of the atlas texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.colorSpace">
      <summary>
        <para>Desired color space of the atlas.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.compressionQuality">
      <summary>
        <para>Quality of atlas texture compression in the range [0..100].</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.enableRotation">
      <summary>
        <para>Allows Sprite Packer to rotate/flip the Sprite to ensure optimal Packing.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.filterMode">
      <summary>
        <para>Filtering mode of the atlas texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.format">
      <summary>
        <para>The format of the atlas texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.generateMipMaps">
      <summary>
        <para>Should sprite atlas textures generate mip maps?</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.maxHeight">
      <summary>
        <para>Maximum height of the atlas texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.maxWidth">
      <summary>
        <para>Maximum width of the atlas texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.paddingPower">
      <summary>
        <para>The amount of extra padding between packed sprites.</para>
      </summary>
    </member>
    <member name="?:UnityEditor.Sprites.IPackerPolicy">
      <summary>
        <para>Sprite packing policy interface. Provide a custom implementation to control which Sprites go into which atlases.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.IPackerPolicy.GetVersion">
      <summary>
        <para>Return the version of your policy. Sprite Packer needs to know if atlas grouping logic changed.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.IPackerPolicy.OnGroupAtlases(UnityEditor.BuildTarget,UnityEditor.Sprites.PackerJob,System.Int32[])">
      <summary>
        <para>Implement custom atlas grouping here.</para>
      </summary>
      <param name="target"></param>
      <param name="job"></param>
      <param name="textureImporterInstanceIDs"></param>
    </member>
    <member name="T:UnityEditor.Sprites.Packer">
      <summary>
        <para>Sprite Packer helpers.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Sprites.Packer.atlasNames">
      <summary>
        <para>Array of Sprite atlas names found in the current atlas cache.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.Packer.kDefaultPolicy">
      <summary>
        <para>Name of the default Sprite Packer policy.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Sprites.Packer.Execution">
      <summary>
        <para>Sprite Packer execution mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.Packer.Execution.ForceRegroup">
      <summary>
        <para>Will always trigger IPackerPolicy.OnGroupAtlases.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.Packer.Execution.Normal">
      <summary>
        <para>Normal execution. Will not trigger IPackerPolicy.OnGroupAtlases unless IPackerPolicy, IPackerPolicy version or TextureImporter settings have changed.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.Packer.GetAlphaTexturesForAtlas(System.String)">
      <summary>
        <para>Returns all alpha atlas textures generated for the specified atlas.</para>
      </summary>
      <param name="atlasName">Name of the atlas.</param>
    </member>
    <member name="M:UnityEditor.Sprites.Packer.GetAtlasDataForSprite(UnityEngine.Sprite,System.String&amp;,UnityEngine.Texture2D&amp;)">
      <summary>
        <para>Returns atlasing data for the specified Sprite.</para>
      </summary>
      <param name="sprite">Sprite to query.</param>
      <param name="atlasName">Gets set to the name of the atlas containing the specified Sprite.</param>
      <param name="atlasTexture">Gets set to the Texture containing the specified Sprite.</param>
    </member>
    <member name="M:UnityEditor.Sprites.Packer.GetTexturesForAtlas(System.String)">
      <summary>
        <para>Returns all atlas textures generated for the specified atlas.</para>
      </summary>
      <param name="atlasName">Atlas name.</param>
    </member>
    <member name="P:UnityEditor.Sprites.Packer.Policies">
      <summary>
        <para>Available Sprite Packer policies for this project.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.Packer.RebuildAtlasCacheIfNeeded(UnityEditor.BuildTarget,System.Boolean,UnityEditor.Sprites.Packer/Execution)">
      <summary>
        <para>Rebuilds the Sprite atlas cache.</para>
      </summary>
      <param name="target"></param>
      <param name="displayProgressBar"></param>
      <param name="execution"></param>
    </member>
    <member name="P:UnityEditor.Sprites.Packer.SelectedPolicy">
      <summary>
        <para>The active Sprite Packer policy for this project.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Sprites.PackerJob">
      <summary>
        <para>Current Sprite Packer job definition.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.PackerJob.AddAtlas(System.String,UnityEditor.Sprites.AtlasSettings)">
      <summary>
        <para>Registers a new atlas.</para>
      </summary>
      <param name="atlasName"></param>
      <param name="settings"></param>
    </member>
    <member name="M:UnityEditor.Sprites.PackerJob.AssignToAtlas(System.String,UnityEngine.Sprite,UnityEngine.SpritePackingMode,UnityEngine.SpritePackingRotation)">
      <summary>
        <para>Assigns a Sprite to an already registered atlas.</para>
      </summary>
      <param name="atlasName"></param>
      <param name="sprite"></param>
      <param name="packingMode"></param>
      <param name="packingRotation"></param>
    </member>
    <member name="T:UnityEditor.Sprites.SpriteUtility">
      <summary>
        <para>Helper utilities for accessing Sprite data.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.SpriteUtility.GetSpriteIndices(UnityEngine.Sprite,System.Boolean)">
      <summary>
        <para>Returns the generated Sprite mesh indices.</para>
      </summary>
      <param name="sprite">If Sprite is packed, it is possible to access data as if it was on the atlas texture.</param>
      <param name="getAtlasData"></param>
    </member>
    <member name="M:UnityEditor.Sprites.SpriteUtility.GetSpriteMesh(UnityEngine.Sprite,System.Boolean)">
      <summary>
        <para>Returns the generated Sprite mesh positions.</para>
      </summary>
      <param name="getAtlasData">If Sprite is packed, it is possible to access data as if it was on the atlas texture.</param>
      <param name="sprite"></param>
    </member>
    <member name="M:UnityEditor.Sprites.SpriteUtility.GetSpriteTexture(UnityEngine.Sprite,System.Boolean)">
      <summary>
        <para>Returns the generated Sprite texture. If Sprite is packed, it is possible to query for both source and atlas textures.</para>
      </summary>
      <param name="getAtlasData">If Sprite is packed, it is possible to access data as if it was on the atlas texture.</param>
      <param name="sprite"></param>
    </member>
    <member name="M:UnityEditor.Sprites.SpriteUtility.GetSpriteUVs(UnityEngine.Sprite,System.Boolean)">
      <summary>
        <para>Returns the generated Sprite mesh uvs.</para>
      </summary>
      <param name="sprite">If Sprite is packed, it is possible to access data as if it was on the atlas texture.</param>
      <param name="getAtlasData"></param>
    </member>
    <member name="T:UnityEditor.StaticEditorFlags">
      <summary>
        <para>Static Editor Flags.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.BatchingStatic">
      <summary>
        <para>Consider for static batching.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.LightmapStatic">
      <summary>
        <para>Considered static for lightmapping.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.NavigationStatic">
      <summary>
        <para>Considered static for navigation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.OccludeeStatic">
      <summary>
        <para>Considered static for occlusion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.OccluderStatic">
      <summary>
        <para>Considered static for occlusion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.OffMeshLinkGeneration">
      <summary>
        <para>Auto-generate OffMeshLink.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.ReflectionProbeStatic">
      <summary>
        <para>Consider static for reflection probe.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.StaticOcclusionCulling">
      <summary>
        <para>StaticOcclusionCulling lets you perform static occlusion culling operations.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCulling.doesSceneHaveManualPortals">
      <summary>
        <para>Does the scene contain any occlusion portals that were added manually rather than automatically?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCulling.isRunning">
      <summary>
        <para>Used to check if asynchronous generation of static occlusion culling data is still running.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCulling.umbraDataSize">
      <summary>
        <para>Returns the size in bytes that the PVS data is currently taking up in this scene on disk.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.StaticOcclusionCulling.Cancel">
      <summary>
        <para>Used to cancel asynchronous generation of static occlusion culling data.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.StaticOcclusionCulling.Clear">
      <summary>
        <para>Clears the PVS of the opened scene.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.StaticOcclusionCulling.Compute">
      <summary>
        <para>Used to generate static occlusion culling data.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.StaticOcclusionCulling.GenerateInBackground">
      <summary>
        <para>Used to compute static occlusion culling data asynchronously.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.StaticOcclusionCulling.GenerateInBackground">
      <summary>
        <para>Used to compute static occlusion culling data asynchronously.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.StaticOcclusionCullingVisualization">
      <summary>
        <para>Used to visualize static occlusion culling at development time in scene view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showGeometryCulling">
      <summary>
        <para>If set to true, culling of geometry is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showOcclusionCulling">
      <summary>
        <para>If set to true, visualization of target volumes is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showPortals">
      <summary>
        <para>If set to true, visualization of portals is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showPreVisualization">
      <summary>
        <para>If set to true, the visualization lines of the PVS volumes will show all cells rather than cells after culling.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showViewVolumes">
      <summary>
        <para>If set to true, visualization of view volumes is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showVisibilityLines">
      <summary>
        <para>If set to true, visualization of portals is enabled.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.StatusQueryOptions">
      <summary>
        <para>Options for querying the version control system status of a file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StatusQueryOptions.ForceUpdate">
      <summary>
        <para>Force a refresh of the version control system status of the file. This is slow but accurate.

See Also: AssetDatabase.IsOpenForEdit, AssetDatabase.IsMetaFileOpenForEdit.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StatusQueryOptions.UseCachedIfPossible">
      <summary>
        <para>Use the last known version control system status of the file. This is faster on average but less accurate than forcing an update, as it will cache the status of the file for a period of time.

See Also: AssetDatabase.IsOpenForEdit, AssetDatabase.IsMetaFileOpenForEdit.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.StereoRenderingPath">
      <summary>
        <para>Enum used to specify what stereo rendering path to use.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StereoRenderingPath.Instancing">
      <summary>
        <para>Single pass VR rendering ( via instanced rendering ).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StereoRenderingPath.MultiPass">
      <summary>
        <para>Multiple pass VR rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StereoRenderingPath.SinglePass">
      <summary>
        <para>Single pass VR rendering ( via double-wide render texture ).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.StrippingLevel">
      <summary>
        <para>Managed code stripping level.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StrippingLevel.Disabled">
      <summary>
        <para>Managed code stripping is disabled.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StrippingLevel.StripAssemblies">
      <summary>
        <para>Unused parts of managed code are stripped away.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StrippingLevel.StripByteCode">
      <summary>
        <para>Managed method bodies are stripped away. AOT platforms only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StrippingLevel.UseMicroMSCorlib">
      <summary>
        <para>Lightweight mscorlib version will be used at expense of limited compatibility.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SubstanceArchive">
      <summary>
        <para>Class for Substance Archive handling.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SubstanceImporter">
      <summary>
        <para>The SubstanceImporter class lets you access the imported ProceduralMaterial instances.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.CloneMaterial(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Clone an existing ProceduralMaterial instance.</para>
      </summary>
      <param name="material"></param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.DestroyMaterial(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Destroy an existing ProceduralMaterial instance.</para>
      </summary>
      <param name="material"></param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.ExportBitmaps(UnityEngine.ProceduralMaterial,System.String,System.Boolean)">
      <summary>
        <para>Export the bitmaps generated by a ProceduralMaterial as TGA files.</para>
      </summary>
      <param name="material">The ProceduralMaterial whose output textures will be saved.</param>
      <param name="exportPath">Path to a folder where the output bitmaps will be saved. The folder will be created if it doesn't already exist.</param>
      <param name="alphaRemap">Indicates whether alpha channel remapping should be performed.</param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.ExportPreset(UnityEngine.ProceduralMaterial,System.String)">
      <summary>
        <para>Export a XML preset string with the value of all parameters of a given ProceduralMaterial to the specified folder.</para>
      </summary>
      <param name="material">The ProceduralMaterial whose preset string will be saved.</param>
      <param name="exportPath">Path to a folder where the preset file will be saved. The folder will be created if it doesn't already exist.</param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetAnimationUpdateRate(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Get the ProceduralMaterial animation update rate in millisecond.</para>
      </summary>
      <param name="material"></param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetGenerateAllOutputs(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Check if the ProceduralMaterial needs to force generation of all its outputs.</para>
      </summary>
      <param name="material"></param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetGenerateMipMaps(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Return true if the mipmaps are generated for this ProceduralMaterial.</para>
      </summary>
      <param name="material"></param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetMaterialCount">
      <summary>
        <para>Get the number of ProceduralMaterial instances.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetMaterialOffset(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Get the material offset, which is used for all the textures that are part of this ProceduralMaterial.</para>
      </summary>
      <param name="material"></param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetMaterials">
      <summary>
        <para>Get an array with the ProceduralMaterial instances.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetMaterialScale(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Get the material scale, which is used for all the textures that are part of this ProceduralMaterial.</para>
      </summary>
      <param name="material"></param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetPlatformTextureSettings(System.String,System.String,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;)">
      <summary>
        <para>Get the import settings for a given ProceduralMaterial for a given platform (width and height, RAW/Compressed format, loading behavior).</para>
      </summary>
      <param name="materialName">The name of the ProceduralMaterial.</param>
      <param name="platform">The name of the platform (can be empty).</param>
      <param name="maxTextureWidth">The maximum texture width for this ProceduralMaterial (output value).</param>
      <param name="maxTextureHeight">The maximum texture height for this ProceduralMaterial (output value).</param>
      <param name="textureFormat">The texture format (0=Compressed, 1=RAW) for this ProceduralMaterial (output value).</param>
      <param name="loadBehavior">The load behavior for this ProceduralMaterial (output value).
Values match the ProceduralMaterial::ProceduralLoadingBehavior enum.</param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetPrototypeNames">
      <summary>
        <para>Get a list of the names of the ProceduralMaterial prototypes in the package.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetTextureAlphaSource(UnityEngine.ProceduralMaterial,System.String)">
      <summary>
        <para>Get the alpha source of the given texture in the ProceduralMaterial.</para>
      </summary>
      <param name="material"></param>
      <param name="textureName"></param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.InstantiateMaterial(System.String)">
      <summary>
        <para>Instantiate a new ProceduralMaterial instance from a prototype.</para>
      </summary>
      <param name="prototypeName"></param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.OnShaderModified(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>After modifying the shader of a ProceduralMaterial, call this function to apply the changes to the importer.</para>
      </summary>
      <param name="material"></param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.RenameMaterial(UnityEngine.ProceduralMaterial,System.String)">
      <summary>
        <para>Rename an existing ProceduralMaterial instance.</para>
      </summary>
      <param name="material"></param>
      <param name="name"></param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.ResetMaterial(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Reset the ProceduralMaterial to its default values.</para>
      </summary>
      <param name="material"></param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetAnimationUpdateRate(UnityEngine.ProceduralMaterial,System.Int32)">
      <summary>
        <para>Set the ProceduralMaterial animation update rate in millisecond.</para>
      </summary>
      <param name="material"></param>
      <param name="animation_update_rate"></param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetGenerateAllOutputs(UnityEngine.ProceduralMaterial,System.Boolean)">
      <summary>
        <para>Specify if the ProceduralMaterial needs to force generation of all its outputs.</para>
      </summary>
      <param name="material"></param>
      <param name="generated"></param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetGenerateMipMaps(UnityEngine.ProceduralMaterial,System.Boolean)">
      <summary>
        <para>Force the generation of mipmaps for this ProceduralMaterial.</para>
      </summary>
      <param name="material"></param>
      <param name="mode"></param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetMaterialOffset(UnityEngine.ProceduralMaterial,UnityEngine.Vector2)">
      <summary>
        <para>Set the material offset, which is used for all the textures that are part of this ProceduralMaterial.</para>
      </summary>
      <param name="material"></param>
      <param name="offset"></param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetMaterialScale(UnityEngine.ProceduralMaterial,UnityEngine.Vector2)">
      <summary>
        <para>Set the material scale, which is used for all the textures that are part of this ProceduralMaterial.</para>
      </summary>
      <param name="material"></param>
      <param name="scale"></param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetPlatformTextureSettings(UnityEngine.ProceduralMaterial,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Set the import settings for the input ProceduralMaterial for the input platform.</para>
      </summary>
      <param name="material">The name of the Procedural Material.</param>
      <param name="platform">The name of the platform (can be empty).</param>
      <param name="maxTextureWidth">The maximum texture width for this Procedural Material.</param>
      <param name="maxTextureHeight">The maximum texture height for this Procedural Material.</param>
      <param name="textureFormat">The texture format (0=Compressed, 1=RAW) for this Procedural Material.</param>
      <param name="loadBehavior">The load behavior for this Procedural Material.
Values match the ProceduralMaterial::ProceduralLoadingBehavior enum.</param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetTextureAlphaSource(UnityEngine.ProceduralMaterial,System.String,UnityEngine.ProceduralOutputType)">
      <summary>
        <para>Set the alpha source of the given texture in the ProceduralMaterial.</para>
      </summary>
      <param name="material"></param>
      <param name="textureName"></param>
      <param name="alphaSource"></param>
    </member>
    <member name="T:UnityEditor.SupportedRenderingFeatures">
      <summary>
        <para>Describes the rendering features supported by a given renderloop.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SupportedRenderingFeatures.active">
      <summary>
        <para>The rendering features supported by the active renderloop.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SupportedRenderingFeatures.reflectionProbe">
      <summary>
        <para>Supported reflection probe rendering features.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SupportedRenderingFeatures.Default">
      <summary>
        <para>Default rendering features (Read Only).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SupportedRenderingFeatures.ReflectionProbe">
      <summary>
        <para>Reflection probe features.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SupportedRenderingFeatures.ReflectionProbe.None">
      <summary>
        <para>No additional reflection probe features.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SupportedRenderingFeatures.ReflectionProbe.Rotation">
      <summary>
        <para>Reflection probes support rotation.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TakeInfo">
      <summary>
        <para>A Takeinfo object contains all the information needed to describe a take.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.bakeStartTime">
      <summary>
        <para>Start time in second.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.bakeStopTime">
      <summary>
        <para>Stop time in second.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.defaultClipName">
      <summary>
        <para>This is the default clip name for the clip generated for this take.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.name">
      <summary>
        <para>Take name as define from imported file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.sampleRate">
      <summary>
        <para>Sample rate of the take.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.startTime">
      <summary>
        <para>Start time in second.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.stopTime">
      <summary>
        <para>Stop time in second.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporter">
      <summary>
        <para>Texture importer lets you modify Texture2D import settings from editor scripts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.allowAlphaSplitting">
      <summary>
        <para>Allows alpha splitting on relevant platforms for this texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.alphaIsTransparency">
      <summary>
        <para>If the provided alpha channel is transparency, enable this to prefilter the color to avoid filtering artifacts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.alphaSource">
      <summary>
        <para>Select how the alpha of the imported texture is generated.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.anisoLevel">
      <summary>
        <para>Anisotropic filtering level of the texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.borderMipmap">
      <summary>
        <para>Keep texture borders the same when generating mipmaps?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.compressionQuality">
      <summary>
        <para>Quality of Texture Compression in the range [0..100].</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.convertToNormalmap">
      <summary>
        <para>Convert heightmap to normal map?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.crunchedCompression">
      <summary>
        <para>Use crunched compression when available.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.fadeout">
      <summary>
        <para>Fade out mip levels to gray color?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.filterMode">
      <summary>
        <para>Filtering mode of the texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.generateCubemap">
      <summary>
        <para>Cubemap generation mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.generateMipsInLinearSpace">
      <summary>
        <para>Should mip maps be generated with gamma correction?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.grayscaleToAlpha">
      <summary>
        <para>Generate alpha channel from intensity?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.heightmapScale">
      <summary>
        <para>Amount of bumpyness in the heightmap.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.isReadable">
      <summary>
        <para>Set this to true if you want texture data to be readable from scripts. Set it to false to prevent scripts from reading texture data.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.lightmap">
      <summary>
        <para>Is this texture a lightmap?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.linearTexture">
      <summary>
        <para>Is texture storing non-color data?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.maxTextureSize">
      <summary>
        <para>Maximum texture size.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipMapBias">
      <summary>
        <para>Mip map bias of the texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipmapEnabled">
      <summary>
        <para>Generate Mip Maps.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipmapFadeDistanceEnd">
      <summary>
        <para>Mip level where texture is faded out completely.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipmapFadeDistanceStart">
      <summary>
        <para>Mip level where texture begins to fade out.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipmapFilter">
      <summary>
        <para>Mipmap filtering mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.normalmap">
      <summary>
        <para>Is this texture a normal map?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.normalmapFilter">
      <summary>
        <para>Normal map filtering mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.npotScale">
      <summary>
        <para>Scaling mode for non power of two textures.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.qualifiesForSpritePacking">
      <summary>
        <para>Returns true if this TextureImporter is setup for Sprite packing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spriteBorder">
      <summary>
        <para>Border sizes of the generated sprites.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spriteImportMode">
      <summary>
        <para>Selects Single or Manual import mode for Sprite textures.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spritePackingTag">
      <summary>
        <para>Selects the Sprite packing tag.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spritePivot">
      <summary>
        <para>The point in the Sprite object's coordinate space where the graphic is located.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spritePixelsPerUnit">
      <summary>
        <para>The number of pixels in the sprite that correspond to one unit in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spritePixelsToUnits">
      <summary>
        <para>Scale factor for mapping pixels in the graphic to units in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spritesheet">
      <summary>
        <para>Array representing the sections of the atlas corresponding to individual sprite graphics.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.sRGBTexture">
      <summary>
        <para>Is texture storing color data?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.textureCompression">
      <summary>
        <para>Compression of imported texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.textureFormat">
      <summary>
        <para>Format of imported texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.textureShape">
      <summary>
        <para>Shape of imported texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.textureType">
      <summary>
        <para>Which type of texture are we dealing with here.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.wrapMode">
      <summary>
        <para>Wrap mode (Repeat or Clamp) of the texture.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TextureImporter.ClearPlatformTextureSettings(System.String)">
      <summary>
        <para>Clear specific target platform settings.</para>
      </summary>
      <param name="platform">The platform whose settings are to be cleared (see below).</param>
    </member>
    <member name="M:UnityEditor.TextureImporter.DoesSourceTextureHaveAlpha">
      <summary>
        <para>Does textures source image have alpha channel.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TextureImporter.DoesSourceTextureHaveColor">
      <summary>
        <para>Does textures source image have RGB channels.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TextureImporter.GetAllowsAlphaSplitting">
      <summary>
        <para>Getter for the flag that allows Alpha splitting on the imported texture when needed (for example ETC1 compression for textures with transparency).</para>
      </summary>
      <returns>
        <para>True if the importer allows alpha split on the imported texture, False otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.TextureImporter.GetAutomaticFormat(System.String)">
      <summary>
        <para>Returns the TextureImporterFormat that would be automatically chosen for this platform.</para>
      </summary>
      <param name="platform"></param>
      <returns>
        <para>Format chosen by the system for the provided platform, TextureImporterFormat.Automatic if the platform does not exist.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.TextureImporter.GetDefaultPlatformTextureSettings">
      <summary>
        <para>Get the default platform specific texture settings.</para>
      </summary>
      <returns>
        <para>A TextureImporterPlatformSettings structure containing the default platform parameters.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.TextureImporter.GetPlatformTextureSettings(System.String,System.Int32&amp;,UnityEditor.TextureImporterFormat&amp;,System.Int32&amp;,System.Boolean&amp;)">
      <summary>
        <para>Get platform specific texture settings.</para>
      </summary>
      <param name="platform">The platform for which settings are required (see options below).</param>
      <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
      <param name="textureFormat">Format of the texture for the given platform.</param>
      <param name="compressionQuality">Value from 0..100, equivalent to the standard JPEG quality setting.</param>
      <param name="etc1AlphaSplitEnabled">Status of the ETC1 and alpha split flag.</param>
      <returns>
        <para>True if the platform override was found, false if no override was found.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.TextureImporter.GetPlatformTextureSettings(System.String,System.Int32&amp;,UnityEditor.TextureImporterFormat&amp;,System.Int32&amp;)">
      <summary>
        <para>Get platform specific texture settings.</para>
      </summary>
      <param name="platform">The platform whose settings are required (see below).</param>
      <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
      <param name="textureFormat">Format of the texture.</param>
      <param name="compressionQuality">Value from 0..100, equivalent to the standard JPEG quality setting.</param>
      <returns>
        <para>True if the platform override was found, false if no override was found.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.TextureImporter.GetPlatformTextureSettings(System.String,System.Int32&amp;,UnityEditor.TextureImporterFormat&amp;)">
      <summary>
        <para>Get platform specific texture settings.</para>
      </summary>
      <param name="platform">The platform whose settings are required (see below).</param>
      <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
      <param name="textureFormat">Format of the texture.</param>
      <returns>
        <para>True if the platform override was found, false if no override was found.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.TextureImporter.GetPlatformTextureSettings(System.String)">
      <summary>
        <para>Get platform specific texture settings.</para>
      </summary>
      <param name="platform">The platform whose settings are required (see below).</param>
      <returns>
        <para>A TextureImporterPlatformSettings structure containing the platform parameters.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.TextureImporter.ReadTextureImportInstructions">
      <summary>
        <para>Reads the active texture output instructions of this TextureImporter.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TextureImporter.ReadTextureSettings(UnityEditor.TextureImporterSettings)">
      <summary>
        <para>Read texture settings into TextureImporterSettings class.</para>
      </summary>
      <param name="dest"></param>
    </member>
    <member name="M:UnityEditor.TextureImporter.SetAllowsAlphaSplitting(System.Boolean)">
      <summary>
        <para>Setter for the flag that allows Alpha splitting on the imported texture when needed (for example ETC1 compression for textures with transparency).</para>
      </summary>
      <param name="flag"></param>
    </member>
    <member name="M:UnityEditor.TextureImporter.SetPlatformTextureSettings(System.String,System.Int32,UnityEditor.TextureImporterFormat,System.Boolean)">
      <summary>
        <para>Set specific target platform settings.</para>
      </summary>
      <param name="platform">The platforms whose settings are to be changed (see below).</param>
      <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
      <param name="textureFormat">Data format for the texture.</param>
      <param name="compressionQuality">Value from 0..100, with 0, 50 and 100 being respectively Fast, Normal, Best quality options in the texture importer UI. For Crunch texture formats, this roughly corresponds to JPEG quality levels.</param>
      <param name="allowsAlphaSplit">Allows splitting of imported texture into RGB+A so that ETC1 compression can be applied (Android only, and works only on textures that are a part of some atlas).</param>
    </member>
    <member name="M:UnityEditor.TextureImporter.SetPlatformTextureSettings(System.String,System.Int32,UnityEditor.TextureImporterFormat,System.Int32,System.Boolean)">
      <summary>
        <para>Set specific target platform settings.</para>
      </summary>
      <param name="platform">The platforms whose settings are to be changed (see below).</param>
      <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
      <param name="textureFormat">Data format for the texture.</param>
      <param name="compressionQuality">Value from 0..100, with 0, 50 and 100 being respectively Fast, Normal, Best quality options in the texture importer UI. For Crunch texture formats, this roughly corresponds to JPEG quality levels.</param>
      <param name="allowsAlphaSplit">Allows splitting of imported texture into RGB+A so that ETC1 compression can be applied (Android only, and works only on textures that are a part of some atlas).</param>
    </member>
    <member name="M:UnityEditor.TextureImporter.SetPlatformTextureSettings(UnityEditor.TextureImporterPlatformSettings)">
      <summary>
        <para>Set specific target platform settings.</para>
      </summary>
      <param name="platformSettings">Structure containing the platform settings.</param>
    </member>
    <member name="M:UnityEditor.TextureImporter.SetTextureSettings(UnityEditor.TextureImporterSettings)">
      <summary>
        <para>Set texture importers settings from TextureImporterSettings class.</para>
      </summary>
      <param name="src"></param>
    </member>
    <member name="T:UnityEditor.TextureImporterAlphaSource">
      <summary>
        <para>Select how the alpha of the imported texture is generated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterAlphaSource.FromGrayScale">
      <summary>
        <para>Generate Alpha from image gray scale.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterAlphaSource.FromInput">
      <summary>
        <para>Use Alpha from the input texture if one is provided.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterAlphaSource.None">
      <summary>
        <para>No Alpha will be used.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterCompression">
      <summary>
        <para>Select the kind of compression you want for your texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterCompression.Compressed">
      <summary>
        <para>Texture will be compressed using a standard format depending on the platform (DXT, ASTC, ...).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterCompression.CompressedHQ">
      <summary>
        <para>Texture will be compressed using a high quality format depending on the platform and availability (BC7, ASTC4x4, ...).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterCompression.CompressedLQ">
      <summary>
        <para>Texture will be compressed using a low quality but high performance, high compression format depending on the platform and availability (2bpp PVRTC, ASTC8x8, ...).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterCompression.Uncompressed">
      <summary>
        <para>Texture will not be compressed.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterCubemapConvolution">
      <summary>
        <para>Defines Cubemap convolution mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterCubemapConvolution.Diffuse">
      <summary>
        <para>Diffuse convolution (aka irradiance Cubemap).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterCubemapConvolution.None">
      <summary>
        <para>No convolution needed. This Cubemap texture represents mirror reflection or Skybox.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterCubemapConvolution.Specular">
      <summary>
        <para>Specular convolution (aka Prefiltered Environment Map).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterFormat">
      <summary>
        <para>Imported texture format for TextureImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.Alpha8">
      <summary>
        <para>TextureFormat.Alpha8 texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ARGB16">
      <summary>
        <para>TextureFormat.ARGB4444 texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ARGB32">
      <summary>
        <para>TextureFormat.ARGB32 texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_10x10">
      <summary>
        <para>ASTC compressed RGB texture format, 10x10 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_12x12">
      <summary>
        <para>ASTC compressed RGB texture format, 12x12 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_4x4">
      <summary>
        <para>ASTC compressed RGB texture format, 4x4 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_5x5">
      <summary>
        <para>ASTC compressed RGB texture format, 5x5 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_6x6">
      <summary>
        <para>ASTC compressed RGB texture format, 6x6 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_8x8">
      <summary>
        <para>ASTC compressed RGB texture format, 8x8 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_10x10">
      <summary>
        <para>ASTC compressed RGBA texture format, 10x10 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_12x12">
      <summary>
        <para>ASTC compressed RGBA texture format, 12x12 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_4x4">
      <summary>
        <para>ASTC compressed RGBA texture format, 4x4 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_5x5">
      <summary>
        <para>ASTC compressed RGBA texture format, 5x5 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_6x6">
      <summary>
        <para>ASTC compressed RGBA texture format, 6x6 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_8x8">
      <summary>
        <para>ASTC compressed RGBA texture format, 8x8 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ATC_RGB4">
      <summary>
        <para>ATC (Android) 4 bits/pixel compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ATC_RGBA8">
      <summary>
        <para>ATC (Android) 8 bits/pixel compressed RGBA texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.Automatic">
      <summary>
        <para>Choose texture format automatically based on the texture parameters.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.Automatic16bit">
      <summary>
        <para>Choose a 16 bit format automatically.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.AutomaticCompressed">
      <summary>
        <para>Choose a compressed format automatically.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.AutomaticCompressedHDR">
      <summary>
        <para>Choose a compressed HDR format automatically.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.AutomaticCrunched">
      <summary>
        <para>Choose a crunched format automatically.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.AutomaticHDR">
      <summary>
        <para>Choose an HDR format automatically.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.AutomaticTruecolor">
      <summary>
        <para>Choose a Truecolor format automatically.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.BC4">
      <summary>
        <para>TextureFormat.BC4 compressed texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.BC5">
      <summary>
        <para>TextureFormat.BC5 compressed texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.BC6H">
      <summary>
        <para>TextureFormat.BC6H compressed HDR texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.BC7">
      <summary>
        <para>TextureFormat.BC7 compressed texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.DXT1">
      <summary>
        <para>TextureFormat.DXT1 compressed texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.DXT1Crunched">
      <summary>
        <para>DXT1 compressed texture format with Crunch compression for small storage sizes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.DXT5">
      <summary>
        <para>TextureFormat.DXT5 compressed texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.DXT5Crunched">
      <summary>
        <para>DXT5 compressed texture format with Crunch compression for small storage sizes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.EAC_R">
      <summary>
        <para>ETC2EAC compressed 4 bits  pixel unsigned R texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.EAC_R_SIGNED">
      <summary>
        <para>ETC2EAC compressed 4 bits  pixel signed R texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.EAC_RG">
      <summary>
        <para>ETC2EAC compressed 8 bits  pixel unsigned RG texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.EAC_RG_SIGNED">
      <summary>
        <para>ETC2EAC compressed 4 bits  pixel signed RG texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ETC_RGB4">
      <summary>
        <para>ETC (GLES2.0) 4 bits/pixel compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ETC2_RGB4">
      <summary>
        <para>ETC2 compressed 4 bits / pixel RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ETC2_RGB4_PUNCHTHROUGH_ALPHA">
      <summary>
        <para>ETC2 compressed 4 bits / pixel RGB + 1-bit alpha texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ETC2_RGBA8">
      <summary>
        <para>ETC2 compressed 8 bits / pixel RGBA texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGB2">
      <summary>
        <para>PowerVR/iOS TextureFormat.PVRTC_RGB2 compressed texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGB4">
      <summary>
        <para>PowerVR/iOS TextureFormat.PVRTC_RGB4 compressed texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGBA2">
      <summary>
        <para>PowerVR/iOS TextureFormat.PVRTC_RGBA2 compressed texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGBA4">
      <summary>
        <para>PowerVR/iOS TextureFormat.PVRTC_RGBA4 compressed texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.RGB16">
      <summary>
        <para>TextureFormat.RGB565 texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.RGB24">
      <summary>
        <para>TextureFormat.RGB24 texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.RGBA16">
      <summary>
        <para>TextureFormat.RGBA4444 texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.RGBA32">
      <summary>
        <para>TextureFormat.RGBA32 texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.RGBAHalf">
      <summary>
        <para>TextureFormat.RGBAHalf floating point texture format.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterGenerateCubemap">
      <summary>
        <para>Cubemap generation mode for TextureImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.AutoCubemap">
      <summary>
        <para>Automatically determine type of cubemap generation from the source image.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.Cylindrical">
      <summary>
        <para>Generate cubemap from cylindrical texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.FullCubemap">
      <summary>
        <para>Generate cubemap from vertical or horizontal cross texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.None">
      <summary>
        <para>Do not generate cubemap (default).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.Spheremap">
      <summary>
        <para>Generate cubemap from spheremap texture.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterMipFilter">
      <summary>
        <para>Mip map filter for TextureImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterMipFilter.BoxFilter">
      <summary>
        <para>Box mipmap filter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterMipFilter.KaiserFilter">
      <summary>
        <para>Kaiser mipmap filter.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterNormalFilter">
      <summary>
        <para>Normal map filtering mode for TextureImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNormalFilter.Sobel">
      <summary>
        <para>Sobel normal map filter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNormalFilter.Standard">
      <summary>
        <para>Standard normal map filter.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterNPOTScale">
      <summary>
        <para>Scaling mode for non power of two textures in TextureImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNPOTScale.None">
      <summary>
        <para>Keep non power of two textures as is.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNPOTScale.ToLarger">
      <summary>
        <para>Scale to larger power of two.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNPOTScale.ToNearest">
      <summary>
        <para>Scale to nearest power of two.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNPOTScale.ToSmaller">
      <summary>
        <para>Scale to smaller power of two.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterPlatformSettings">
      <summary>
        <para>Stores platform specifics settings of a TextureImporter.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterPlatformSettings.allowsAlphaSplitting">
      <summary>
        <para>Allows Alpha splitting on the imported texture when needed (for example ETC1 compression for textures with transparency).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterPlatformSettings.compressionQuality">
      <summary>
        <para>Quality of texture compression in the range [0..100].</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterPlatformSettings.crunchedCompression">
      <summary>
        <para>Use crunch compression when available.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterPlatformSettings.format">
      <summary>
        <para>Format of imported texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterPlatformSettings.maxTextureSize">
      <summary>
        <para>Maximum texture size.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterPlatformSettings.name">
      <summary>
        <para>Name of the build target.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterPlatformSettings.overridden">
      <summary>
        <para>Set to true in order to override the Default platform parameters by those provided in the TextureImporterPlatformSettings structure.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterPlatformSettings.textureCompression">
      <summary>
        <para>Compression of imported texture.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TextureImporterPlatformSettings.CopyTo(UnityEditor.TextureImporterPlatformSettings)">
      <summary>
        <para>Copy parameters into another TextureImporterPlatformSettings object.</para>
      </summary>
      <param name="target">TextureImporterPlatformSettings object to copy settings to.</param>
    </member>
    <member name="T:UnityEditor.TextureImporterRGBMMode">
      <summary>
        <para>RGBM encoding mode for HDR textures in TextureImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterRGBMMode.Auto">
      <summary>
        <para>Do RGBM encoding when source data is HDR in TextureImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterRGBMMode.Encoded">
      <summary>
        <para>Source texture is already RGBM encoded in TextureImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterRGBMMode.Off">
      <summary>
        <para>Do not perform RGBM encoding in TextureImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterRGBMMode.On">
      <summary>
        <para>Do RGBM encoding in TextureImporter.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterSettings">
      <summary>
        <para>Stores settings of a TextureImporter.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.alphaIsTransparency">
      <summary>
        <para>If the provided alpha channel is transparency, enable this to dilate the color to avoid filtering artifacts on the edges.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.alphaSource">
      <summary>
        <para>Select how the alpha of the imported texture is generated.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.aniso">
      <summary>
        <para>Anisotropic filtering level of the texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.borderMipmap">
      <summary>
        <para>Enable this to avoid colors seeping out to the edge of the lower Mip levels. Used for light cookies.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.convertToNormalMap">
      <summary>
        <para>Convert heightmap to normal map?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.cubemapConvolution">
      <summary>
        <para>Convolution mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.cubemapConvolutionExponent">
      <summary>
        <para>Defines how fast Phong exponent wears off in mip maps. Higher value will apply less blur to high resolution mip maps.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.cubemapConvolutionSteps">
      <summary>
        <para>Defines how many different Phong exponents to store in mip maps. Higher value will give better transition between glossy and rough reflections, but will need higher texture resolution.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.fadeOut">
      <summary>
        <para>Fade out mip levels to gray color?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.filterMode">
      <summary>
        <para>Filtering mode of the texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.generateCubemap">
      <summary>
        <para>Cubemap generation mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.grayscaleToAlpha">
      <summary>
        <para>Generate alpha channel from intensity?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.heightmapScale">
      <summary>
        <para>Amount of bumpyness in the heightmap.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.mipmapBias">
      <summary>
        <para>Mip map bias of the texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.mipmapEnabled">
      <summary>
        <para>Generate mip maps for the texture?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.mipmapFadeDistanceEnd">
      <summary>
        <para>Mip level where texture is faded out to gray completely.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.mipmapFadeDistanceStart">
      <summary>
        <para>Mip level where texture begins to fade out to gray.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.mipmapFilter">
      <summary>
        <para>Mipmap filtering mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.normalMapFilter">
      <summary>
        <para>Normal map filtering mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.npotScale">
      <summary>
        <para>Scaling mode for non power of two textures.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.readable">
      <summary>
        <para>Is texture data readable from scripts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.rgbm">
      <summary>
        <para>RGBM encoding mode for HDR textures in TextureImporter.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spriteAlignment">
      <summary>
        <para>Edge-relative alignment of the sprite graphic.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spriteBorder">
      <summary>
        <para>Border sizes of the generated sprites.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spriteExtrude">
      <summary>
        <para>The number of blank pixels to leave between the edge of the graphic and the mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spriteMode">
      <summary>
        <para>Sprite texture import mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spritePivot">
      <summary>
        <para>Pivot point of the Sprite relative to its graphic's rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spritePixelsPerUnit">
      <summary>
        <para>The number of pixels in the sprite that correspond to one unit in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spritePixelsToUnits">
      <summary>
        <para>Scale factor between pixels in the sprite graphic and world space units.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spriteTessellationDetail">
      <summary>
        <para>The tessellation detail to be used for generating the mesh for the associated sprite if the SpriteMode is set to Single. For Multiple sprites, use the SpriteEditor to specify the value per sprite.
Valid values are in the range [0-1], with higher values generating a tighter mesh. A default of -1 will allow Unity to determine the value automatically.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.sRGBTexture">
      <summary>
        <para>Is texture storing color data?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.textureShape">
      <summary>
        <para>Shape of imported texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.textureType">
      <summary>
        <para>Which type of texture are we dealing with here.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.wrapMode">
      <summary>
        <para>Wrap mode (Repeat or Clamp) of the texture.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TextureImporterSettings.ApplyTextureType(UnityEditor.TextureImporterType,System.Boolean)">
      <summary>
        <para>Configure parameters to import a texture for a purpose of type, as described TextureImporterType|here.</para>
      </summary>
      <param name="type">Texture type. See TextureImporterType.</param>
      <param name="applyAll">If false, change only specific properties. Exactly which, depends on type.</param>
    </member>
    <member name="M:UnityEditor.TextureImporterSettings.CopyTo(UnityEditor.TextureImporterSettings)">
      <summary>
        <para>Copy parameters into another TextureImporterSettings object.</para>
      </summary>
      <param name="target">TextureImporterSettings object to copy settings to.</param>
    </member>
    <member name="M:UnityEditor.TextureImporterSettings.Equal(UnityEditor.TextureImporterSettings,UnityEditor.TextureImporterSettings)">
      <summary>
        <para>Test texture importer settings for equality.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="T:UnityEditor.TextureImporterShape">
      <summary>
        <para>Select the kind of shape of your texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterShape.Texture2D">
      <summary>
        <para>Texture is 2D.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterShape.TextureCube">
      <summary>
        <para>Texture is a Cubemap.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterType">
      <summary>
        <para>Select this to set basic parameters depending on the purpose of your texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Cookie">
      <summary>
        <para>This sets up your texture with the basic parameters used for the Cookies of your lights.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Cursor">
      <summary>
        <para>Use this if your texture is going to be used as a cursor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Default">
      <summary>
        <para>This is the most common setting used for all the textures in general.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.GUI">
      <summary>
        <para>Use this if your texture is going to be used on any HUD/GUI Controls.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Image">
      <summary>
        <para>This is the most common setting used for all the textures in general.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Lightmap">
      <summary>
        <para>This sets up your texture with the parameters used by the lightmap.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.NormalMap">
      <summary>
        <para>Select this to turn the color channels into a format suitable for real-time normal mapping.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.SingleChannel">
      <summary>
        <para>Use this for texture containing a single channel.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Sprite">
      <summary>
        <para>Select this if you will be using your texture for Sprite graphics.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TizenOSVersion">
      <summary>
        <para>Tizen OS compatibility.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TizenOSVersion.Version24">
      <summary>
        <para></para>
      </summary>
    </member>
    <member name="T:UnityEditor.TizenShowActivityIndicatorOnLoading">
      <summary>
        <para>Enumerator list of different activity indicators your game can show when loading.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TizenShowActivityIndicatorOnLoading.DontShow">
      <summary>
        <para>Sets your game not to show any indicator while loading.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TizenShowActivityIndicatorOnLoading.InversedLarge">
      <summary>
        <para>The loading indicator size is large and rotates counterclockwise.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TizenShowActivityIndicatorOnLoading.InversedSmall">
      <summary>
        <para>The loading indicator size is small and rotates counterclockwise.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TizenShowActivityIndicatorOnLoading.Large">
      <summary>
        <para>The loading indicator size is large and rotates clockwise.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TizenShowActivityIndicatorOnLoading.Small">
      <summary>
        <para>The loading indicator size is small and rotates clockwise.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Tool">
      <summary>
        <para>Which tool is active in the editor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Tool.Move">
      <summary>
        <para>The move tool is active.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Tool.None">
      <summary>
        <para>No tool is active. Set this to implement your own in-inspector toolbar (like the terrain editor does).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Tool.Rect">
      <summary>
        <para>The rect tool is active.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Tool.Rotate">
      <summary>
        <para>The rotate tool is active.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Tool.Scale">
      <summary>
        <para>The scale tool is active.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Tool.View">
      <summary>
        <para>The view tool is active - Use Tools.viewTool to find out which view tool we're talking about.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Tools">
      <summary>
        <para>Class used to manipulate the tools used in Unity's Scene View.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.current">
      <summary>
        <para>The tool that is currently selected for the Scene View.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.handlePosition">
      <summary>
        <para>The position of the tool handle in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.handleRect">
      <summary>
        <para>The rectangle used for the rect tool.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.handleRectRotation">
      <summary>
        <para>The rotation of the rect tool handle in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.handleRotation">
      <summary>
        <para>The rotation of the tool handle in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.hidden">
      <summary>
        <para>Hides the Tools(Move, Rotate, Resize) on the Scene view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.pivotMode">
      <summary>
        <para>Are we in Center or Pivot mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.pivotRotation">
      <summary>
        <para>What's the rotation of the tool handle.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.rectBlueprintMode">
      <summary>
        <para>Is the rect handle in blueprint mode?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.viewTool">
      <summary>
        <para>The option that is currently active for the View tool in the Scene view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.visibleLayers">
      <summary>
        <para>Which layers are visible in the scene view.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TransformSort">
      <summary>
        <para>Is the default sorting method used by the hierarchy.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TransformSort.content">
      <summary>
        <para>Content to visualize the transform sorting method.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TrueTypeFontImporter">
      <summary>
        <para>AssetImporter for importing Fonts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.ascentCalculationMode">
      <summary>
        <para>Calculation mode for determining font's ascent.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.characterPadding">
      <summary>
        <para>Border pixels added to character images for padding. This is useful if you want to render text using a shader which needs to render outside of the character area (like an outline shader).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.characterSpacing">
      <summary>
        <para>Spacing between character images in the generated texture in pixels. This is useful if you want to render text using a shader which samples pixels outside of the character area (like an outline shader).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.customCharacters">
      <summary>
        <para>A custom set of characters to be included in the Font Texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontNames">
      <summary>
        <para>An array of font names, to be used when includeFontData is set to false.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontReferences">
      <summary>
        <para>References to other fonts to be used looking for fallbacks.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontRenderingMode">
      <summary>
        <para>Font rendering mode to use for this font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontSize">
      <summary>
        <para>Font size to use for importing the characters.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontTextureCase">
      <summary>
        <para>Use this to adjust which characters should be imported.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontTTFName">
      <summary>
        <para>The internal font name of the TTF file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.includeFontData">
      <summary>
        <para>If this is enabled, the actual font will be embedded into the asset for Dynamic fonts.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TrueTypeFontImporter.GenerateEditableFont(System.String)">
      <summary>
        <para>Create an editable copy of the font asset at path.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="T:UnityEditor.tvOSSdkVersion">
      <summary>
        <para>Supported tvOS SDK versions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.tvOSSdkVersion.Device">
      <summary>
        <para>Device SDK.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.tvOSSdkVersion.Simulator">
      <summary>
        <para>Simulator SDK.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.tvOSTargetOSVersion">
      <summary>
        <para>Supported tvOS deployment versions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.tvOSTargetOSVersion.tvOS_9_0">
      <summary>
        <para>Target tvOS 9.0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.tvOSTargetOSVersion.tvOS_9_1">
      <summary>
        <para>Target tvOS 9.1.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.tvOSTargetOSVersion.Unknown">
      <summary>
        <para>Unknown tvOS version, managed by user.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UIOrientation">
      <summary>
        <para>Default mobile device orientation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.AutoRotation">
      <summary>
        <para>Auto Rotation Enabled.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.LandscapeLeft">
      <summary>
        <para>Landscape : counter-clockwise from Portrait.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.LandscapeRight">
      <summary>
        <para>Landscape: clockwise from Portrait.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.Portrait">
      <summary>
        <para>Portrait.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.PortraitUpsideDown">
      <summary>
        <para>Portrait upside down.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Undo">
      <summary>
        <para>Lets you register undo operations on specific objects you are about to perform changes on.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Undo.undoRedoPerformed">
      <summary>
        <para>Callback that is triggered after an undo or redo was executed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Undo.willFlushUndoRecord">
      <summary>
        <para>Invoked before the Undo system performs a flush.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.AddComponent(UnityEngine.GameObject,System.Type)">
      <summary>
        <para>Adds a component to the game object and registers an undo operation for this action.</para>
      </summary>
      <param name="gameObject">The game object you want to add the component to.</param>
      <param name="type">The type of component you want to add.</param>
      <returns>
        <para>The newly added component.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Undo.AddComponent(UnityEngine.GameObject)">
      <summary>
        <para>Generic version.</para>
      </summary>
      <param name="gameObject">The game object you want to add the component to.</param>
      <returns>
        <para>The newly added component.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Undo.ClearUndo(UnityEngine.Object)">
      <summary>
        <para>Removes all Undo operation for the identifier object registered using Undo.RegisterCompleteObjectUndo from the undo stack.</para>
      </summary>
      <param name="identifier"></param>
    </member>
    <member name="M:UnityEditor.Undo.CollapseUndoOperations(System.Int32)">
      <summary>
        <para>Collapses all undo operation up to group index together into one step.</para>
      </summary>
      <param name="groupIndex"></param>
    </member>
    <member name="M:UnityEditor.Undo.DestroyObjectImmediate(UnityEngine.Object)">
      <summary>
        <para>Destroys the object and records an undo operation so that it can be recreated.</para>
      </summary>
      <param name="objectToUndo">The object that will be destroyed.</param>
    </member>
    <member name="M:UnityEditor.Undo.FlushUndoRecordObjects">
      <summary>
        <para>Ensure objects recorded using RecordObject or ::ref:RecordObjects are registered as an undoable action. In most cases there is no reason to invoke FlushUndoRecordObjects since it's automatically done right after mouse-up and certain other events that conventionally marks the end of an action.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.GetCurrentGroup">
      <summary>
        <para>Unity automatically groups undo operations by the current group index.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.GetCurrentGroupName">
      <summary>
        <para>Get the name that will be shown in the UI for the current undo group.</para>
      </summary>
      <returns>
        <para>Name of the current group or an empty string if the current group is empty.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Undo.IncrementCurrentGroup">
      <summary>
        <para>Unity automatically groups undo operations by the current group index.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.MoveGameObjectToScene(UnityEngine.GameObject,UnityEngine.SceneManagement.Scene,System.String)">
      <summary>
        <para>Move a GameObject from its current scene to a new scene.
It is required that the GameObject is at the root of its current scene.</para>
      </summary>
      <param name="go">GameObject to move.</param>
      <param name="scene">Scene to move the GameObject into.</param>
      <param name="name">Name of the undo action.</param>
    </member>
    <member name="M:UnityEditor.Undo.PerformRedo">
      <summary>
        <para>Perform an Redo operation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.PerformUndo">
      <summary>
        <para>Perform an Undo operation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.RecordObject(UnityEngine.Object,System.String)">
      <summary>
        <para>Records any changes done on the object after the RecordObject function.</para>
      </summary>
      <param name="objectToUndo">The reference to the object that you will be modifying.</param>
      <param name="name">The title of the action to appear in the undo history (i.e. visible in the undo menu).</param>
    </member>
    <member name="M:UnityEditor.Undo.RecordObjects(UnityEngine.Object[],System.String)">
      <summary>
        <para>Records multiple undoable objects in a single call. This is the same as calling Undo.RecordObject multiple times.</para>
      </summary>
      <param name="objectsToUndo"></param>
      <param name="name"></param>
    </member>
    <member name="M:UnityEditor.Undo.RegisterCompleteObjectUndo(UnityEngine.Object,System.String)">
      <summary>
        <para>Stores a copy of the object states on the undo stack.</para>
      </summary>
      <param name="objectToUndo">The object whose state changes need to be undone.</param>
      <param name="name">The name of the undo operation.</param>
    </member>
    <member name="M:UnityEditor.Undo.RegisterCompleteObjectUndo(UnityEngine.Object[],System.String)">
      <summary>
        <para>This is equivalent to calling the first overload mutiple times, save for the fact that only one undo operation will be generated for this one.</para>
      </summary>
      <param name="objectsToUndo">An array of objects whose state changes need to be undone.</param>
      <param name="name">The name of the undo operation.</param>
    </member>
    <member name="M:UnityEditor.Undo.RegisterCreatedObjectUndo(UnityEngine.Object,System.String)">
      <summary>
        <para>Register an undo operations for a newly created object.</para>
      </summary>
      <param name="objectToUndo">The object that was created.</param>
      <param name="name">The name of the action to undo. Think "Undo ...." in the main menu.</param>
    </member>
    <member name="M:UnityEditor.Undo.RegisterFullObjectHierarchyUndo(UnityEngine.Object,System.String)">
      <summary>
        <para>Copy the states of a hierarchy of objects onto the undo stack.</para>
      </summary>
      <param name="objectToUndo">The object used to determine a hierarchy of objects whose state changes need to be undone.</param>
      <param name="name">The name of the undo operation.</param>
    </member>
    <member name="M:UnityEditor.Undo.RegisterFullObjectHierarchyUndo(UnityEngine.Object)">
      <summary>
        <para>This overload is deprecated. Use Undo.RegisterFullObjectHierarchyUndo(Object, string) instead.</para>
      </summary>
      <param name="objectToUndo"></param>
    </member>
    <member name="M:UnityEditor.Undo.RevertAllDownToGroup(System.Int32)">
      <summary>
        <para>Performs all undo operations up to the group index without storing a redo operation in the process.</para>
      </summary>
      <param name="group"></param>
    </member>
    <member name="M:UnityEditor.Undo.RevertAllInCurrentGroup">
      <summary>
        <para>Performs the last undo operation but does not record a redo operation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.SetCurrentGroupName(System.String)">
      <summary>
        <para>Set the name of the current undo group.</para>
      </summary>
      <param name="name">New name of the current undo group.</param>
    </member>
    <member name="M:UnityEditor.Undo.SetTransformParent(UnityEngine.Transform,UnityEngine.Transform,System.String)">
      <summary>
        <para>Sets the parent of transform to the new parent and records an undo operation.</para>
      </summary>
      <param name="transform"></param>
      <param name="newParent"></param>
      <param name="name"></param>
    </member>
    <member name="T:UnityEditor.Undo.UndoRedoCallback">
      <summary>
        <para>Delegate used for undoRedoPerformed.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Undo.WillFlushUndoRecord">
      <summary>
        <para>Delegate used for willFlushUndoRecord.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UndoPropertyModification">
      <summary>
        <para>See Also: Undo.postprocessModifications.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UnwrapParam">
      <summary>
        <para>Unwrapping settings.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UnwrapParam.angleError">
      <summary>
        <para>Maximum allowed angle distortion (0..1).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UnwrapParam.areaError">
      <summary>
        <para>Maximum allowed area distortion (0..1).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UnwrapParam.hardAngle">
      <summary>
        <para>This angle (in degrees) or greater between triangles will cause seam to be created.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UnwrapParam.packMargin">
      <summary>
        <para>How much uv-islands will be padded.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.UnwrapParam.SetDefaults(UnityEditor.UnwrapParam&amp;)">
      <summary>
        <para>Will set default values for params.</para>
      </summary>
      <param name="param"></param>
    </member>
    <member name="T:UnityEditor.Unwrapping">
      <summary>
        <para>This class holds everything you may need in regard to uv-unwrapping.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Unwrapping.GeneratePerTriangleUV(UnityEngine.Mesh)">
      <summary>
        <para>Will generate per-triangle uv (3 UVs for each triangle) with default settings.</para>
      </summary>
      <param name="src">The source mesh to generate UVs for.</param>
      <returns>
        <para>The list of UVs generated.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Unwrapping.GeneratePerTriangleUV(UnityEngine.Mesh,UnityEditor.UnwrapParam)">
      <summary>
        <para>Will generate per-triangle uv (3 UVs for each triangle) with provided settings.</para>
      </summary>
      <param name="src">The source mesh to generate UVs for.</param>
      <param name="settings">Allows you to specify custom parameters to control the unwrapping.</param>
      <returns>
        <para>The list of UVs generated.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Unwrapping.GenerateSecondaryUVSet(UnityEngine.Mesh)">
      <summary>
        <para>Will auto generate uv2 with default settings for provided mesh, and fill them in.</para>
      </summary>
      <param name="src"></param>
    </member>
    <member name="M:UnityEditor.Unwrapping.GenerateSecondaryUVSet(UnityEngine.Mesh,UnityEditor.UnwrapParam)">
      <summary>
        <para>Will auto generate uv2 with provided settings for provided mesh, and fill them in.</para>
      </summary>
      <param name="src"></param>
      <param name="settings"></param>
    </member>
    <member name="T:UnityEditor.VersionControl.Asset">
      <summary>
        <para>This class containes information about the version control state of an asset.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.fullName">
      <summary>
        <para>Gets the full name of the asset including extension.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.isFolder">
      <summary>
        <para>Returns true if the asset is a folder.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.isInCurrentProject">
      <summary>
        <para>Returns true if the assets is in the current project.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.isMeta">
      <summary>
        <para>Returns true if the instance of the Asset class actually refers to a .meta file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.locked">
      <summary>
        <para>Returns true if the asset is locked by the version control system.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.name">
      <summary>
        <para>Get the name of the asset.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.path">
      <summary>
        <para>Gets the path of the asset.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.readOnly">
      <summary>
        <para>Returns true is the asset is read only.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.state">
      <summary>
        <para>Gets the version control state of the asset.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Asset.Edit">
      <summary>
        <para>Opens the assets in an associated editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Asset.IsOneOfStates(UnityEditor.VersionControl.Asset/States[])">
      <summary>
        <para>Returns true if the version control state of the assets is one of the input states.</para>
      </summary>
      <param name="states">Array of states to test for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Asset.IsState(UnityEditor.VersionControl.Asset/States)">
      <summary>
        <para>Returns true if the version control state of the asset exactly matches the input state.</para>
      </summary>
      <param name="state">State to check for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Asset.Load">
      <summary>
        <para>Loads the asset to memory.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Asset.States">
      <summary>
        <para>Describes the various version control states an asset can have.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset.States.AddedLocal">
      <summary>
        <para>The was locally added to version control.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset.States.AddedRemote">
      <summary>
        <para>Remotely this asset was added to version control.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset.States.CheckedOutLocal">
      <summary>
        <para>The asset has been checked out on the local machine.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset.States.CheckedOutRemote">
      <summary>
        <para>The asset has been checked out on a remote machine.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset.States.Conflicted">
      <summary>
        <para>There is a conflict with the asset that needs to be resolved.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset.States.DeletedLocal">
      <summary>
        <para>The asset has been deleted locally.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset.States.DeletedRemote">
      <summary>
        <para>The asset has been deleted on a remote machine.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset.States.Local">
      <summary>
        <para>The asset is not under version control.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset.States.LockedLocal">
      <summary>
        <para>The asset is locked by the local machine.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset.States.LockedRemote">
      <summary>
        <para>The asset is locked by a remote machine.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset.States.MetaFile">
      <summary>
        <para>This instance of the class actaully refers to a .meta file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset.States.Missing">
      <summary>
        <para>The asset exists in version control but is missing on the local machine.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset.States.None">
      <summary>
        <para>The version control state is unknown.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset.States.OutOfSync">
      <summary>
        <para>A newer version of the asset is available on the version control server.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset.States.ReadOnly">
      <summary>
        <para>The asset is read only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset.States.Synced">
      <summary>
        <para>The asset is up to date.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset.States.Updating">
      <summary>
        <para>The state of the asset is currently being queried from the version control server.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.AssetList">
      <summary>
        <para>A list of version control information about assets.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.AssetList.Filter(System.Boolean,UnityEditor.VersionControl.Asset/States[])">
      <summary>
        <para>Based on the current list and the states a new list is returned which only contains the assets with the requested states.</para>
      </summary>
      <param name="includeFolder">Whether or not folders should be included.</param>
      <param name="states">Which states to filter by.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.AssetList.FilterChildren">
      <summary>
        <para>Create an optimised list of assets by removing children of folders in the same list.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.AssetList.FilterCount(System.Boolean,UnityEditor.VersionControl.Asset/States[])">
      <summary>
        <para>Count the list of assets by given a set of states.</para>
      </summary>
      <param name="includeFolder">Whether or not to include folders.</param>
      <param name="states">Which states to include in the count.</param>
    </member>
    <member name="T:UnityEditor.VersionControl.ChangeSet">
      <summary>
        <para>Wrapper around a changeset description and ID.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.ChangeSet.defaultID">
      <summary>
        <para>The ID of  the default changeset.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ChangeSet.description">
      <summary>
        <para>Description of a changeset.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ChangeSet.id">
      <summary>
        <para>Version control specific ID of a changeset.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.ChangeSets">
      <summary>
        <para>Simply a list of changetsets.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.CheckoutMode">
      <summary>
        <para>What to checkout when starting the Checkout task through the version control Provider.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CheckoutMode.Asset">
      <summary>
        <para>Checkout the asset only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CheckoutMode.Both">
      <summary>
        <para>Checkout both asset and .meta file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CheckoutMode.Exact">
      <summary>
        <para>Checkout.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CheckoutMode.Meta">
      <summary>
        <para>Checkout .meta file only.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.CompletionAction">
      <summary>
        <para>Different actions a version control task can do upon completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnAddedChangeWindow">
      <summary>
        <para>Refresh windows upon task completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnChangeContentsPendingWindow">
      <summary>
        <para>Update the content of a pending changeset with the result of the task upon completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnChangeSetsPendingWindow">
      <summary>
        <para>Update the pending changesets with the result of the task upon completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnCheckoutCompleted">
      <summary>
        <para>Show or update the checkout failure window.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnGotLatestPendingWindow">
      <summary>
        <para>Refreshes the incoming and pensing changes window upon task completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnIncomingPendingWindow">
      <summary>
        <para>Update incoming changes window with the result of the task upon completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnSubmittedChangeWindow">
      <summary>
        <para>Refresh the submit window with the result of the task upon completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.UpdatePendingWindow">
      <summary>
        <para>Update the list of pending changes when a task completes.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.ConfigField">
      <summary>
        <para>This class describes the.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.description">
      <summary>
        <para>Descrition of the configuration field.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.isPassword">
      <summary>
        <para>This is true if the configuration field is a password field.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.isRequired">
      <summary>
        <para>This is true if the configuration field is required for the version control plugin to function correctly.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.label">
      <summary>
        <para>Label that is displayed next to the configuration field in the editor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.name">
      <summary>
        <para>Name of the configuration field.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.FileMode">
      <summary>
        <para>Mode of the file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.FileMode.Binary">
      <summary>
        <para>Binary file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.FileMode.None">
      <summary>
        <para>No mode set.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.FileMode.Text">
      <summary>
        <para>Text file.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.MergeMethod">
      <summary>
        <para>Which method to use when merging.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.MergeMethod.MergeAll">
      <summary>
        <para>Merge all changes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.MergeMethod.MergeNonConflicting">
      <summary>
        <para>Merge non-conflicting changes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.MergeMethod.MergeNone">
      <summary>
        <para>Don't merge any changes.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Message">
      <summary>
        <para>Messages from the version control system.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Message.message">
      <summary>
        <para>The message text.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Message.severity">
      <summary>
        <para>The severity of the message.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Message.Severity">
      <summary>
        <para>Severity of a version control message.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Message.Severity.Error">
      <summary>
        <para>Error message.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Message.Severity.Info">
      <summary>
        <para>Informational message.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Message.Severity.Verbose">
      <summary>
        <para>Verbose message.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Message.Severity.Warning">
      <summary>
        <para>Warning message.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Message.Show">
      <summary>
        <para>Write the message to the console.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.OnlineState">
      <summary>
        <para>Represent the connection state of the version control provider.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.OnlineState.Offline">
      <summary>
        <para>Connection to the version control server could not be established.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.OnlineState.Online">
      <summary>
        <para>Connection to the version control server has been established.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.OnlineState.Updating">
      <summary>
        <para>The version control provider is currently trying to connect to the version control server.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Plugin">
      <summary>
        <para>The plugin class describes a version control plugin and which configuratin options it has.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Plugin.configFields">
      <summary>
        <para>Configuration fields of the plugin.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Provider">
      <summary>
        <para>This class provides acces to the version control API.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.activeTask">
      <summary>
        <para>Gets the currently executing task.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.enabled">
      <summary>
        <para>Returns true if the version control provider is enabled and a valid Unity Pro License was found.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.isActive">
      <summary>
        <para>Returns true if a version control plugin has been selected and configured correctly.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.offlineReason">
      <summary>
        <para>Returns the reason for the version control provider being offline (if it is offline).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.onlineState">
      <summary>
        <para>Returns the OnlineState of the version control provider.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.requiresNetwork">
      <summary>
        <para>This is true if a network connection is required by the currently selected version control plugin to perform any action.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Add(UnityEditor.VersionControl.AssetList,System.Boolean)">
      <summary>
        <para>Adds an assets or list of assets to version control.</para>
      </summary>
      <param name="assets">List of assets to add to version control system.</param>
      <param name="recursive">Set this true if adding should be done recursively into subfolders.</param>
      <param name="asset">Single asset to add to version control system.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Add(UnityEditor.VersionControl.Asset,System.Boolean)">
      <summary>
        <para>Adds an assets or list of assets to version control.</para>
      </summary>
      <param name="assets">List of assets to add to version control system.</param>
      <param name="recursive">Set this true if adding should be done recursively into subfolders.</param>
      <param name="asset">Single asset to add to version control system.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.AddIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Given a list of assets this function returns true if Add is a valid task to perform.</para>
      </summary>
      <param name="assets">List of assets to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetDescription(UnityEditor.VersionControl.ChangeSet)">
      <summary>
        <para>Given a changeset only containing the changeset ID, this will start a task for quering the description of the changeset.</para>
      </summary>
      <param name="changeset">Changeset to query description of.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.ChangeSet)">
      <summary>
        <para>Move an asset or list of assets from their current changeset to a new changeset.</para>
      </summary>
      <param name="assets">List of asset to move to changeset.</param>
      <param name="changeset">Changeset to move asset to.</param>
      <param name="asset">Asset to move to changeset.</param>
      <param name="changesetID">ChangesetID to move asset to.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.ChangeSet)">
      <summary>
        <para>Move an asset or list of assets from their current changeset to a new changeset.</para>
      </summary>
      <param name="assets">List of asset to move to changeset.</param>
      <param name="changeset">Changeset to move asset to.</param>
      <param name="asset">Asset to move to changeset.</param>
      <param name="changesetID">ChangesetID to move asset to.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.AssetList,System.String)">
      <summary>
        <para>Move an asset or list of assets from their current changeset to a new changeset.</para>
      </summary>
      <param name="assets">List of asset to move to changeset.</param>
      <param name="changeset">Changeset to move asset to.</param>
      <param name="asset">Asset to move to changeset.</param>
      <param name="changesetID">ChangesetID to move asset to.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.Asset,System.String)">
      <summary>
        <para>Move an asset or list of assets from their current changeset to a new changeset.</para>
      </summary>
      <param name="assets">List of asset to move to changeset.</param>
      <param name="changeset">Changeset to move asset to.</param>
      <param name="asset">Asset to move to changeset.</param>
      <param name="changesetID">ChangesetID to move asset to.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSets">
      <summary>
        <para>Get a list of pending changesets owned by the current user.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetStatus(UnityEditor.VersionControl.ChangeSet)">
      <summary>
        <para>Retrieves the list of assets belonging to a changeset.</para>
      </summary>
      <param name="changeset">Changeset to query for assets.</param>
      <param name="changesetID">ChangesetID to query for assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetStatus(System.String)">
      <summary>
        <para>Retrieves the list of assets belonging to a changeset.</para>
      </summary>
      <param name="changeset">Changeset to query for assets.</param>
      <param name="changesetID">ChangesetID to query for assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
      </summary>
      <param name="assets">List of assets to checkout.</param>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
      <param name="asset">Asset to checkout.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(System.String[],UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
      </summary>
      <param name="assets">List of assets to checkout.</param>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
      <param name="asset">Asset to checkout.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEngine.Object[],UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
      </summary>
      <param name="assets">List of assets to checkout.</param>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
      <param name="asset">Asset to checkout.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
      </summary>
      <param name="assets">List of assets to checkout.</param>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
      <param name="asset">Asset to checkout.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(System.String,UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
      </summary>
      <param name="assets">List of assets to checkout.</param>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
      <param name="asset">Asset to checkout.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEngine.Object,UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
      </summary>
      <param name="assets">List of assets to checkout.</param>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
      <param name="asset">Asset to checkout.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.CheckoutIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Given an asset or a  list of assets this function returns true if Checkout is a valid task to perform.</para>
      </summary>
      <param name="assets">List of assets.</param>
      <param name="asset">Single asset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.CheckoutIsValid(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Given an asset or a  list of assets this function returns true if Checkout is a valid task to perform.</para>
      </summary>
      <param name="assets">List of assets.</param>
      <param name="asset">Single asset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ClearCache">
      <summary>
        <para>This will invalidate the cached state information for all assets.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Delete(System.String)">
      <summary>
        <para>This will statt a task for deleting an asset or assets both from disk and from version control system.</para>
      </summary>
      <param name="assetProjectPath">Project path of asset.</param>
      <param name="assets">List of assets to delete.</param>
      <param name="asset">Asset to delete.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Delete(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>This will statt a task for deleting an asset or assets both from disk and from version control system.</para>
      </summary>
      <param name="assetProjectPath">Project path of asset.</param>
      <param name="assets">List of assets to delete.</param>
      <param name="asset">Asset to delete.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Delete(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>This will statt a task for deleting an asset or assets both from disk and from version control system.</para>
      </summary>
      <param name="assetProjectPath">Project path of asset.</param>
      <param name="assets">List of assets to delete.</param>
      <param name="asset">Asset to delete.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.DeleteChangeSets(UnityEditor.VersionControl.ChangeSets)">
      <summary>
        <para>Starts a task that will attempt to delete the given changeset.</para>
      </summary>
      <param name="changesets">List of changetsets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.DeleteChangeSetsIsValid(UnityEditor.VersionControl.ChangeSets)">
      <summary>
        <para>Test if deleting a changeset is a valid task to perform.</para>
      </summary>
      <param name="changesets">Changeset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.DiffHead(UnityEditor.VersionControl.AssetList,System.Boolean)">
      <summary>
        <para>Starts a task for showing a diff of the given assest versus their head revision.</para>
      </summary>
      <param name="assets">List of assets.</param>
      <param name="includingMetaFiles">Whether or not to include .meta.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.DiffIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Return true is starting a Diff task is a valid operation.</para>
      </summary>
      <param name="assets">List of assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetActiveConfigFields">
      <summary>
        <para>Returns the configuration fields for the currently active version control plugin.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetActivePlugin">
      <summary>
        <para>Gets the currently user selected verson control plugin.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetAssetByGUID(System.String)">
      <summary>
        <para>Returns version control information about an asset.</para>
      </summary>
      <param name="guid">GUID of asset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetAssetByPath(System.String)">
      <summary>
        <para>Returns version control information about an asset.</para>
      </summary>
      <param name="unityPath">Path to asset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetAssetListFromSelection">
      <summary>
        <para>Return version control information about the currently selected assets.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetLatest(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Start a task for getting the latest version of an asset from the version control server.</para>
      </summary>
      <param name="assets">List of assets to update.</param>
      <param name="asset">Asset to update.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetLatest(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Start a task for getting the latest version of an asset from the version control server.</para>
      </summary>
      <param name="assets">List of assets to update.</param>
      <param name="asset">Asset to update.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetLatestIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Returns true if getting the latest version of an asset is a valid operation.</para>
      </summary>
      <param name="assets">List of assets to test.</param>
      <param name="asset">Asset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetLatestIsValid(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Returns true if getting the latest version of an asset is a valid operation.</para>
      </summary>
      <param name="assets">List of assets to test.</param>
      <param name="asset">Asset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Incoming">
      <summary>
        <para>Start a task for quering the version control server for incoming changes.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.IncomingChangeSetAssets(UnityEditor.VersionControl.ChangeSet)">
      <summary>
        <para>Given an incoming changeset this will start a task to query the version control server for which assets are part of the changeset.</para>
      </summary>
      <param name="changeset">Incoming changeset.</param>
      <param name="changesetID">Incoming changesetid.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.IncomingChangeSetAssets(System.String)">
      <summary>
        <para>Given an incoming changeset this will start a task to query the version control server for which assets are part of the changeset.</para>
      </summary>
      <param name="changeset">Incoming changeset.</param>
      <param name="changesetID">Incoming changesetid.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.IsOpenForEdit(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Returns true if an asset can be edited.</para>
      </summary>
      <param name="asset">Asset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Lock(UnityEditor.VersionControl.AssetList,System.Boolean)">
      <summary>
        <para>Attempt to lock an asset for exclusive editing.</para>
      </summary>
      <param name="assets">List of assets to lock/unlock.</param>
      <param name="locked">True to lock assets, false to unlock assets.</param>
      <param name="asset">Asset to lock/unlock.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Lock(UnityEditor.VersionControl.Asset,System.Boolean)">
      <summary>
        <para>Attempt to lock an asset for exclusive editing.</para>
      </summary>
      <param name="assets">List of assets to lock/unlock.</param>
      <param name="locked">True to lock assets, false to unlock assets.</param>
      <param name="asset">Asset to lock/unlock.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.LockIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Return true if the task can be executed.</para>
      </summary>
      <param name="assets">List of assets to test.</param>
      <param name="asset">Asset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.LockIsValid(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Return true if the task can be executed.</para>
      </summary>
      <param name="assets">List of assets to test.</param>
      <param name="asset">Asset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Merge(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.MergeMethod)">
      <summary>
        <para>This method will initiate a merge task handle merging of the conflicting assets.</para>
      </summary>
      <param name="assets">The list of conflicting assets to be merged.</param>
      <param name="method">How to merge the assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Move(System.String,System.String)">
      <summary>
        <para>Uses the version control plugin to move an asset from one path to another.</para>
      </summary>
      <param name="from">Path to source asset.</param>
      <param name="to">Path to destination.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Resolve(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.ResolveMethod)">
      <summary>
        <para>Start a task that will resolve conflicting assets in version control.</para>
      </summary>
      <param name="assets">The list of asset to mark as resolved.</param>
      <param name="resolveMethod">How the assets should be resolved.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ResolveIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Tests if any of the assets in the list is resolvable.</para>
      </summary>
      <param name="assets">The list of asset to be resolved.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Revert(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.RevertMode)">
      <summary>
        <para>Reverts the specified assets by undoing any changes done since last time you synced.</para>
      </summary>
      <param name="assets">The list of assets to be reverted.</param>
      <param name="mode">How to revert the assets.</param>
      <param name="asset">The asset to be reverted.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Revert(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.RevertMode)">
      <summary>
        <para>Reverts the specified assets by undoing any changes done since last time you synced.</para>
      </summary>
      <param name="assets">The list of assets to be reverted.</param>
      <param name="mode">How to revert the assets.</param>
      <param name="asset">The asset to be reverted.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.RevertIsValid(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.RevertMode)">
      <summary>
        <para>Return true if Revert is a valid task to perform.</para>
      </summary>
      <param name="assets">List of assets to test.</param>
      <param name="mode">Revert mode to test for.</param>
      <param name="asset">Asset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.RevertIsValid(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.RevertMode)">
      <summary>
        <para>Return true if Revert is a valid task to perform.</para>
      </summary>
      <param name="assets">List of assets to test.</param>
      <param name="mode">Revert mode to test for.</param>
      <param name="asset">Asset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
      <param name="asset">The asset path to fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
      <param name="asset">The asset path to fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.AssetList,System.Boolean)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
      <param name="asset">The asset path to fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.Asset,System.Boolean)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
      <param name="asset">The asset path to fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(System.String[])">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
      <param name="asset">The asset path to fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(System.String[],System.Boolean)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
      <param name="asset">The asset path to fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(System.String)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
      <param name="asset">The asset path to fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(System.String,System.Boolean)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
      <param name="asset">The asset path to fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Submit(UnityEditor.VersionControl.ChangeSet,UnityEditor.VersionControl.AssetList,System.String,System.Boolean)">
      <summary>
        <para>Start a task that submits the assets to version control.</para>
      </summary>
      <param name="changeset">The changeset to submit.</param>
      <param name="list">The list of assets to submit.</param>
      <param name="description">The description of the changeset.</param>
      <param name="saveOnly">If true then only save the changeset to be submitted later.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.SubmitIsValid(UnityEditor.VersionControl.ChangeSet,UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Returns true if submitting the assets is a valid operation.</para>
      </summary>
      <param name="changeset">The changeset to submit.</param>
      <param name="assets">The asset to submit.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.UnlockIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Returns true if locking the assets is a valid operation.</para>
      </summary>
      <param name="assets">The assets to lock.</param>
      <param name="asset">The asset to lock.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.UnlockIsValid(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Returns true if locking the assets is a valid operation.</para>
      </summary>
      <param name="assets">The assets to lock.</param>
      <param name="asset">The asset to lock.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.UpdateSettings">
      <summary>
        <para>Start a task that sends the version control settings to the version control system.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.ResolveMethod">
      <summary>
        <para>How assets should be resolved.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.ResolveMethod.UseMerged">
      <summary>
        <para>Use merged version.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.ResolveMethod.UseMine">
      <summary>
        <para>Use "mine" (local version).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.ResolveMethod.UseTheirs">
      <summary>
        <para>Use "theirs" (other/remote version).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.RevertMode">
      <summary>
        <para>Defines the behaviour of the version control revert methods.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.RevertMode.KeepModifications">
      <summary>
        <para>Revert files but keep locally changed ones.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.RevertMode.Normal">
      <summary>
        <para>Use the version control regular revert approach.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.RevertMode.Unchanged">
      <summary>
        <para>Revert only unchanged files.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.SubmitResult">
      <summary>
        <para>The status of an operation returned by the VCS.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.SubmitResult.ConflictingFiles">
      <summary>
        <para>Files conflicted.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.SubmitResult.Error">
      <summary>
        <para>An error was returned.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.SubmitResult.OK">
      <summary>
        <para>Submission worked.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.SubmitResult.UnaddedFiles">
      <summary>
        <para>Files were unable to be added.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Task">
      <summary>
        <para>A UnityEditor.VersionControl.Task is created almost everytime UnityEditor.VersionControl.Provider is ask to perform an action.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.assetList">
      <summary>
        <para>The result of some types of tasks.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.changeSets">
      <summary>
        <para>List of changesets returned by some tasks.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.description">
      <summary>
        <para>A short description of the current task.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.messages">
      <summary>
        <para>May contain messages from the version control plugins.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.progressPct">
      <summary>
        <para>Progress of current task in precent.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.resultCode">
      <summary>
        <para>Some task return result codes, these are stored here.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.secondsSpent">
      <summary>
        <para>Total time spent in task since the task was started.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.success">
      <summary>
        <para>Get whether or not the task was completed succesfully.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.text">
      <summary>
        <para>Will contain the result of the Provider.ChangeSetDescription task.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Task.SetCompletionAction(UnityEditor.VersionControl.CompletionAction)">
      <summary>
        <para>Upon completion of a task a completion task will be performed if it is set.</para>
      </summary>
      <param name="action">Which completion action to perform.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Task.Wait">
      <summary>
        <para>A blocking wait for the task to complete.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VertexChannelCompressionFlags">
      <summary>
        <para>This enum is used to build a bitmask for controlling per-channel vertex compression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VertexChannelCompressionFlags.kColor">
      <summary>
        <para>Vertex color.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VertexChannelCompressionFlags.kNormal">
      <summary>
        <para>Vertex normal.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VertexChannelCompressionFlags.kPosition">
      <summary>
        <para>Position.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VertexChannelCompressionFlags.kTangent">
      <summary>
        <para>Tangent.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VertexChannelCompressionFlags.kUV0">
      <summary>
        <para>Texture coordinate channel 0. Usually used for Albedo texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VertexChannelCompressionFlags.kUV1">
      <summary>
        <para>Texture coordinate channel 1. Usually used for baked lightmap.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VertexChannelCompressionFlags.kUV2">
      <summary>
        <para>Texture coordinate channel 2. Usually used for realtime GI.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VertexChannelCompressionFlags.kUV3">
      <summary>
        <para>Texture coordinate channel 3.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VideoBitrateMode">
      <summary>
        <para>Bit rate after the clip is transcoded.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoBitrateMode.High">
      <summary>
        <para>High value, possibly exceeding typical internet connection capabilities.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoBitrateMode.Low">
      <summary>
        <para>Low value, safe for slower internet connections or clips where visual quality is not critical.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoBitrateMode.Medium">
      <summary>
        <para>Typical bit rate supported by internet connections.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VideoClipImporter">
      <summary>
        <para>VideoClipImporter lets you modify Video.VideoClip import settings from Editor scripts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VideoClipImporter.defaultTargetSettings">
      <summary>
        <para>Default values for the platform-specific import settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VideoClipImporter.deinterlaceMode">
      <summary>
        <para>Images are deinterlaced during transcode.  This tells the importer how to interpret fields in the source, if any.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VideoClipImporter.flipHorizontal">
      <summary>
        <para>Apply a horizontal flip during import.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VideoClipImporter.flipVertical">
      <summary>
        <para>Apply a vertical flip during import.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VideoClipImporter.frameCount">
      <summary>
        <para>Number of frames in the clip.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VideoClipImporter.frameRate">
      <summary>
        <para>Frame rate of the clip.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VideoClipImporter.importAudio">
      <summary>
        <para>Import audio tracks from source file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VideoClipImporter.isPlayingPreview">
      <summary>
        <para>Whether the preview is currently playing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VideoClipImporter.keepAlpha">
      <summary>
        <para>Whether to keep the alpha from the source into the transcoded clip.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VideoClipImporter.linearColor">
      <summary>
        <para>Used in legacy import mode.  Same as MovieImport.linearTexture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VideoClipImporter.outputFileSize">
      <summary>
        <para>Size in bytes of the file once imported.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VideoClipImporter.quality">
      <summary>
        <para>Used in legacy import mode.  Same as MovieImport.quality.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VideoClipImporter.sourceAudioTrackCount">
      <summary>
        <para>Number of audio tracks in the source file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VideoClipImporter.sourceFileSize">
      <summary>
        <para>Size in bytes of the file before importing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VideoClipImporter.sourceHasAlpha">
      <summary>
        <para>True if the source file has a channel for per-pixel transparency.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VideoClipImporter.useLegacyImporter">
      <summary>
        <para>Whether to import a MovieTexture (legacy) or a VideoClip.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VideoClipImporter.ClearTargetSettings(System.String)">
      <summary>
        <para>Clear the platform-specific import settings for the specified platform, causing them to go back to the default settings.</para>
      </summary>
      <param name="platform">Platform name.</param>
    </member>
    <member name="M:UnityEditor.VideoClipImporter.GetPreviewTexture">
      <summary>
        <para>Returns a texture with the transcoded clip's current frame.
Returns frame 0 when not playing, and frame at current time when playing.</para>
      </summary>
      <returns>
        <para>Texture containing the current frame.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.VideoClipImporter.GetResizeHeight(UnityEditor.VideoResizeMode)">
      <summary>
        <para>Get the resulting height of the resize operation for the specified resize mode.</para>
      </summary>
      <param name="mode">Mode for which the height is queried.</param>
      <returns>
        <para>Height for the specified resize mode.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.VideoClipImporter.GetResizeModeName(UnityEditor.VideoResizeMode)">
      <summary>
        <para>Get the full name of the resize operation for the specified resize mode.</para>
      </summary>
      <param name="mode">Mode for which the width is queried.</param>
      <returns>
        <para>Name for the specified resize mode.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.VideoClipImporter.GetResizeWidth(UnityEditor.VideoResizeMode)">
      <summary>
        <para>Get the resulting width of the resize operation for the specified resize mode.</para>
      </summary>
      <param name="mode">Mode for which the width is queried.</param>
      <returns>
        <para>Width for the specified resize mode.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.VideoClipImporter.GetSourceAudioChannelCount(System.UInt16)">
      <summary>
        <para>Number of audio channels in the specified source track.</para>
      </summary>
      <param name="audioTrackIdx">Index of the audio track to query.</param>
      <returns>
        <para>Number of channels.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.VideoClipImporter.GetSourceAudioSampleRate(System.UInt16)">
      <summary>
        <para>Sample rate of the specified audio track.</para>
      </summary>
      <param name="audioTrackIdx">Index of the audio track to query.</param>
      <returns>
        <para>Sample rate in Hertz.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.VideoClipImporter.GetTargetSettings(System.String)">
      <summary>
        <para>Returns the platform-specific import settings for the specified platform.</para>
      </summary>
      <param name="platform">Platform name.</param>
      <returns>
        <para>The platform-specific import settings.  Throws an exception if the platform is unknown.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.VideoClipImporter.PlayPreview">
      <summary>
        <para>Starts preview playback.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VideoClipImporter.SetTargetSettings(System.String,UnityEditor.VideoImporterTargetSettings)">
      <summary>
        <para>Sets the platform-specific import settings for the specified platform.</para>
      </summary>
      <param name="platform">Platform name.</param>
      <param name="settings">The new platform-specific import settings.</param>
    </member>
    <member name="M:UnityEditor.VideoClipImporter.StopPreview">
      <summary>
        <para>Stops preview playback.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VideoCodec">
      <summary>
        <para>Video codec to use when importing video clips.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoCodec.Auto">
      <summary>
        <para>Choose the codec that supports hardware decoding on the target platform.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoCodec.H264">
      <summary>
        <para>Encode video with the H.264 codec.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoCodec.VP8">
      <summary>
        <para>Encode video using the vp8 codec.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VideoDeinterlaceMode">
      <summary>
        <para>Describes how the fields in the image, if any, should be interpreted.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoDeinterlaceMode.Even">
      <summary>
        <para>First field is in the even lines.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoDeinterlaceMode.Odd">
      <summary>
        <para>First field is in the odd lines.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoDeinterlaceMode.Off">
      <summary>
        <para>Clip is not interlaced.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VideoEncodeAspectRatio">
      <summary>
        <para>Methods to compensate for aspect ratio discrepancies between the source resolution and the wanted encoding size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoEncodeAspectRatio.NoScaling">
      <summary>
        <para>Perform no operation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoEncodeAspectRatio.Stretch">
      <summary>
        <para>Stretch the source to fill the target resolution without preserving the aspect ratio.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VideoImporterTargetSettings">
      <summary>
        <para>Importer settings that can have platform-specific values.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoImporterTargetSettings.aspectRatio">
      <summary>
        <para>How the aspect ratio discrepancies, if any, will be handled if the chosen import resolution has a different ratio than the source.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoImporterTargetSettings.bitrateMode">
      <summary>
        <para>Bit rate type for the transcoded clip.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoImporterTargetSettings.codec">
      <summary>
        <para>Codec that the resulting VideoClip will use.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoImporterTargetSettings.customHeight">
      <summary>
        <para>Height of the transcoded clip when the resizeMode is set to custom.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoImporterTargetSettings.customWidth">
      <summary>
        <para>Width of the transcoded clip when the resizeMode is set to custom.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoImporterTargetSettings.enableTranscoding">
      <summary>
        <para>Controls whether the movie file will be transcoded during import. When transcoding is not enabled, the file will be imported in its original format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoImporterTargetSettings.resizeMode">
      <summary>
        <para>How to resize the images when going into the imported clip.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoImporterTargetSettings.spatialQuality">
      <summary>
        <para>Controls an internal image resize, resulting in blurrier images but smaller image dimensions and file size.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VideoImporterTargetSettings.#ctor">
      <summary>
        <para>Constructs an object with all members initialized with the default value inherent to their type.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VideoResizeMode">
      <summary>
        <para>How the video clip's images will be resized during transcoding.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoResizeMode.CustomSize">
      <summary>
        <para>Resulting size will be driven by VideoClipImporter.customWidth and VideoClipImporter.customHeight.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoResizeMode.HalfRes">
      <summary>
        <para>Half width and height.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoResizeMode.OriginalSize">
      <summary>
        <para>Same width and height as the source.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoResizeMode.QuarterRes">
      <summary>
        <para>Quarter width and height.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoResizeMode.Square1024">
      <summary>
        <para>Fit source in a 1024x1024 rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoResizeMode.Square256">
      <summary>
        <para>Fit source in a 256x256 rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoResizeMode.Square512">
      <summary>
        <para>Fit source in a 512x512 rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoResizeMode.ThreeQuarterRes">
      <summary>
        <para>3/4 width and height.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VideoSpatialQuality">
      <summary>
        <para>Controls the imported clip's internal resize to save space at the cost of blurrier images.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoSpatialQuality.HighSpatialQuality">
      <summary>
        <para>No resize performed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoSpatialQuality.LowSpatialQuality">
      <summary>
        <para>Scales width and height by 1/2.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VideoSpatialQuality.MediumSpatialQuality">
      <summary>
        <para>Scales width and height by 3/4.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ViewTool">
      <summary>
        <para>Enum for Tools.viewTool.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ViewTool.FPS">
      <summary>
        <para>The FPS tool is selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ViewTool.None">
      <summary>
        <para>View tool is not selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ViewTool.Orbit">
      <summary>
        <para>The orbit tool is selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ViewTool.Pan">
      <summary>
        <para>The pan tool is selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ViewTool.Zoom">
      <summary>
        <para>The zoom tool is selected.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.WebGLCompressionFormat">
      <summary>
        <para>An enum containing different compression types.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WebGLCompressionFormat.Brotli">
      <summary>
        <para>WebGL resources are stored using Brotli compression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WebGLCompressionFormat.Disabled">
      <summary>
        <para>WebGL resources are uncompressed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WebGLCompressionFormat.Gzip">
      <summary>
        <para>WebGL resources are stored using Gzip compression.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.WebGLExceptionSupport">
      <summary>
        <para>Options for Exception support in WebGL.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WebGLExceptionSupport.ExplicitlyThrownExceptionsOnly">
      <summary>
        <para>Enable throw support.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WebGLExceptionSupport.Full">
      <summary>
        <para>Enable exception support for all exceptions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WebGLExceptionSupport.None">
      <summary>
        <para>Disable exception support.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.WiiUBuildDebugLevel">
      <summary>
        <para>Wii U Player debugging level.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WiiUBuildDebugLevel.Debug">
      <summary>
        <para>Asserts enabled, memory profiling enabled, Nintendo Wii U profiler linked, no optimizations.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WiiUBuildDebugLevel.DebugOptimized">
      <summary>
        <para>Asserts enabled, memory profiling enabled, Nintendo Wii U profiler linked, optimized build.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WiiUBuildDebugLevel.Development">
      <summary>
        <para>Memory profiling enabled, Nintendo Wii U profiler linked, optimizations enabled.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WiiUBuildDebugLevel.Master">
      <summary>
        <para>Optimizations enabled.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.WiiUBuildOutput">
      <summary>
        <para>Player packaging.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WiiUBuildOutput.DownloadImage">
      <summary>
        <para>Download image.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WiiUBuildOutput.Unpackaged">
      <summary>
        <para>Unpacked.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WiiUBuildOutput.WUMADFile">
      <summary>
        <para>WUMAD package.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.WiiUTVResolution">
      <summary>
        <para>Resolution setting for TV output.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WiiUTVResolution.Resolution_1080p">
      <summary>
        <para>1920×1080 (Full HD).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WiiUTVResolution.Resolution_720p">
      <summary>
        <para>1280×720 pixels.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.WSABuildType">
      <summary>
        <para>Build configurations for Windows Store Visual Studio solutions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WSABuildType.Debug">
      <summary>
        <para>Debug configuation.
No optimizations, profiler code enabled.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WSABuildType.Master">
      <summary>
        <para>Master configuation.
Optimizations enabled, profiler code disabled. This configuration is used when submitting the application to Windows Store.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WSABuildType.Release">
      <summary>
        <para>Release configuration.
Optimization enabled, profiler code enabled.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.WSASDK">
      <summary>
        <para>Specifies Windows SDK which used when building Windows Store Apps.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.WSASubtarget">
      <summary>
        <para>Target device type for a Windows Store application to run on.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WSASubtarget.AnyDevice">
      <summary>
        <para>The application targets all devices that run Windows Store applications.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WSASubtarget.HoloLens">
      <summary>
        <para>The application targets HoloLens.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WSASubtarget.Mobile">
      <summary>
        <para>Application targets mobile devices.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.WSASubtarget.PC">
      <summary>
        <para>Application targets PCs.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.XboxBuildSubtarget">
      <summary>
        <para>Target Xbox build type.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxBuildSubtarget.Debug">
      <summary>
        <para>Debug player (for building with source code).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxBuildSubtarget.Development">
      <summary>
        <para>Development player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxBuildSubtarget.Master">
      <summary>
        <para>Master player (submission-proof).</para>
      </summary>
    </member>
  </members>
</doc>
